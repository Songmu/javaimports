// this has been auto generated by GenerateStdlib.java, do not modify
package com.nikodoko.javaimports.stdlib.internal;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.parser.Import;
import java.util.Map;

public class Java18StdlibChunk12 {
  static final Map<String, Import[]> CLASSES =
      new ImmutableMap.Builder<String, Import[]>()
          .put(
              "Entity",
              new Import[] {
                new Import("Entity", "javax.swing.text.html.parser", false),
                new Import("Entity", "org.w3c.dom", false),
              })
          .put(
              "ofLocalizedDateTime",
              new Import[] {
                new Import("ofLocalizedDateTime", "java.time.format.DateTimeFormatter", true),
              })
          .put(
              "Query",
              new Import[] {
                new Import("Query", "javax.management", false),
              })
          .put(
              "getCurrentEvent",
              new Import[] {
                new Import("getCurrentEvent", "java.awt.EventQueue", true),
              })
          .put(
              "HTMLEditorKit.ParserCallback",
              new Import[] {
                new Import("HTMLEditorKit.ParserCallback", "javax.swing.text.html", false),
              })
          .put(
              "ENCTYPE",
              new Import[] {
                new Import("ENCTYPE", "javax.swing.text.html.HTML.Attribute", true),
              })
          .put(
              "getOwner",
              new Import[] {
                new Import("getOwner", "java.nio.file.Files", true),
              })
          .put(
              "TAG_FEAT",
              new Import[] {
                new Import("TAG_FEAT", "java.awt.font.OpenType", true),
              })
          .put(
              "LookAndFeel",
              new Import[] {
                new Import("LookAndFeel", "javax.swing", false),
              })
          .put(
              "asList",
              new Import[] {
                new Import("asList", "java.util.Arrays", true),
              })
          .put(
              "systemDefault",
              new Import[] {
                new Import("systemDefault", "java.time.ZoneId", true),
              })
          .put(
              "MixerProvider",
              new Import[] {
                new Import("MixerProvider", "javax.sound.sampled.spi", false),
              })
          .put(
              "trailing",
              new Import[] {
                new Import("trailing", "java.awt.font.TextHitInfo", true),
              })
          .put(
              "StdDCLuminance",
              new Import[] {
                new Import("StdDCLuminance", "javax.imageio.plugins.jpeg.JPEGHuffmanTable", true),
              })
          .put(
              "MultiDocPrintJob",
              new Import[] {
                new Import("MultiDocPrintJob", "javax.print", false),
              })
          .put(
              "AccessibleTable",
              new Import[] {
                new Import("AccessibleTable", "javax.accessibility", false),
              })
          .put(
              "UnresolvedAddressException",
              new Import[] {
                new Import("UnresolvedAddressException", "java.nio.channels", false),
              })
          .put(
              "SeparatorUI",
              new Import[] {
                new Import("SeparatorUI", "javax.swing.plaf", false),
              })
          .put(
              "INSCRIPTIONAL_PARTHIAN",
              new Import[] {
                new Import("INSCRIPTIONAL_PARTHIAN", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "FilterReader",
              new Import[] {
                new Import("FilterReader", "java.io", false),
              })
          .put(
              "TOGGLE_POPUP",
              new Import[] {
                new Import("TOGGLE_POPUP", "javax.accessibility.AccessibleAction", true),
              })
          .put(
              "parameterModeIn",
              new Import[] {
                new Import("parameterModeIn", "java.sql.ParameterMetaData", true),
              })
          .put(
              "BindException",
              new Import[] {
                new Import("BindException", "java.net", false),
              })
          .put(
              "MetalComboBoxUI",
              new Import[] {
                new Import("MetalComboBoxUI", "javax.swing.plaf.metal", false),
              })
          .put(
              "BMPImageWriteParam",
              new Import[] {
                new Import("BMPImageWriteParam", "javax.imageio.plugins.bmp", false),
              })
          .put(
              "ACTION_COPY_OR_MOVE",
              new Import[] {
                new Import("ACTION_COPY_OR_MOVE", "java.awt.dnd.DnDConstants", true),
              })
          .put(
              "IMMUTABLE",
              new Import[] {
                new Import("IMMUTABLE", "java.util.Spliterator", true),
              })
          .put(
              "OBSERVED_ATTRIBUTE_ERROR",
              new Import[] {
                new Import(
                    "OBSERVED_ATTRIBUTE_ERROR",
                    "javax.management.monitor.MonitorNotification",
                    true),
              })
          .put(
              "BALANCE",
              new Import[] {
                new Import("BALANCE", "javax.sound.sampled.FloatControl.Type", true),
              })
          .put(
              "AsynchronousChannelProvider",
              new Import[] {
                new Import("AsynchronousChannelProvider", "java.nio.channels.spi", false),
              })
          .put(
              "SQLNonTransientException",
              new Import[] {
                new Import("SQLNonTransientException", "java.sql", false),
              })
          .put(
              "StyleSheet",
              new Import[] {
                new Import("StyleSheet", "javax.swing.text.html", false),
              })
          .put(
              "XmlAccessorType",
              new Import[] {
                new Import("XmlAccessorType", "javax.xml.bind.annotation", false),
              })
          .put(
              "JULY",
              new Import[] {
                new Import("JULY", "java.util.Calendar", true),
                new Import("JULY", "javax.xml.datatype.DatatypeConstants", true),
              })
          .put(
              "DefaultCopyDrop",
              new Import[] {
                new Import("DefaultCopyDrop", "java.awt.dnd.DragSource", true),
              })
          .put(
              "TAGS",
              new Import[] {
                new Import("TAGS", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "getSystemTextColor",
              new Import[] {
                new Import("getSystemTextColor", "javax.swing.plaf.metal.MetalLookAndFeel", true),
              })
          .put(
              "CellEditor",
              new Import[] {
                new Import("CellEditor", "javax.swing", false),
              })
          .put(
              "HORIZONTAL_SPLIT",
              new Import[] {
                new Import("HORIZONTAL_SPLIT", "javax.swing.JSplitPane", true),
              })
          .put(
              "SEG_LINETO",
              new Import[] {
                new Import("SEG_LINETO", "java.awt.geom.PathIterator", true),
              })
          .put(
              "getMenuBarBorder",
              new Import[] {
                new Import("getMenuBarBorder", "javax.swing.plaf.basic.BasicBorders", true),
              })
          .put(
              "FocusTraversalPolicy",
              new Import[] {
                new Import("FocusTraversalPolicy", "java.awt", false),
              })
          .put(
              "nextAfter",
              new Import[] {
                new Import("nextAfter", "java.lang.Math", true),
                new Import("nextAfter", "java.lang.StrictMath", true),
              })
          .put(
              "MultiPixelPackedSampleModel",
              new Import[] {
                new Import("MultiPixelPackedSampleModel", "java.awt.image", false),
              })
          .put(
              "MAX_VALUE",
              new Import[] {
                new Import("MAX_VALUE", "java.lang.Double", true),
                new Import("MAX_VALUE", "java.lang.Character", true),
                new Import("MAX_VALUE", "java.lang.Byte", true),
                new Import("MAX_VALUE", "java.lang.Float", true),
                new Import("MAX_VALUE", "java.lang.Integer", true),
                new Import("MAX_VALUE", "java.lang.Long", true),
                new Import("MAX_VALUE", "java.lang.Short", true),
                new Import("MAX_VALUE", "java.time.Year", true),
              })
          .put(
              "InvalidMarkException",
              new Import[] {
                new Import("InvalidMarkException", "java.nio", false),
              })
          .put(
              "MatteBorder",
              new Import[] {
                new Import("MatteBorder", "javax.swing.border", false),
              })
          .put(
              "showMessageDialog",
              new Import[] {
                new Import("showMessageDialog", "javax.swing.JOptionPane", true),
              })
          .put(
              "MultiRootPaneUI",
              new Import[] {
                new Import("MultiRootPaneUI", "javax.swing.plaf.multi", false),
              })
          .put(
              "SystemException",
              new Import[] {
                new Import("SystemException", "org.omg.CORBA", false),
              })
          .put(
              "TrayIcon",
              new Import[] {
                new Import("TrayIcon", "java.awt", false),
              })
          .put(
              "SOAP12HTTP_BINDING",
              new Import[] {
                new Import("SOAP12HTTP_BINDING", "javax.xml.ws.soap.SOAPBinding", true),
              })
          .put(
              "getRadioButtonBorder",
              new Import[] {
                new Import("getRadioButtonBorder", "javax.swing.plaf.basic.BasicBorders", true),
              })
          .put(
              "DatatypeConverterInterface",
              new Import[] {
                new Import("DatatypeConverterInterface", "javax.xml.bind", false),
              })
          .put(
              "WatchEvent",
              new Import[] {
                new Import("WatchEvent", "java.nio.file", false),
              })
          .put(
              "Queue",
              new Import[] {
                new Import("Queue", "java.util", false),
              })
          .put(
              "NA_LETTER_TRANSPARENT",
              new Import[] {
                new Import(
                    "NA_LETTER_TRANSPARENT", "javax.print.attribute.standard.MediaName", true),
              })
          .put(
              "TINYINT",
              new Import[] {
                new Import("TINYINT", "java.sql.Types", true),
              })
          .put(
              "JUNE",
              new Import[] {
                new Import("JUNE", "java.util.Calendar", true),
                new Import("JUNE", "javax.xml.datatype.DatatypeConstants", true),
              })
          .put(
              "AccessibleResourceBundle",
              new Import[] {
                new Import("AccessibleResourceBundle", "javax.accessibility", false),
              })
          .put(
              "_PERSISTENT",
              new Import[] {
                new Import("_PERSISTENT", "org.omg.PortableServer.LifespanPolicyValue", true),
              })
          .put(
              "REF_invokeVirtual",
              new Import[] {
                new Import("REF_invokeVirtual", "java.lang.invoke.MethodHandleInfo", true),
              })
          .put(
              "BORDER_RIGHT",
              new Import[] {
                new Import("BORDER_RIGHT", "javax.swing.text.html.CSS.Attribute", true),
              })
          .put(
              "ColorUIResource",
              new Import[] {
                new Import("ColorUIResource", "javax.swing.plaf", false),
              })
          .put(
              "newCachedThreadPool",
              new Import[] {
                new Import("newCachedThreadPool", "java.util.concurrent.Executors", true),
              })
          .put(
              "MODAL_LAYER",
              new Import[] {
                new Import("MODAL_LAYER", "javax.swing.JLayeredPane", true),
              })
          .put(
              "OP_CONNECT",
              new Import[] {
                new Import("OP_CONNECT", "java.nio.channels.SelectionKey", true),
              })
          .put(
              "COMBINING",
              new Import[] {
                new Import("COMBINING", "java.awt.font.GlyphMetrics", true),
              })
          .put(
              "GroupPrincipal",
              new Import[] {
                new Import("GroupPrincipal", "java.nio.file.attribute", false),
              })
          .put(
              "ITEM_LAST",
              new Import[] {
                new Import("ITEM_LAST", "java.awt.event.ItemEvent", true),
              })
          .put(
              "AdapterActivatorOperations",
              new Import[] {
                new Import("AdapterActivatorOperations", "org.omg.PortableServer", false),
              })
          .put(
              "TAG_FVAR",
              new Import[] {
                new Import("TAG_FVAR", "java.awt.font.OpenType", true),
              })
          .put(
              "JMenuBar",
              new Import[] {
                new Import("JMenuBar", "javax.swing", false),
              })
          .put(
              "Types",
              new Import[] {
                new Import("Types", "java.sql", false),
                new Import("Types", "javax.lang.model.util", false),
              })
          .put(
              "getFileAttributeView",
              new Import[] {
                new Import("getFileAttributeView", "java.nio.file.Files", true),
              })
          .put(
              "PRIVATE_KEY",
              new Import[] {
                new Import("PRIVATE_KEY", "javax.crypto.Cipher", true),
              })
          .put(
              "JobStateReason",
              new Import[] {
                new Import("JobStateReason", "javax.print.attribute.standard", false),
              })
          .put(
              "ISO_A10",
              new Import[] {
                new Import("ISO_A10", "javax.print.attribute.standard.MediaSizeName", true),
                new Import("ISO_A10", "java.awt.PageAttributes.MediaType", true),
              })
          .put(
              "getDefaultSocketFactory",
              new Import[] {
                new Import("getDefaultSocketFactory", "java.rmi.server.RMISocketFactory", true),
              })
          .put(
              "TOOL_BAR_CONTENT",
              new Import[] {
                new Import("TOOL_BAR_CONTENT", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "CLASS_ATTRIBUTE_PFX",
              new Import[] {
                new Import("CLASS_ATTRIBUTE_PFX", "java.util.jar.Pack200.Packer", true),
              })
          .put(
              "VALUE_NONE",
              new Import[] {
                new Import("VALUE_NONE", "javax.imageio.metadata.IIOMetadataFormat", true),
              })
          .put(
              "OBJECT_REMOVED",
              new Import[] {
                new Import("OBJECT_REMOVED", "javax.naming.event.NamingEvent", true),
              })
          .put(
              "newFactory",
              new Import[] {
                new Import("newFactory", "javax.xml.stream.XMLEventFactory", true),
                new Import("newFactory", "javax.xml.stream.XMLInputFactory", true),
                new Import("newFactory", "javax.xml.stream.XMLOutputFactory", true),
                new Import("newFactory", "javax.sql.rowset.RowSetProvider", true),
              })
          .put(
              "ofStrict",
              new Import[] {
                new Import("ofStrict", "java.time.ZonedDateTime", true),
              })
          .put(
              "icSigRedColorantTag",
              new Import[] {
                new Import("icSigRedColorantTag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "mapping",
              new Import[] {
                new Import("mapping", "java.util.stream.Collectors", true),
              })
          .put(
              "BLUECOMPONENT",
              new Import[] {
                new Import("BLUECOMPONENT", "java.awt.color.ICC_ProfileRGB", true),
              })
          .put(
              "VSPACE",
              new Import[] {
                new Import("VSPACE", "javax.swing.text.html.HTML.Attribute", true),
              })
          .put(
              "ProfileDataException",
              new Import[] {
                new Import("ProfileDataException", "java.awt.color", false),
              })
          .put(
              "AWT_COMPONENT",
              new Import[] {
                new Import("AWT_COMPONENT", "javax.accessibility.AccessibleRole", true),
              })
          .put(
              "THAANA",
              new Import[] {
                new Import("THAANA", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "InitialContextFactory",
              new Import[] {
                new Import("InitialContextFactory", "javax.naming.spi", false),
              })
          .put(
              "SecureDirectoryStream",
              new Import[] {
                new Import("SecureDirectoryStream", "java.nio.file", false),
              })
          .put(
              "OutOfMemoryError",
              new Import[] {
                new Import("OutOfMemoryError", "java.lang", false),
              })
          .put(
              "TAG_PREP",
              new Import[] {
                new Import("TAG_PREP", "java.awt.font.OpenType", true),
              })
          .put(
              "PKCS12Attribute",
              new Import[] {
                new Import("PKCS12Attribute", "java.security", false),
              })
          .put(
              "mapLibraryName",
              new Import[] {
                new Import("mapLibraryName", "java.lang.System", true),
              })
          .put(
              "MONARCH",
              new Import[] {
                new Import("MONARCH", "java.awt.PageAttributes.MediaType", true),
              })
          .put(
              "ServiceRegistry",
              new Import[] {
                new Import("ServiceRegistry", "javax.imageio.spi", false),
              })
          .put(
              "MAP",
              new Import[] {
                new Import("MAP", "javax.swing.text.html.HTML.Tag", true),
              })
          .put(
              "fragmentHtmlFlavor",
              new Import[] {
                new Import("fragmentHtmlFlavor", "java.awt.datatransfer.DataFlavor", true),
              })
          .put(
              "KEY_LOCATION_LEFT",
              new Import[] {
                new Import("KEY_LOCATION_LEFT", "java.awt.event.KeyEvent", true),
              })
          .put(
              "RESERVED_UIROLE",
              new Import[] {
                new Import("RESERVED_UIROLE", "javax.print.ServiceUIFactory", true),
              })
          .put(
              "MAY",
              new Import[] {
                new Import("MAY", "java.util.Calendar", true),
                new Import("MAY", "javax.xml.datatype.DatatypeConstants", true),
              })
          .put(
              "HUFFMAN_ONLY",
              new Import[] {
                new Import("HUFFMAN_ONLY", "java.util.zip.Deflater", true),
              })
          .put(
              "MAX",
              new Import[] {
                new Import("MAX", "java.time.Instant", true),
                new Import("MAX", "java.time.LocalDateTime", true),
                new Import("MAX", "java.time.OffsetDateTime", true),
                new Import("MAX", "java.time.LocalTime", true),
                new Import("MAX", "java.time.ZoneOffset", true),
                new Import("MAX", "java.time.LocalDate", true),
                new Import("MAX", "java.time.OffsetTime", true),
              })
          .put(
              "WebService",
              new Import[] {
                new Import("WebService", "javax.jws", false),
              })
          .put(
              "NO_ORIENTATION",
              new Import[] {
                new Import("NO_ORIENTATION", "java.awt.Adjustable", true),
              })
          .put(
              "BindingHolder",
              new Import[] {
                new Import("BindingHolder", "org.omg.CosNaming", false),
              })
          .put(
              "MulticastChannel",
              new Import[] {
                new Import("MulticastChannel", "java.nio.channels", false),
              })
          .put(
              "BeanContextMembershipListener",
              new Import[] {
                new Import("BeanContextMembershipListener", "java.beans.beancontext", false),
              })
          .put(
              "CHILD_POLICY_REPEAT",
              new Import[] {
                new Import("CHILD_POLICY_REPEAT", "javax.imageio.metadata.IIOMetadataFormat", true),
              })
          .put(
              "ISO_DATE",
              new Import[] {
                new Import("ISO_DATE", "java.time.format.DateTimeFormatter", true),
              })
          .put(
              "ULongSeqHolder",
              new Import[] {
                new Import("ULongSeqHolder", "org.omg.CORBA", false),
              })
          .put(
              "PAUSE",
              new Import[] {
                new Import("PAUSE", "java.awt.Event", true),
              })
          .put(
              "FORMAT_FAILURE",
              new Import[] {
                new Import("FORMAT_FAILURE", "java.util.logging.ErrorManager", true),
              })
          .put(
              "Activator",
              new Import[] {
                new Import("Activator", "java.rmi.activation", false),
              })
          .put(
              "InconsistentTypeCodeHelper",
              new Import[] {
                new Import(
                    "InconsistentTypeCodeHelper", "org.omg.DynamicAny.DynAnyFactoryPackage", false),
              })
          .put(
              "Style",
              new Import[] {
                new Import("Style", "javax.swing.text", false),
              })
          .put(
              "ATTRIBUTE_RUN",
              new Import[] {
                new Import("ATTRIBUTE_RUN", "javax.accessibility.AccessibleExtendedText", true),
              })
          .put(
              "getWindowTitleBackground",
              new Import[] {
                new Import(
                    "getWindowTitleBackground", "javax.swing.plaf.metal.MetalLookAndFeel", true),
              })
          .put(
              "ROWSET_SYNC_PROVIDER_VERSION",
              new Import[] {
                new Import(
                    "ROWSET_SYNC_PROVIDER_VERSION", "javax.sql.rowset.spi.SyncFactory", true),
              })
          .put(
              "dk_all",
              new Import[] {
                new Import("dk_all", "org.omg.CORBA.DefinitionKind", true),
              })
          .put(
              "TimerMBean",
              new Import[] {
                new Import("TimerMBean", "javax.management.timer", false),
              })
          .put(
              "SPECIALS",
              new Import[] {
                new Import("SPECIALS", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "getDirectionality",
              new Import[] {
                new Import("getDirectionality", "java.lang.Character", true),
              })
          .put(
              "FormatMismatch",
              new Import[] {
                new Import("FormatMismatch", "org.omg.IOP.CodecPackage", false),
              })
          .put(
              "TextEvent",
              new Import[] {
                new Import("TextEvent", "java.awt.event", false),
              })
          .put(
              "JAXB_SCHEMA_LOCATION",
              new Import[] {
                new Import("JAXB_SCHEMA_LOCATION", "javax.xml.bind.Marshaller", true),
              })
          .put(
              "getContinuationDirContext",
              new Import[] {
                new Import("getContinuationDirContext", "javax.naming.spi.DirectoryManager", true),
              })
          .put(
              "ImageConsumer",
              new Import[] {
                new Import("ImageConsumer", "java.awt.image", false),
              })
          .put(
              "PENDING_HELD",
              new Import[] {
                new Import("PENDING_HELD", "javax.print.attribute.standard.JobState", true),
              })
          .put(
              "icXYZNumberX",
              new Import[] {
                new Import("icXYZNumberX", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "FontFormatException",
              new Import[] {
                new Import("FontFormatException", "java.awt", false),
              })
          .put(
              "URLConnection",
              new Import[] {
                new Import("URLConnection", "java.net", false),
              })
          .put(
              "Graphics2D",
              new Import[] {
                new Import("Graphics2D", "java.awt", false),
              })
          .put(
              "PRIVATE",
              new Import[] {
                new Import("PRIVATE", "java.nio.channels.FileChannel.MapMode", true),
                new Import("PRIVATE", "java.lang.reflect.Modifier", true),
                new Import("PRIVATE", "java.lang.invoke.MethodHandles.Lookup", true),
              })
          .put(
              "IIORegistry",
              new Import[] {
                new Import("IIORegistry", "javax.imageio.spi", false),
              })
          .put(
              "Completion",
              new Import[] {
                new Import("Completion", "javax.annotation.processing", false),
              })
          .put(
              "JMXAddressable",
              new Import[] {
                new Import("JMXAddressable", "javax.management.remote", false),
              })
          .put(
              "STRIKETHROUGH",
              new Import[] {
                new Import("STRIKETHROUGH", "java.awt.font.TextAttribute", true),
              })
          .put(
              "GURMUKHI",
              new Import[] {
                new Import("GURMUKHI", "java.awt.font.NumericShaper", true),
                new Import("GURMUKHI", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "MBeanServerNotificationFilter",
              new Import[] {
                new Import("MBeanServerNotificationFilter", "javax.management.relation", false),
              })
          .put(
              "HOLDING",
              new Import[] {
                new Import("HOLDING", "org.omg.PortableInterceptor", false),
                new Import("HOLDING", "org.omg.PortableServer.POAManagerPackage.State", true),
              })
          .put(
              "ComponentAttribute",
              new Import[] {
                new Import("ComponentAttribute", "javax.swing.text.StyleConstants", true),
              })
          .put(
              "procedureNoNulls",
              new Import[] {
                new Import("procedureNoNulls", "java.sql.DatabaseMetaData", true),
              })
          .put(
              "AttributeListImpl",
              new Import[] {
                new Import("AttributeListImpl", "org.xml.sax.helpers", false),
              })
          .put(
              "MissingResourceException",
              new Import[] {
                new Import("MissingResourceException", "java.util", false),
              })
          .put(
              "putLayer",
              new Import[] {
                new Import("putLayer", "javax.swing.JLayeredPane", true),
              })
          .put(
              "getWordEnd",
              new Import[] {
                new Import("getWordEnd", "javax.swing.text.Utilities", true),
              })
          .put(
              "CHOU_30",
              new Import[] {
                new Import("CHOU_30", "javax.print.attribute.standard.MediaSize.JIS", true),
              })
          .put(
              "PAGEABLE",
              new Import[] {
                new Import("PAGEABLE", "javax.print.DocFlavor.SERVICE_FORMATTED", true),
              })
          .put(
              "PosixFileAttributeView",
              new Import[] {
                new Import("PosixFileAttributeView", "java.nio.file.attribute", false),
              })
          .put(
              "SHAVIAN",
              new Import[] {
                new Import("SHAVIAN", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "AccessibleComponent",
              new Import[] {
                new Import("AccessibleComponent", "javax.accessibility", false),
              })
          .put(
              "BeanContextChildSupport",
              new Import[] {
                new Import("BeanContextChildSupport", "java.beans.beancontext", false),
              })
          .put(
              "ActivationGroupDesc.CommandEnvironment",
              new Import[] {
                new Import("ActivationGroupDesc.CommandEnvironment", "java.rmi.activation", false),
              })
          .put(
              "MAXIMIZED_VERT",
              new Import[] {
                new Import("MAXIMIZED_VERT", "java.awt.Frame", true),
              })
          .put(
              "getCurrentTheme",
              new Import[] {
                new Import("getCurrentTheme", "javax.swing.plaf.metal.MetalLookAndFeel", true),
              })
          .put(
              "CompilationMXBean",
              new Import[] {
                new Import("CompilationMXBean", "java.lang.management", false),
              })
          .put(
              "POINT_INFINITY",
              new Import[] {
                new Import("POINT_INFINITY", "java.security.spec.ECPoint", true),
              })
          .put(
              "DESKTOP_ICON",
              new Import[] {
                new Import("DESKTOP_ICON", "javax.accessibility.AccessibleRole", true),
                new Import("DESKTOP_ICON", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "NUMBERS",
              new Import[] {
                new Import("NUMBERS", "javax.swing.text.html.parser.DTDConstants", true),
              })
          .put(
              "setJNDIContext",
              new Import[] {
                new Import("setJNDIContext", "javax.sql.rowset.spi.SyncFactory", true),
              })
          .put(
              "readOnlyAction",
              new Import[] {
                new Import("readOnlyAction", "javax.swing.text.DefaultEditorKit", true),
              })
          .put(
              "SEPTEMBER",
              new Import[] {
                new Import("SEPTEMBER", "java.util.Calendar", true),
                new Import("SEPTEMBER", "javax.xml.datatype.DatatypeConstants", true),
              })
          .put(
              "newInstance",
              new Import[] {
                new Import("newInstance", "javax.xml.parsers.DocumentBuilderFactory", true),
                new Import("newInstance", "javax.xml.datatype.DatatypeFactory", true),
                new Import("newInstance", "java.lang.reflect.Array", true),
                new Import("newInstance", "org.w3c.dom.bootstrap.DOMImplementationRegistry", true),
                new Import("newInstance", "java.security.KeyStore.Builder", true),
                new Import("newInstance", "javax.xml.bind.JAXBContext", true),
                new Import("newInstance", "javax.xml.stream.XMLEventFactory", true),
                new Import("newInstance", "javax.xml.stream.XMLInputFactory", true),
                new Import("newInstance", "javax.xml.stream.XMLOutputFactory", true),
                new Import("newInstance", "javax.xml.xpath.XPathFactory", true),
                new Import("newInstance", "javax.xml.soap.SOAPFactory", true),
                new Import("newInstance", "javax.xml.soap.SOAPConnectionFactory", true),
                new Import("newInstance", "javax.xml.parsers.SAXParserFactory", true),
                new Import("newInstance", "javax.xml.soap.SOAPElementFactory", true),
                new Import("newInstance", "javax.xml.transform.TransformerFactory", true),
                new Import("newInstance", "javax.xml.validation.SchemaFactory", true),
                new Import("newInstance", "javax.xml.soap.MessageFactory", true),
                new Import("newInstance", "java.net.URLClassLoader", true),
              })
          .put(
              "BACKGROUND_REPEAT",
              new Import[] {
                new Import("BACKGROUND_REPEAT", "javax.swing.text.html.CSS.Attribute", true),
              })
          .put(
              "parkNanos",
              new Import[] {
                new Import("parkNanos", "java.util.concurrent.locks.LockSupport", true),
              })
          .put(
              "SpaceBelow",
              new Import[] {
                new Import("SpaceBelow", "javax.swing.text.StyleConstants", true),
              })
          .put(
              "CHOU_40",
              new Import[] {
                new Import("CHOU_40", "javax.print.attribute.standard.MediaSize.JIS", true),
              })
          .put(
              "TypeParameterElement",
              new Import[] {
                new Import("TypeParameterElement", "javax.lang.model.element", false),
              })
          .put(
              "functionColumnResult",
              new Import[] {
                new Import("functionColumnResult", "java.sql.DatabaseMetaData", true),
              })
          .put(
              "MetalIconFactory.TreeLeafIcon",
              new Import[] {
                new Import("MetalIconFactory.TreeLeafIcon", "javax.swing.plaf.metal", false),
              })
          .put(
              "HTTP_UNSUPPORTED_TYPE",
              new Import[] {
                new Import("HTTP_UNSUPPORTED_TYPE", "java.net.HttpURLConnection", true),
              })
          .put(
              "File",
              new Import[] {
                new Import("File", "java.io", false),
              })
          .put(
              "withThreadPool",
              new Import[] {
                new Import("withThreadPool", "java.nio.channels.AsynchronousChannelGroup", true),
              })
          .put(
              "magenta",
              new Import[] {
                new Import("magenta", "java.awt.Color", true),
              })
          .put(
              "FLOAT",
              new Import[] {
                new Import("FLOAT", "javax.swing.text.html.CSS.Attribute", true),
                new Import("FLOAT", "javax.management.openmbean.SimpleType", true),
                new Import("FLOAT", "java.sql.Types", true),
              })
          .put(
              "XmlAttribute",
              new Import[] {
                new Import("XmlAttribute", "javax.xml.bind.annotation", false),
              })
          .put(
              "BasicDesktopPaneUI",
              new Import[] {
                new Import("BasicDesktopPaneUI", "javax.swing.plaf.basic", false),
              })
          .put(
              "ISO_INSTANT",
              new Import[] {
                new Import("ISO_INSTANT", "java.time.format.DateTimeFormatter", true),
              })
          .put(
              "CONTROL_TEXT",
              new Import[] {
                new Import("CONTROL_TEXT", "java.awt.SystemColor", true),
              })
          .put(
              "READ_ONLY",
              new Import[] {
                new Import("READ_ONLY", "java.nio.channels.FileChannel.MapMode", true),
              })
          .put(
              "parallelSort",
              new Import[] {
                new Import("parallelSort", "java.util.Arrays", true),
              })
          .put(
              "RATA_DIE",
              new Import[] {
                new Import("RATA_DIE", "java.time.temporal.JulianFields", true),
              })
          .put(
              "GroupLayout",
              new Import[] {
                new Import("GroupLayout", "javax.swing", false),
              })
          .put(
              "InputMethodListener",
              new Import[] {
                new Import("InputMethodListener", "java.awt.event", false),
              })
          .put(
              "StrokeBorder",
              new Import[] {
                new Import("StrokeBorder", "javax.swing.border", false),
              })
          .put(
              "LEAD_NONE",
              new Import[] {
                new Import("LEAD_NONE", "javax.swing.text.TabStop", true),
              })
          .put(
              "Synthesizer",
              new Import[] {
                new Import("Synthesizer", "javax.sound.midi", false),
              })
          .put(
              "icHdrModel",
              new Import[] {
                new Import("icHdrModel", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "FONT_SIZE",
              new Import[] {
                new Import("FONT_SIZE", "javax.swing.text.html.CSS.Attribute", true),
              })
          .put(
              "AUTO_RESIZE_OFF",
              new Import[] {
                new Import("AUTO_RESIZE_OFF", "javax.swing.JTable", true),
              })
          .put(
              "icSaturation",
              new Import[] {
                new Import("icSaturation", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "MetalButtonUI",
              new Import[] {
                new Import("MetalButtonUI", "javax.swing.plaf.metal", false),
              })
          .put(
              "MOUSE_MOVE",
              new Import[] {
                new Import("MOUSE_MOVE", "java.awt.Event", true),
              })
          .put(
              "POPUP_MENU",
              new Import[] {
                new Import("POPUP_MENU", "javax.accessibility.AccessibleRole", true),
                new Import("POPUP_MENU", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "dayOfWeekInMonth",
              new Import[] {
                new Import("dayOfWeekInMonth", "java.time.temporal.TemporalAdjusters", true),
              })
          .put(
              "SERVER_AUTH",
              new Import[] {
                new Import("SERVER_AUTH", "javax.security.sasl.Sasl", true),
              })
          .put(
              "ValidationEventLocatorImpl",
              new Import[] {
                new Import("ValidationEventLocatorImpl", "javax.xml.bind.helpers", false),
              })
          .put(
              "MEDIA_LOW",
              new Import[] {
                new Import("MEDIA_LOW", "javax.print.attribute.standard.PrinterStateReason", true),
              })
          .put(
              "ROUND_HALF_EVEN",
              new Import[] {
                new Import("ROUND_HALF_EVEN", "java.math.BigDecimal", true),
              })
          .put(
              "SECOND",
              new Import[] {
                new Import("SECOND", "java.util.Calendar", true),
                new Import("SECOND", "java.text.DateFormat.Field", true),
              })
          .put(
              "BasicTextPaneUI",
              new Import[] {
                new Import("BasicTextPaneUI", "javax.swing.plaf.basic", false),
              })
          .put(
              "SynthLabelUI",
              new Import[] {
                new Import("SynthLabelUI", "javax.swing.plaf.synth", false),
              })
          .put(
              "FileDialog",
              new Import[] {
                new Import("FileDialog", "java.awt", false),
              })
          .put(
              "APPROVE_SELECTION",
              new Import[] {
                new Import("APPROVE_SELECTION", "javax.swing.JFileChooser", true),
              })
          .put(
              "ContainerOrderFocusTraversalPolicy",
              new Import[] {
                new Import("ContainerOrderFocusTraversalPolicy", "java.awt", false),
              })
          .put(
              "USE_SERVANT_MANAGER",
              new Import[] {
                new Import(
                    "USE_SERVANT_MANAGER",
                    "org.omg.PortableServer.RequestProcessingPolicyValue",
                    true),
              })
          .put(
              "ScheduledThreadPoolExecutor",
              new Import[] {
                new Import("ScheduledThreadPoolExecutor", "java.util.concurrent", false),
              })
          .put(
              "BeanInfo",
              new Import[] {
                new Import("BeanInfo", "java.beans", false),
              })
          .put(
              "InitParam",
              new Import[] {
                new Import("InitParam", "javax.jws.soap", false),
              })
          .put(
              "rint",
              new Import[] {
                new Import("rint", "java.lang.Math", true),
                new Import("rint", "java.lang.StrictMath", true),
              })
          .put(
              "FloatHolder",
              new Import[] {
                new Import("FloatHolder", "org.omg.CORBA", false),
              })
          .put(
              "GROUP_BOX",
              new Import[] {
                new Import("GROUP_BOX", "javax.accessibility.AccessibleRole", true),
              })
          .put(
              "verifyAttributeValue",
              new Import[] {
                new Import(
                    "verifyAttributeValue", "javax.print.attribute.AttributeSetUtilities", true),
              })
          .put(
              "createDashedBorder",
              new Import[] {
                new Import("createDashedBorder", "javax.swing.BorderFactory", true),
              })
          .put(
              "MULTIPLE_INTERVAL_SELECTION",
              new Import[] {
                new Import("MULTIPLE_INTERVAL_SELECTION", "javax.swing.ListSelectionModel", true),
              })
          .put(
              "SE_RESIZE_CURSOR",
              new Import[] {
                new Import("SE_RESIZE_CURSOR", "java.awt.Cursor", true),
                new Import("SE_RESIZE_CURSOR", "java.awt.Frame", true),
              })
          .put(
              "TAG_AVAR",
              new Import[] {
                new Import("TAG_AVAR", "java.awt.font.OpenType", true),
              })
          .put(
              "getMediaSizeForName",
              new Import[] {
                new Import("getMediaSizeForName", "javax.print.attribute.standard.MediaSize", true),
              })
          .put(
              "Endpoint",
              new Import[] {
                new Import("Endpoint", "javax.xml.ws", false),
              })
          .put(
              "POAManager",
              new Import[] {
                new Import("POAManager", "org.omg.PortableServer", false),
              })
          .put(
              "ThreadLocal",
              new Import[] {
                new Import("ThreadLocal", "java.lang", false),
              })
          .put(
              "deepHashCode",
              new Import[] {
                new Import("deepHashCode", "java.util.Arrays", true),
              })
          .put(
              "RunnableFuture",
              new Import[] {
                new Import("RunnableFuture", "java.util.concurrent", false),
              })
          .put(
              "disableSwingFocusManager",
              new Import[] {
                new Import("disableSwingFocusManager", "javax.swing.FocusManager", true),
              })
          .put(
              "JMXConnectionNotification",
              new Import[] {
                new Import("JMXConnectionNotification", "javax.management.remote", false),
              })
          .put(
              "tk_double",
              new Import[] {
                new Import("tk_double", "org.omg.CORBA.TCKind", true),
              })
          .put(
              "MOUSE_EXIT",
              new Import[] {
                new Import("MOUSE_EXIT", "java.awt.Event", true),
              })
          .put(
              "IdAssignmentPolicyOperations",
              new Import[] {
                new Import("IdAssignmentPolicyOperations", "org.omg.PortableServer", false),
              })
          .put(
              "IS_REPLACING_ENTITY_REFERENCES",
              new Import[] {
                new Import(
                    "IS_REPLACING_ENTITY_REFERENCES", "javax.xml.stream.XMLInputFactory", true),
              })
          .put(
              "MINUTE_FIELD",
              new Import[] {
                new Import("MINUTE_FIELD", "java.text.DateFormat", true),
              })
          .put(
              "Instant",
              new Import[] {
                new Import("Instant", "java.time", false),
              })
          .put(
              "windowForComponent",
              new Import[] {
                new Import("windowForComponent", "javax.swing.SwingUtilities", true),
              })
          .put(
              "WritableByteChannel",
              new Import[] {
                new Import("WritableByteChannel", "java.nio.channels", false),
              })
          .put(
              "JapaneseChronology",
              new Import[] {
                new Import("JapaneseChronology", "java.time.chrono", false),
              })
          .put(
              "VERTICAL_SCROLLBAR",
              new Import[] {
                new Import("VERTICAL_SCROLLBAR", "javax.swing.ScrollPaneConstants", true),
              })
          .put(
              "MIN",
              new Import[] {
                new Import("MIN", "java.time.Instant", true),
                new Import("MIN", "java.time.LocalDateTime", true),
                new Import("MIN", "java.time.OffsetDateTime", true),
                new Import("MIN", "java.time.LocalTime", true),
                new Import("MIN", "java.time.ZoneOffset", true),
                new Import("MIN", "java.time.LocalDate", true),
                new Import("MIN", "java.time.OffsetTime", true),
              })
          .put(
              "UNICODE_CASE",
              new Import[] {
                new Import("UNICODE_CASE", "java.util.regex.Pattern", true),
              })
          .put(
              "addExact",
              new Import[] {
                new Import("addExact", "java.lang.Math", true),
                new Import("addExact", "java.lang.StrictMath", true),
              })
          .put(
              "OVERFLOW",
              new Import[] {
                new Import("OVERFLOW", "java.nio.file.StandardWatchEventKinds", true),
                new Import("OVERFLOW", "java.nio.charset.CoderResult", true),
              })
          .put(
              "SNIHostName",
              new Import[] {
                new Import("SNIHostName", "javax.net.ssl", false),
              })
          .put(
              "IS_ICON_PROPERTY",
              new Import[] {
                new Import("IS_ICON_PROPERTY", "javax.swing.JInternalFrame", true),
              })
          .put(
              "PHONETIC_EXTENSIONS_SUPPLEMENT",
              new Import[] {
                new Import(
                    "PHONETIC_EXTENSIONS_SUPPLEMENT", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "DATASOURCE_DB_LOCK",
              new Import[] {
                new Import("DATASOURCE_DB_LOCK", "javax.sql.rowset.spi.SyncProvider", true),
              })
          .put(
              "CSS.Attribute",
              new Import[] {
                new Import("CSS.Attribute", "javax.swing.text.html", false),
              })
          .put(
              "BevelBorder",
              new Import[] {
                new Import("BevelBorder", "javax.swing.border", false),
              })
          .put(
              "COMPONENT_HIDDEN",
              new Import[] {
                new Import("COMPONENT_HIDDEN", "java.awt.event.ComponentEvent", true),
              })
          .put(
              "VK_CAPS_LOCK",
              new Import[] {
                new Import("VK_CAPS_LOCK", "java.awt.event.KeyEvent", true),
              })
          .put(
              "SynthCheckBoxUI",
              new Import[] {
                new Import("SynthCheckBoxUI", "javax.swing.plaf.synth", false),
              })
          .put(
              "LinkedTransferQueue",
              new Import[] {
                new Import("LinkedTransferQueue", "java.util.concurrent", false),
              })
          .put(
              "DefaultTableCellRenderer",
              new Import[] {
                new Import("DefaultTableCellRenderer", "javax.swing.table", false),
              })
          .put(
              "INVOCATION_LAST",
              new Import[] {
                new Import("INVOCATION_LAST", "java.awt.event.InvocationEvent", true),
              })
          .put(
              "DISCARDING",
              new Import[] {
                new Import("DISCARDING", "org.omg.PortableInterceptor", false),
                new Import("DISCARDING", "org.omg.PortableServer.POAManagerPackage.State", true),
              })
          .put(
              "INTERNAL_FRAME",
              new Import[] {
                new Import("INTERNAL_FRAME", "javax.accessibility.AccessibleRole", true),
                new Import("INTERNAL_FRAME", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "setSystem",
              new Import[] {
                new Import("setSystem", "java.rmi.activation.ActivationGroup", true),
              })
          .put(
              "typesIn",
              new Import[] {
                new Import("typesIn", "javax.lang.model.util.ElementFilter", true),
              })
          .put(
              "UNICODE_LOCALE_EXTENSION",
              new Import[] {
                new Import("UNICODE_LOCALE_EXTENSION", "java.util.Locale", true),
              })
          .put(
              "CoderMalfunctionError",
              new Import[] {
                new Import("CoderMalfunctionError", "java.nio.charset", false),
              })
          .put(
              "activeCount",
              new Import[] {
                new Import("activeCount", "java.lang.Thread", true),
              })
          .put(
              "_COMPLETED_NO",
              new Import[] {
                new Import("_COMPLETED_NO", "org.omg.CORBA.CompletionStatus", true),
              })
          .put(
              "InvalidMidiDataException",
              new Import[] {
                new Import("InvalidMidiDataException", "javax.sound.midi", false),
              })
          .put(
              "SUPPLEMENTARY_PRIVATE_USE_AREA_B",
              new Import[] {
                new Import(
                    "SUPPLEMENTARY_PRIVATE_USE_AREA_B", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "FLAG_HAS_POSITION_ADJUSTMENTS",
              new Import[] {
                new Import("FLAG_HAS_POSITION_ADJUSTMENTS", "java.awt.font.GlyphVector", true),
              })
          .put(
              "MIN_SCROLL",
              new Import[] {
                new Import("MIN_SCROLL", "javax.swing.plaf.basic.BasicSliderUI", true),
              })
          .put(
              "SerialDatalink",
              new Import[] {
                new Import("SerialDatalink", "javax.sql.rowset.serial", false),
              })
          .put(
              "LocalObject",
              new Import[] {
                new Import("LocalObject", "org.omg.CORBA", false),
              })
          .put(
              "SUPPLEMENTARY_PRIVATE_USE_AREA_A",
              new Import[] {
                new Import(
                    "SUPPLEMENTARY_PRIVATE_USE_AREA_A", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "ISO_OFFSET_DATE_TIME",
              new Import[] {
                new Import("ISO_OFFSET_DATE_TIME", "java.time.format.DateTimeFormatter", true),
              })
          .put(
              "nextDouble",
              new Import[] {
                new Import("nextDouble", "java.text.ChoiceFormat", true),
              })
          .put(
              "previousWordAction",
              new Import[] {
                new Import("previousWordAction", "javax.swing.text.DefaultEditorKit", true),
              })
          .put(
              "TRUNCATED",
              new Import[] {
                new Import("TRUNCATED", "javax.accessibility.AccessibleState", true),
              })
          .put(
              "SectionElementName",
              new Import[] {
                new Import("SectionElementName", "javax.swing.text.AbstractDocument", true),
              })
          .put(
              "TRANSACTION_READ_UNCOMMITTED",
              new Import[] {
                new Import("TRANSACTION_READ_UNCOMMITTED", "java.sql.Connection", true),
              })
          .put(
              "Cipher",
              new Import[] {
                new Import("Cipher", "javax.crypto", false),
              })
          .put(
              "BAD_OPERATION",
              new Import[] {
                new Import("BAD_OPERATION", "org.omg.CORBA", false),
              })
          .put(
              "UndoableEditSupport",
              new Import[] {
                new Import("UndoableEditSupport", "javax.swing.undo", false),
              })
          .put(
              "WARNING_DIALOG",
              new Import[] {
                new Import("WARNING_DIALOG", "javax.swing.JRootPane", true),
              })
          .put(
              "ClassFormatError",
              new Import[] {
                new Import("ClassFormatError", "java.lang", false),
              })
          .put(
              "TRADITIONAL_HANZI",
              new Import[] {
                new Import("TRADITIONAL_HANZI", "java.awt.im.InputSubset", true),
              })
          .put(
              "lookupAny",
              new Import[] {
                new Import("lookupAny", "java.io.ObjectStreamClass", true),
              })
          .put(
              "ROLLOVER_ENABLED_CHANGED_PROPERTY",
              new Import[] {
                new Import("ROLLOVER_ENABLED_CHANGED_PROPERTY", "javax.swing.AbstractButton", true),
              })
          .put(
              "OpenMBeanInfoSupport",
              new Import[] {
                new Import("OpenMBeanInfoSupport", "javax.management.openmbean", false),
              })
          .put(
              "getTargetFormats",
              new Import[] {
                new Import("getTargetFormats", "javax.sound.sampled.AudioSystem", true),
              })
          .put(
              "NARROW_STANDALONE",
              new Import[] {
                new Import("NARROW_STANDALONE", "java.util.Calendar", true),
              })
          .put(
              "SynthStyle",
              new Import[] {
                new Import("SynthStyle", "javax.swing.plaf.synth", false),
              })
          .put(
              "showInputDialog",
              new Import[] {
                new Import("showInputDialog", "javax.swing.JOptionPane", true),
              })
          .put(
              "SSLContextSpi",
              new Import[] {
                new Import("SSLContextSpi", "javax.net.ssl", false),
              })
          .put(
              "URI_SOAP_1_2_ROLE_NONE",
              new Import[] {
                new Import("URI_SOAP_1_2_ROLE_NONE", "javax.xml.soap.SOAPConstants", true),
              })
          .put(
              "UndeclaredThrowableException",
              new Import[] {
                new Import("UndeclaredThrowableException", "java.lang.reflect", false),
              })
          .put(
              "StreamHandler",
              new Import[] {
                new Import("StreamHandler", "java.util.logging", false),
              })
          .put(
              "BasicScrollBarUI",
              new Import[] {
                new Import("BasicScrollBarUI", "javax.swing.plaf.basic", false),
              })
          .put(
              "defaultForkJoinWorkerThreadFactory",
              new Import[] {
                new Import(
                    "defaultForkJoinWorkerThreadFactory",
                    "java.util.concurrent.ForkJoinPool",
                    true),
              })
          .put(
              "Guard",
              new Import[] {
                new Import("Guard", "java.security", false),
              })
          .put(
              "icHdrDeviceClass",
              new Import[] {
                new Import("icHdrDeviceClass", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "ClassNotFoundException",
              new Import[] {
                new Import("ClassNotFoundException", "java.lang", false),
              })
          .put(
              "AccountLockedException",
              new Import[] {
                new Import("AccountLockedException", "javax.security.auth.login", false),
              })
          .put(
              "newMBeanProxy",
              new Import[] {
                new Import("newMBeanProxy", "javax.management.JMX", true),
              })
          .put(
              "ServerSocketFactory",
              new Import[] {
                new Import("ServerSocketFactory", "javax.net", false),
              })
          .put(
              "icCurveData",
              new Import[] {
                new Import("icCurveData", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "TRAILING",
              new Import[] {
                new Import("TRAILING", "java.awt.FlowLayout", true),
                new Import("TRAILING", "javax.swing.SwingConstants", true),
                new Import("TRAILING", "javax.swing.border.TitledBorder", true),
              })
          .put(
              "XMLEventAllocator",
              new Import[] {
                new Import("XMLEventAllocator", "javax.xml.stream.util", false),
              })
          .put(
              "MLet",
              new Import[] {
                new Import("MLet", "javax.management.loading", false),
              })
          .put(
              "InvalidTargetObjectTypeException",
              new Import[] {
                new Import(
                    "InvalidTargetObjectTypeException", "javax.management.modelmbean", false),
              })
          .put(
              "PrimitiveIterator.OfDouble",
              new Import[] {
                new Import("PrimitiveIterator.OfDouble", "java.util", false),
              })
          .put(
              "PAINT_FIRST",
              new Import[] {
                new Import("PAINT_FIRST", "java.awt.event.PaintEvent", true),
              })
          .put(
              "EndpointReference",
              new Import[] {
                new Import("EndpointReference", "javax.xml.ws", false),
              })
          .put(
              "CyclicBarrier",
              new Import[] {
                new Import("CyclicBarrier", "java.util.concurrent", false),
              })
          .put(
              "StateEditable",
              new Import[] {
                new Import("StateEditable", "javax.swing.undo", false),
              })
          .put(
              "type2name",
              new Import[] {
                new Import("type2name", "javax.swing.text.html.parser.AttributeList", true),
              })
          .put(
              "VK_INVERTED_EXCLAMATION_MARK",
              new Import[] {
                new Import("VK_INVERTED_EXCLAMATION_MARK", "java.awt.event.KeyEvent", true),
              })
          .put(
              "JTable",
              new Import[] {
                new Import("JTable", "javax.swing", false),
              })
          .put(
              "GSSContext",
              new Import[] {
                new Import("GSSContext", "org.ietf.jgss", false),
              })
          .put(
              "setSubscript",
              new Import[] {
                new Import("setSubscript", "javax.swing.text.StyleConstants", true),
              })
          .put(
              "PreDestroy",
              new Import[] {
                new Import("PreDestroy", "javax.annotation", false),
              })
          .put(
              "TYPE_MASK_SCALE",
              new Import[] {
                new Import("TYPE_MASK_SCALE", "java.awt.geom.AffineTransform", true),
              })
          .put(
              "PERSIST_STORE",
              new Import[] {
                new Import("PERSIST_STORE", "org.omg.CORBA", false),
              })
          .put(
              "VALUE_LIST",
              new Import[] {
                new Import("VALUE_LIST", "javax.imageio.metadata.IIOMetadataFormat", true),
              })
          .put(
              "NotFoundHelper",
              new Import[] {
                new Import("NotFoundHelper", "org.omg.CosNaming.NamingContextPackage", false),
              })
          .put(
              "IMG_ALIGN_TOP",
              new Import[] {
                new Import("IMG_ALIGN_TOP", "javax.swing.text.html.HTMLEditorKit", true),
              })
          .put(
              "IIOInvalidTreeException",
              new Import[] {
                new Import("IIOInvalidTreeException", "javax.imageio.metadata", false),
              })
          .put(
              "VERIFY",
              new Import[] {
                new Import("VERIFY", "javax.xml.crypto.KeySelector.Purpose", true),
              })
          .put(
              "HTTP_BINDING",
              new Import[] {
                new Import("HTTP_BINDING", "javax.xml.ws.http.HTTPBinding", true),
              })
          .put(
              "Provider.Service",
              new Import[] {
                new Import("Provider.Service", "java.security", false),
              })
          .put(
              "MemoryHandler",
              new Import[] {
                new Import("MemoryHandler", "java.util.logging", false),
              })
          .put(
              "UNSPECIFIED_OPTION",
              new Import[] {
                new Import(
                    "UNSPECIFIED_OPTION",
                    "javax.security.auth.callback.ConfirmationCallback",
                    true),
              })
          .put(
              "SrcIn",
              new Import[] {
                new Import("SrcIn", "java.awt.AlphaComposite", true),
              })
          .put(
              "guessContentTypeFromStream",
              new Import[] {
                new Import("guessContentTypeFromStream", "java.net.URLConnection", true),
              })
          .put(
              "DISPLAY",
              new Import[] {
                new Import("DISPLAY", "javax.swing.text.html.CSS.Attribute", true),
              })
          .put(
              "not",
              new Import[] {
                new Import("not", "javax.management.Query", true),
              })
          .put(
              "EDGE_STITCH",
              new Import[] {
                new Import("EDGE_STITCH", "javax.print.attribute.standard.Finishings", true),
              })
          .put(
              "attributeNullableUnknown",
              new Import[] {
                new Import("attributeNullableUnknown", "java.sql.DatabaseMetaData", true),
              })
          .put(
              "functionColumnInOut",
              new Import[] {
                new Import("functionColumnInOut", "java.sql.DatabaseMetaData", true),
              })
          .put(
              "now",
              new Import[] {
                new Import("now", "java.time.Instant", true),
                new Import("now", "java.time.chrono.HijrahDate", true),
                new Import("now", "java.time.LocalDateTime", true),
                new Import("now", "java.time.OffsetDateTime", true),
                new Import("now", "java.time.chrono.MinguoDate", true),
                new Import("now", "java.time.chrono.JapaneseDate", true),
                new Import("now", "java.time.LocalTime", true),
                new Import("now", "java.time.MonthDay", true),
                new Import("now", "java.time.YearMonth", true),
                new Import("now", "java.time.LocalDate", true),
                new Import("now", "java.time.OffsetTime", true),
                new Import("now", "java.time.ZonedDateTime", true),
                new Import("now", "java.time.Year", true),
                new Import("now", "java.time.chrono.ThaiBuddhistDate", true),
              })
          .put(
              "BufferedOutputStream",
              new Import[] {
                new Import("BufferedOutputStream", "java.io", false),
              })
          .put(
              "BindingHelper",
              new Import[] {
                new Import("BindingHelper", "org.omg.CosNaming", false),
              })
          .put(
              "CONNECTING_TO_DEVICE",
              new Import[] {
                new Import(
                    "CONNECTING_TO_DEVICE",
                    "javax.print.attribute.standard.PrinterStateReason",
                    true),
              })
          .put(
              "LAYERED_PANE_PROPERTY",
              new Import[] {
                new Import("LAYERED_PANE_PROPERTY", "javax.swing.JInternalFrame", true),
              })
          .put(
              "NameNotFoundException",
              new Import[] {
                new Import("NameNotFoundException", "javax.naming", false),
              })
          .put(
              "RETAIN",
              new Import[] {
                new Import("RETAIN", "org.omg.PortableServer.ServantRetentionPolicyValue", true),
              })
          .put(
              "DAY_OF_WEEK_IN_MONTH_FIELD",
              new Import[] {
                new Import("DAY_OF_WEEK_IN_MONTH_FIELD", "java.text.DateFormat", true),
              })
          .put(
              "InputStream",
              new Import[] {
                new Import("InputStream", "java.io", false),
                new Import("InputStream", "org.omg.CORBA.portable", false),
                new Import("InputStream", "org.omg.CORBA_2_3.portable", false),
              })
          .put(
              "Activatable",
              new Import[] {
                new Import("Activatable", "java.rmi.activation", false),
              })
          .put(
              "ENV_7X9",
              new Import[] {
                new Import("ENV_7X9", "java.awt.PageAttributes.MediaType", true),
              })
          .put(
              "WEEK_OF_WEEK_BASED_YEAR",
              new Import[] {
                new Import("WEEK_OF_WEEK_BASED_YEAR", "java.time.temporal.IsoFields", true),
              })
          .put(
              "UNSUPPORTED_POLICY",
              new Import[] {
                new Import("UNSUPPORTED_POLICY", "org.omg.CORBA", false),
              })
          .put(
              "_dk_Enum",
              new Import[] {
                new Import("_dk_Enum", "org.omg.CORBA.DefinitionKind", true),
              })
          .put(
              "LSProgressEvent",
              new Import[] {
                new Import("LSProgressEvent", "org.w3c.dom.ls", false),
              })
          .put(
              "TextLayout",
              new Import[] {
                new Import("TextLayout", "java.awt.font", false),
              })
          .put(
              "StartElement",
              new Import[] {
                new Import("StartElement", "javax.xml.stream.events", false),
              })
          .put(
              "REUSE",
              new Import[] {
                new Import("REUSE", "javax.security.sasl.Sasl", true),
              })
          .put(
              "TransformAttribute",
              new Import[] {
                new Import("TransformAttribute", "java.awt.font", false),
              })
          .put(
              "ISO_OFFSET_DATE",
              new Import[] {
                new Import("ISO_OFFSET_DATE", "java.time.format.DateTimeFormatter", true),
              })
          .put(
              "PrinterMoreInfo",
              new Import[] {
                new Import("PrinterMoreInfo", "javax.print.attribute.standard", false),
              })
          .put(
              "IndexedPropertyChangeEvent",
              new Import[] {
                new Import("IndexedPropertyChangeEvent", "java.beans", false),
              })
          .put(
              "genericMethodType",
              new Import[] {
                new Import("genericMethodType", "java.lang.invoke.MethodType", true),
              })
          .put(
              "UNDERLINE_LOW_TWO_PIXEL",
              new Import[] {
                new Import("UNDERLINE_LOW_TWO_PIXEL", "java.awt.font.TextAttribute", true),
              })
          .put(
              "JMXProviderException",
              new Import[] {
                new Import("JMXProviderException", "javax.management.remote", false),
              })
          .put(
              "LineBorder",
              new Import[] {
                new Import("LineBorder", "javax.swing.border", false),
              })
          .put(
              "ChronoZonedDateTime",
              new Import[] {
                new Import("ChronoZonedDateTime", "java.time.chrono", false),
              })
          .put(
              "PrintConversionEventImpl",
              new Import[] {
                new Import("PrintConversionEventImpl", "javax.xml.bind.helpers", false),
              })
          .put(
              "PageAttributes.OriginType",
              new Import[] {
                new Import("PageAttributes.OriginType", "java.awt", false),
              })
          .put(
              "NO_GENERATED_KEYS",
              new Import[] {
                new Import("NO_GENERATED_KEYS", "java.sql.Statement", true),
              })
          .put(
              "WIDTH_SEMI_EXTENDED",
              new Import[] {
                new Import("WIDTH_SEMI_EXTENDED", "java.awt.font.TextAttribute", true),
              })
          .put(
              "ACCEPT_ONLY",
              new Import[] {
                new Import("ACCEPT_ONLY", "org.ietf.jgss.GSSCredential", true),
              })
          .put(
              "CHOOSER_PANELS_PROPERTY",
              new Import[] {
                new Import("CHOOSER_PANELS_PROPERTY", "javax.swing.JColorChooser", true),
              })
          .put(
              "ISO_C2_ENVELOPE",
              new Import[] {
                new Import("ISO_C2_ENVELOPE", "java.awt.PageAttributes.MediaType", true),
              })
          .put(
              "WEEK_OF_YEAR",
              new Import[] {
                new Import("WEEK_OF_YEAR", "java.util.Calendar", true),
                new Import("WEEK_OF_YEAR", "java.text.DateFormat.Field", true),
              })
          .put(
              "DigestMethodParameterSpec",
              new Import[] {
                new Import("DigestMethodParameterSpec", "javax.xml.crypto.dsig.spec", false),
              })
          .put(
              "MBeanServerDelegateMBean",
              new Import[] {
                new Import("MBeanServerDelegateMBean", "javax.management", false),
              })
          .put(
              "IndexedPropertyDescriptor",
              new Import[] {
                new Import("IndexedPropertyDescriptor", "java.beans", false),
              })
          .put(
              "LabelUI",
              new Import[] {
                new Import("LabelUI", "javax.swing.plaf", false),
              })
          .put(
              "BasicFileAttributes",
              new Import[] {
                new Import("BasicFileAttributes", "java.nio.file.attribute", false),
              })
          .put(
              "getMouseModifiersText",
              new Import[] {
                new Import("getMouseModifiersText", "java.awt.event.MouseEvent", true),
              })
          .put(
              "ADD_SUBDIRECTORY",
              new Import[] {
                new Import("ADD_SUBDIRECTORY", "java.nio.file.attribute.AclEntryPermission", true),
              })
          .put(
              "InvalidAddressHelper",
              new Import[] {
                new Import(
                    "InvalidAddressHelper", "org.omg.CosNaming.NamingContextExtPackage", false),
              })
          .put(
              "CertPathValidatorException.Reason",
              new Import[] {
                new Import("CertPathValidatorException.Reason", "java.security.cert", false),
              })
          .put(
              "isDefaultLookAndFeelDecorated",
              new Import[] {
                new Import("isDefaultLookAndFeelDecorated", "javax.swing.JDialog", true),
                new Import("isDefaultLookAndFeelDecorated", "javax.swing.JFrame", true),
              })
          .put(
              "LookupOp",
              new Import[] {
                new Import("LookupOp", "java.awt.image", false),
              })
          .put(
              "BeanContext",
              new Import[] {
                new Import("BeanContext", "java.beans.beancontext", false),
              })
          .put(
              "PUBLIC",
              new Import[] {
                new Import("PUBLIC", "java.lang.reflect.Member", true),
                new Import("PUBLIC", "javax.swing.text.html.parser.DTDConstants", true),
                new Import("PUBLIC", "java.lang.reflect.Modifier", true),
                new Import("PUBLIC", "java.lang.invoke.MethodHandles.Lookup", true),
              })
          .put(
              "COMMON",
              new Import[] {
                new Import("COMMON", "javax.print.attribute.standard.DialogTypeSelection", true),
                new Import("COMMON", "java.awt.JobAttributes.DialogType", true),
              })
          .put(
              "DEFAULT_CURSOR",
              new Import[] {
                new Import("DEFAULT_CURSOR", "java.awt.Cursor", true),
                new Import("DEFAULT_CURSOR", "java.awt.Frame", true),
              })
          .put(
              "MultipleDocumentHandling",
              new Import[] {
                new Import("MultipleDocumentHandling", "javax.print.attribute.standard", false),
              })
          .put(
              "DOMImplementationList",
              new Import[] {
                new Import("DOMImplementationList", "org.w3c.dom", false),
              })
          .put(
              "LongSupplier",
              new Import[] {
                new Import("LongSupplier", "java.util.function", false),
              })
          .put(
              "KeyValue",
              new Import[] {
                new Import("KeyValue", "javax.xml.crypto.dsig.keyinfo", false),
              })
          .put(
              "parallelPrefix",
              new Import[] {
                new Import("parallelPrefix", "java.util.Arrays", true),
              })
          .put(
              "INPUT_METHOD_EVENT_MASK",
              new Import[] {
                new Import("INPUT_METHOD_EVENT_MASK", "java.awt.AWTEvent", true),
              })
          .put(
              "CompositeDataInvocationHandler",
              new Import[] {
                new Import("CompositeDataInvocationHandler", "javax.management.openmbean", false),
              })
          .put(
              "RSAKeyGenParameterSpec",
              new Import[] {
                new Import("RSAKeyGenParameterSpec", "java.security.spec", false),
              })
          .put(
              "CertPathParameters",
              new Import[] {
                new Import("CertPathParameters", "java.security.cert", false),
              })
          .put(
              "getPreviousWord",
              new Import[] {
                new Import("getPreviousWord", "javax.swing.text.Utilities", true),
              })
          .put(
              "SCALE_REPLICATE",
              new Import[] {
                new Import("SCALE_REPLICATE", "java.awt.Image", true),
              })
          .put(
              "getPreviewPanel",
              new Import[] {
                new Import(
                    "getPreviewPanel",
                    "javax.swing.colorchooser.ColorChooserComponentFactory",
                    true),
              })
          .put(
              "MetalRadioButtonUI",
              new Import[] {
                new Import("MetalRadioButtonUI", "javax.swing.plaf.metal", false),
              })
          .put(
              "WebServiceFeatureAnnotation",
              new Import[] {
                new Import("WebServiceFeatureAnnotation", "javax.xml.ws.spi", false),
              })
          .put(
              "StringSeqHelper",
              new Import[] {
                new Import("StringSeqHelper", "org.omg.CORBA", false),
              })
          .put(
              "ContextualRenderedImageFactory",
              new Import[] {
                new Import("ContextualRenderedImageFactory", "java.awt.image.renderable", false),
              })
          .put(
              "SQLData",
              new Import[] {
                new Import("SQLData", "java.sql", false),
              })
          .put(
              "RowSetWarning",
              new Import[] {
                new Import("RowSetWarning", "javax.sql.rowset", false),
              })
          .put(
              "W3CDomHandler",
              new Import[] {
                new Import("W3CDomHandler", "javax.xml.bind.annotation", false),
              })
          .put(
              "JOB_OUTGOING",
              new Import[] {
                new Import("JOB_OUTGOING", "javax.print.attribute.standard.JobStateReason", true),
              })
          .put(
              "FileVisitor",
              new Import[] {
                new Import("FileVisitor", "java.nio.file", false),
              })
          .put(
              "FLAG_HAS_TRANSFORMS",
              new Import[] {
                new Import("FLAG_HAS_TRANSFORMS", "java.awt.font.GlyphVector", true),
              })
          .put(
              "DOMStringList",
              new Import[] {
                new Import("DOMStringList", "org.w3c.dom", false),
              })
          .put(
              "SocketPermission",
              new Import[] {
                new Import("SocketPermission", "java.net", false),
              })
          .put(
              "convertPointFromScreen",
              new Import[] {
                new Import("convertPointFromScreen", "javax.swing.SwingUtilities", true),
              })
          .put(
              "CallSite",
              new Import[] {
                new Import("CallSite", "java.lang.invoke", false),
              })
          .put(
              "SYSTEM_EXCLUSIVE",
              new Import[] {
                new Import("SYSTEM_EXCLUSIVE", "javax.sound.midi.SysexMessage", true),
              })
          .put(
              "LARGE_MODEL_PROPERTY",
              new Import[] {
                new Import("LARGE_MODEL_PROPERTY", "javax.swing.JTree", true),
              })
          .put(
              "SOAPBinding.Style",
              new Import[] {
                new Import("SOAPBinding.Style", "javax.jws.soap", false),
              })
          .put(
              "decodeDataFlavor",
              new Import[] {
                new Import("decodeDataFlavor", "java.awt.datatransfer.SystemFlavorMap", true),
              })
          .put(
              "nCopies",
              new Import[] {
                new Import("nCopies", "java.util.Collections", true),
              })
          .put(
              "MenuItemUI",
              new Import[] {
                new Import("MenuItemUI", "javax.swing.plaf", false),
              })
          .put(
              "UnmodifiableSetException",
              new Import[] {
                new Import("UnmodifiableSetException", "javax.print.attribute", false),
              })
          .put(
              "ValidationEvent",
              new Import[] {
                new Import("ValidationEvent", "javax.xml.bind", false),
              })
          .put(
              "width",
              new Import[] {
                new Import("width", "javax.swing.Spring", true),
              })
          .put(
              "DSAPrivateKey",
              new Import[] {
                new Import("DSAPrivateKey", "java.security.interfaces", false),
              })
          .put(
              "isSameFile",
              new Import[] {
                new Import("isSameFile", "java.nio.file.Files", true),
              })
          .put(
              "VK_KANA_LOCK",
              new Import[] {
                new Import("VK_KANA_LOCK", "java.awt.event.KeyEvent", true),
              })
          .put(
              "CELL_RENDERER_PROPERTY",
              new Import[] {
                new Import("CELL_RENDERER_PROPERTY", "javax.swing.JTree", true),
                new Import("CELL_RENDERER_PROPERTY", "javax.swing.table.TableColumn", true),
              })
          .put(
              "MIN_PRIORITY",
              new Import[] {
                new Import("MIN_PRIORITY", "java.lang.Thread", true),
              })
          .put(
              "IntUnaryOperator",
              new Import[] {
                new Import("IntUnaryOperator", "java.util.function", false),
              })
          .put(
              "MICROPHONE",
              new Import[] {
                new Import("MICROPHONE", "javax.sound.sampled.Port.Info", true),
              })
          .put(
              "VK_ENTER",
              new Import[] {
                new Import("VK_ENTER", "java.awt.event.KeyEvent", true),
              })
          .put(
              "MAX_RADIX",
              new Import[] {
                new Import("MAX_RADIX", "java.lang.Character", true),
              })
          .put(
              "ServerRequestInterceptorOperations",
              new Import[] {
                new Import(
                    "ServerRequestInterceptorOperations", "org.omg.PortableInterceptor", false),
              })
          .put(
              "Utilities",
              new Import[] {
                new Import("Utilities", "javax.swing.text", false),
              })
          .put(
              "findMBeanServer",
              new Import[] {
                new Import("findMBeanServer", "javax.management.MBeanServerFactory", true),
              })
          .put(
              "URIException",
              new Import[] {
                new Import("URIException", "javax.print", false),
              })
          .put(
              "isSymbolicLink",
              new Import[] {
                new Import("isSymbolicLink", "java.nio.file.Files", true),
              })
          .put(
              "XMLNS_ATTRIBUTE",
              new Import[] {
                new Import("XMLNS_ATTRIBUTE", "javax.xml.XMLConstants", true),
              })
          .put(
              "SecretKeySpec",
              new Import[] {
                new Import("SecretKeySpec", "javax.crypto.spec", false),
              })
          .put(
              "NOTATION_DECLARATION",
              new Import[] {
                new Import("NOTATION_DECLARATION", "javax.xml.stream.XMLStreamConstants", true),
              })
          .put(
              "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS",
              new Import[] {
                new Import(
                    "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS",
                    "java.lang.Character.UnicodeBlock",
                    true),
              })
          .put(
              "setLookAndFeel",
              new Import[] {
                new Import("setLookAndFeel", "javax.swing.UIManager", true),
              })
          .put(
              "UUID",
              new Import[] {
                new Import("UUID", "java.util", false),
              })
          .put(
              "getLogTimers",
              new Import[] {
                new Import("getLogTimers", "javax.swing.Timer", true),
              })
          .put(
              "AbstractRegionPainter.PaintContext.CacheMode",
              new Import[] {
                new Import(
                    "AbstractRegionPainter.PaintContext.CacheMode",
                    "javax.swing.plaf.nimbus",
                    false),
              })
          .put(
              "BUTTON1_DOWN_MASK",
              new Import[] {
                new Import("BUTTON1_DOWN_MASK", "java.awt.event.InputEvent", true),
              })
          .put(
              "getWindowTitleForeground",
              new Import[] {
                new Import(
                    "getWindowTitleForeground", "javax.swing.plaf.metal.MetalLookAndFeel", true),
              })
          .put(
              "RenderingHints.Key",
              new Import[] {
                new Import("RenderingHints.Key", "java.awt", false),
              })
          .put(
              "tk_wchar",
              new Import[] {
                new Import("tk_wchar", "org.omg.CORBA.TCKind", true),
              })
          .put(
              "getPositionBelow",
              new Import[] {
                new Import("getPositionBelow", "javax.swing.text.Utilities", true),
              })
          .put(
              "setErr",
              new Import[] {
                new Import("setErr", "java.lang.System", true),
              })
          .put(
              "ToolTipManager",
              new Import[] {
                new Import("ToolTipManager", "javax.swing", false),
              })
          .put(
              "URIParameter",
              new Import[] {
                new Import("URIParameter", "java.security", false),
              })
          .put(
              "createBandedRaster",
              new Import[] {
                new Import("createBandedRaster", "java.awt.image.Raster", true),
              })
          .put(
              "TEXT_PLAIN_UTF_16",
              new Import[] {
                new Import("TEXT_PLAIN_UTF_16", "javax.print.DocFlavor.URL", true),
                new Import("TEXT_PLAIN_UTF_16", "javax.print.DocFlavor.INPUT_STREAM", true),
                new Import("TEXT_PLAIN_UTF_16", "javax.print.DocFlavor.BYTE_ARRAY", true),
              })
          .put(
              "MetalFileChooserUI",
              new Import[] {
                new Import("MetalFileChooserUI", "javax.swing.plaf.metal", false),
              })
          .put(
              "Spliterators",
              new Import[] {
                new Import("Spliterators", "java.util", false),
              })
          .put(
              "TREE",
              new Import[] {
                new Import("TREE", "javax.accessibility.AccessibleRole", true),
                new Import("TREE", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "NotActiveException",
              new Import[] {
                new Import("NotActiveException", "java.io", false),
              })
          .put(
              "DebugGraphics",
              new Import[] {
                new Import("DebugGraphics", "javax.swing", false),
              })
          .put(
              "TemporalAdjuster",
              new Import[] {
                new Import("TemporalAdjuster", "java.time.temporal", false),
              })
          .put(
              "WatchService",
              new Import[] {
                new Import("WatchService", "java.nio.file", false),
              })
          .put(
              "TEXT_FOREGROUND",
              new Import[] {
                new Import("TEXT_FOREGROUND", "javax.swing.plaf.synth.ColorType", true),
              })
          .put(
              "GREEK_EXTENDED",
              new Import[] {
                new Import("GREEK_EXTENDED", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "ExemptionMechanismSpi",
              new Import[] {
                new Import("ExemptionMechanismSpi", "javax.crypto", false),
              })
          .put(
              "FlowLayout",
              new Import[] {
                new Import("FlowLayout", "java.awt", false),
              })
          .put(
              "FormattableFlags",
              new Import[] {
                new Import("FormattableFlags", "java.util", false),
              })
          .put(
              "JobPrioritySupported",
              new Import[] {
                new Import("JobPrioritySupported", "javax.print.attribute.standard", false),
              })
          .put(
              "icSigBlueColorantTag",
              new Import[] {
                new Import("icSigBlueColorantTag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "INVOKES_STOP_CELL_EDITING_PROPERTY",
              new Import[] {
                new Import("INVOKES_STOP_CELL_EDITING_PROPERTY", "javax.swing.JTree", true),
              })
          .put(
              "ARG_OUT",
              new Import[] {
                new Import("ARG_OUT", "org.omg.CORBA", false),
              })
          .put(
              "COMPLETE",
              new Import[] {
                new Import("COMPLETE", "java.awt.MediaTracker", true),
              })
          .put(
              "XAER_RMERR",
              new Import[] {
                new Import("XAER_RMERR", "javax.transaction.xa.XAException", true),
              })
          .put(
              "TIME_ZONE",
              new Import[] {
                new Import("TIME_ZONE", "java.text.DateFormat.Field", true),
              })
          .put(
              "NODESET",
              new Import[] {
                new Import("NODESET", "javax.xml.xpath.XPathConstants", true),
              })
          .put(
              "CJK_COMPATIBILITY",
              new Import[] {
                new Import("CJK_COMPATIBILITY", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "ClassLoadingMXBean",
              new Import[] {
                new Import("ClassLoadingMXBean", "java.lang.management", false),
              })
          .put(
              "CodecOperations",
              new Import[] {
                new Import("CodecOperations", "org.omg.IOP", false),
              })
          .put(
              "SMPTE_25",
              new Import[] {
                new Import("SMPTE_25", "javax.sound.midi.Sequence", true),
              })
          .put(
              "SMPTE_24",
              new Import[] {
                new Import("SMPTE_24", "javax.sound.midi.Sequence", true),
              })
          .put(
              "RegistryHandler",
              new Import[] {
                new Import("RegistryHandler", "java.rmi.registry", false),
              })
          .put(
              "VK_DEAD_CARON",
              new Import[] {
                new Import("VK_DEAD_CARON", "java.awt.event.KeyEvent", true),
              })
          .put(
              "Oneway",
              new Import[] {
                new Import("Oneway", "javax.jws", false),
              })
          .put(
              "COMMIT",
              new Import[] {
                new Import("COMMIT", "javax.swing.JFormattedTextField", true),
              })
          .put(
              "RMIServer",
              new Import[] {
                new Import("RMIServer", "javax.management.remote.rmi", false),
              })
          .put(
              "SCROLL_LINE_UP",
              new Import[] {
                new Import("SCROLL_LINE_UP", "java.awt.Event", true),
              })
          .put(
              "TYPE_MASK_ROTATION",
              new Import[] {
                new Import("TYPE_MASK_ROTATION", "java.awt.geom.AffineTransform", true),
              })
          .put(
              "ServerSocket",
              new Import[] {
                new Import("ServerSocket", "java.net", false),
              })
          .put(
              "BOX_DRAWING",
              new Import[] {
                new Import("BOX_DRAWING", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "UNDEFINED_CONDITION",
              new Import[] {
                new Import("UNDEFINED_CONDITION", "javax.swing.JComponent", true),
              })
          .put(
              "processKeyBindings",
              new Import[] {
                new Import("processKeyBindings", "javax.swing.SwingUtilities", true),
              })
          .put(
              "readSymbolicLink",
              new Import[] {
                new Import("readSymbolicLink", "java.nio.file.Files", true),
              })
          .put(
              "SMPTE_30",
              new Import[] {
                new Import("SMPTE_30", "javax.sound.midi.Sequence", true),
              })
          .put(
              "emptySortedMap",
              new Import[] {
                new Import("emptySortedMap", "java.util.Collections", true),
              })
          .put(
              "CONTINUOUS_LAYOUT_PROPERTY",
              new Import[] {
                new Import("CONTINUOUS_LAYOUT_PROPERTY", "javax.swing.JSplitPane", true),
              })
          .put(
              "DatagramSocket",
              new Import[] {
                new Import("DatagramSocket", "java.net", false),
              })
          .put(
              "ACTIVATED",
              new Import[] {
                new Import("ACTIVATED", "javax.swing.event.HyperlinkEvent.EventType", true),
              })
          .put(
              "VALUE_TEXT_ANTIALIAS_LCD_HRGB",
              new Import[] {
                new Import("VALUE_TEXT_ANTIALIAS_LCD_HRGB", "java.awt.RenderingHints", true),
              })
          .put(
              "FILE_SELECTION_MODE_CHANGED_PROPERTY",
              new Import[] {
                new Import(
                    "FILE_SELECTION_MODE_CHANGED_PROPERTY", "javax.swing.JFileChooser", true),
              })
          .put(
              "metafactory",
              new Import[] {
                new Import("metafactory", "java.lang.invoke.LambdaMetafactory", true),
              })
          .put(
              "AbstractScriptEngine",
              new Import[] {
                new Import("AbstractScriptEngine", "javax.script", false),
              })
          .put(
              "DEFAULT_JUSTIFICATION",
              new Import[] {
                new Import("DEFAULT_JUSTIFICATION", "javax.swing.border.TitledBorder", true),
              })
          .build();
}
