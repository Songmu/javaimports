// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.parser.Import;
import java.util.Map;

public class Java8StdlibChunk11 {
  static final Map<String, Import[]> CLASSES =
      new ImmutableMap.Builder<String, Import[]>()
          .put(
              "InitialContextFactoryBuilder",
              new Import[] {
                new Import("InitialContextFactoryBuilder", "javax.naming.spi", false),
              })
          .put(
              "PARA_INDENT_LEFT",
              new Import[] {
                new Import("PARA_INDENT_LEFT", "javax.swing.text.html.HTMLEditorKit", true),
              })
          .put(
              "WIDTH_SEMI_CONDENSED",
              new Import[] {
                new Import("WIDTH_SEMI_CONDENSED", "java.awt.font.TextAttribute", true),
              })
          .put(
              "leading",
              new Import[] {
                new Import("leading", "java.awt.font.TextHitInfo", true),
              })
          .put(
              "_dk_Operation",
              new Import[] {
                new Import("_dk_Operation", "org.omg.CORBA.DefinitionKind", true),
              })
          .put(
              "KeySpec",
              new Import[] {
                new Import("KeySpec", "java.security.spec", false),
              })
          .put(
              "COLLATED",
              new Import[] {
                new Import("COLLATED", "javax.print.attribute.standard.SheetCollate", true),
              })
          .put(
              "REFERRAL",
              new Import[] {
                new Import("REFERRAL", "javax.naming.Context", true),
              })
          .put(
              "Clock",
              new Import[] {
                new Import("Clock", "java.time", false),
              })
          .put(
              "OUTPUT_TRAY_MISSING",
              new Import[] {
                new Import(
                    "OUTPUT_TRAY_MISSING",
                    "javax.print.attribute.standard.PrinterStateReason",
                    true),
              })
          .put(
              "ErrorListener",
              new Import[] {
                new Import("ErrorListener", "javax.xml.transform", false),
              })
          .put(
              "ImageReadParam",
              new Import[] {
                new Import("ImageReadParam", "javax.imageio", false),
              })
          .put(
              "Referenceable",
              new Import[] {
                new Import("Referenceable", "javax.naming", false),
              })
          .put(
              "VALUE_PROPERTY",
              new Import[] {
                new Import("VALUE_PROPERTY", "javax.swing.JOptionPane", true),
              })
          .put(
              "getDesktopColor",
              new Import[] {
                new Import("getDesktopColor", "javax.swing.plaf.metal.MetalLookAndFeel", true),
              })
          .put(
              "CheckboxMenuItem",
              new Import[] {
                new Import("CheckboxMenuItem", "java.awt", false),
              })
          .put(
              "BasicToolBarUI",
              new Import[] {
                new Import("BasicToolBarUI", "javax.swing.plaf.basic", false),
              })
          .put(
              "TAMIL",
              new Import[] {
                new Import("TAMIL", "java.awt.font.NumericShaper", true),
                new Import("TAMIL", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "getAvailableCurrencies",
              new Import[] {
                new Import("getAvailableCurrencies", "java.util.Currency", true),
              })
          .put(
              "StringJoiner",
              new Import[] {
                new Import("StringJoiner", "java.util", false),
              })
          .put(
              "Status",
              new Import[] {
                new Import("Status", "javax.net.ssl.SSLEngineResult", false),
              })
          .put(
              "tk_any",
              new Import[] {
                new Import("tk_any", "org.omg.CORBA.TCKind", true),
              })
          .put(
              "HTTP_MOVED_TEMP",
              new Import[] {
                new Import("HTTP_MOVED_TEMP", "java.net.HttpURLConnection", true),
              })
          .put(
              "WINDOW_TEXT",
              new Import[] {
                new Import("WINDOW_TEXT", "java.awt.SystemColor", true),
              })
          .put(
              "RUN_DIRECTION_LTR",
              new Import[] {
                new Import("RUN_DIRECTION_LTR", "java.awt.font.TextAttribute", true),
              })
          .put(
              "getDefaultType",
              new Import[] {
                new Import("getDefaultType", "java.security.KeyStore", true),
                new Import("getDefaultType", "java.security.cert.CertPathBuilder", true),
                new Import("getDefaultType", "java.security.cert.CertPathValidator", true),
                new Import("getDefaultType", "java.security.cert.CertStore", true),
              })
          .put(
              "InterceptorOperations",
              new Import[] {
                new Import("InterceptorOperations", "org.omg.PortableInterceptor", false),
              })
          .put(
              "contains",
              new Import[] {
                new Import("contains", "java.awt.geom.Path2D", true),
              })
          .put(
              "TimeZone",
              new Import[] {
                new Import("TimeZone", "java.util", false),
              })
          .put(
              "SynthRadioButtonMenuItemUI",
              new Import[] {
                new Import("SynthRadioButtonMenuItemUI", "javax.swing.plaf.synth", false),
              })
          .put(
              "TransformParameterSpec",
              new Import[] {
                new Import("TransformParameterSpec", "javax.xml.crypto.dsig.spec", false),
              })
          .put(
              "ENV_9X11",
              new Import[] {
                new Import("ENV_9X11", "java.awt.PageAttributes.MediaType", true),
              })
          .put(
              "icSigAToB1Tag",
              new Import[] {
                new Import("icSigAToB1Tag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "MIDI_TIME_CODE",
              new Import[] {
                new Import("MIDI_TIME_CODE", "javax.sound.midi.ShortMessage", true),
                new Import("MIDI_TIME_CODE", "javax.sound.midi.Sequencer.SyncMode", true),
              })
          .put(
              "ENV_9X12",
              new Import[] {
                new Import("ENV_9X12", "java.awt.PageAttributes.MediaType", true),
              })
          .put(
              "PixelInterleavedSampleModel",
              new Import[] {
                new Import("PixelInterleavedSampleModel", "java.awt.image", false),
              })
          .put(
              "StandardSocketOptions",
              new Import[] {
                new Import("StandardSocketOptions", "java.net", false),
              })
          .put(
              "PBEKeySpec",
              new Import[] {
                new Import("PBEKeySpec", "javax.crypto.spec", false),
              })
          .put(
              "TYPE_TRANSLATION",
              new Import[] {
                new Import("TYPE_TRANSLATION", "java.awt.geom.AffineTransform", true),
              })
          .put(
              "BLUE",
              new Import[] {
                new Import("BLUE", "java.awt.Color", true),
              })
          .put(
              "FormatterClosedException",
              new Import[] {
                new Import("FormatterClosedException", "java.util", false),
              })
          .put(
              "CONTAINER_FIRST",
              new Import[] {
                new Import("CONTAINER_FIRST", "java.awt.event.ContainerEvent", true),
              })
          .put(
              "DAYS",
              new Import[] {
                new Import("DAYS", "javax.xml.datatype.DatatypeConstants", true),
              })
          .put(
              "HEADER",
              new Import[] {
                new Import("HEADER", "javax.accessibility.AccessibleRole", true),
              })
          .put(
              "LOCATION_FORWARD",
              new Import[] {
                new Import("LOCATION_FORWARD", "org.omg.PortableInterceptor", false),
              })
          .put(
              "sleep",
              new Import[] {
                new Import("sleep", "java.lang.Thread", true),
              })
          .put(
              "LoggingPermission",
              new Import[] {
                new Import("LoggingPermission", "java.util.logging", false),
              })
          .put(
              "MONOCHROME",
              new Import[] {
                new Import("MONOCHROME", "java.awt.PageAttributes.ColorType", true),
                new Import("MONOCHROME", "javax.print.attribute.standard.Chromaticity", true),
              })
          .put(
              "COPY_OR_MOVE",
              new Import[] {
                new Import("COPY_OR_MOVE", "javax.swing.TransferHandler", true),
              })
          .put(
              "nanoTime",
              new Import[] {
                new Import("nanoTime", "java.lang.System", true),
              })
          .put(
              "readAllBytes",
              new Import[] {
                new Import("readAllBytes", "java.nio.file.Files", true),
              })
          .put(
              "StringIndexOutOfBoundsException",
              new Import[] {
                new Import("StringIndexOutOfBoundsException", "java.lang", false),
              })
          .put(
              "getAuxiliaryLookAndFeels",
              new Import[] {
                new Import("getAuxiliaryLookAndFeels", "javax.swing.UIManager", true),
              })
          .put(
              "JOIN_ROUND",
              new Import[] {
                new Import("JOIN_ROUND", "java.awt.BasicStroke", true),
              })
          .put(
              "XPath",
              new Import[] {
                new Import("XPath", "javax.xml.xpath", false),
              })
          .put(
              "TableColumnModelEvent",
              new Import[] {
                new Import("TableColumnModelEvent", "javax.swing.event", false),
              })
          .put(
              "ConstructorProperties",
              new Import[] {
                new Import("ConstructorProperties", "java.beans", false),
              })
          .put(
              "newFixedThreadPool",
              new Import[] {
                new Import("newFixedThreadPool", "java.util.concurrent.Executors", true),
              })
          .put(
              "KRB_NT_UNKNOWN",
              new Import[] {
                new Import(
                    "KRB_NT_UNKNOWN", "javax.security.auth.kerberos.KerberosPrincipal", true),
              })
          .put(
              "icSigDeviceSettingsTag",
              new Import[] {
                new Import("icSigDeviceSettingsTag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "ISO_C1_ENVELOPE",
              new Import[] {
                new Import("ISO_C1_ENVELOPE", "java.awt.PageAttributes.MediaType", true),
              })
          .put(
              "doubleToRawLongBits",
              new Import[] {
                new Import("doubleToRawLongBits", "java.lang.Double", true),
              })
          .put(
              "LOOP_CONTINUOUSLY",
              new Import[] {
                new Import("LOOP_CONTINUOUSLY", "javax.sound.midi.Sequencer", true),
                new Import("LOOP_CONTINUOUSLY", "javax.sound.sampled.Clip", true),
              })
          .put(
              "BiFunction",
              new Import[] {
                new Import("BiFunction", "java.util.function", false),
              })
          .put(
              "windowBorder",
              new Import[] {
                new Import("windowBorder", "java.awt.SystemColor", true),
              })
          .put(
              "ISO_C6_ENVELOPE",
              new Import[] {
                new Import("ISO_C6_ENVELOPE", "java.awt.PageAttributes.MediaType", true),
              })
          .put(
              "printInt",
              new Import[] {
                new Import("printInt", "javax.xml.bind.DatatypeConverter", true),
              })
          .put(
              "Foreground",
              new Import[] {
                new Import("Foreground", "javax.swing.text.StyleConstants", true),
              })
          .put(
              "toUnsignedString",
              new Import[] {
                new Import("toUnsignedString", "java.lang.Integer", true),
                new Import("toUnsignedString", "java.lang.Long", true),
              })
          .put(
              "emptyIntSpliterator",
              new Import[] {
                new Import("emptyIntSpliterator", "java.util.Spliterators", true),
              })
          .put(
              "W3C_XML_SCHEMA_NS_URI",
              new Import[] {
                new Import("W3C_XML_SCHEMA_NS_URI", "javax.xml.XMLConstants", true),
              })
          .put(
              "ObjectImpl",
              new Import[] {
                new Import("ObjectImpl", "org.omg.CORBA.portable", false),
                new Import("ObjectImpl", "org.omg.CORBA_2_3.portable", false),
              })
          .put(
              "LinkedHashSet",
              new Import[] {
                new Import("LinkedHashSet", "java.util", false),
              })
          .put(
              "getTextPlainUnicodeFlavor",
              new Import[] {
                new Import("getTextPlainUnicodeFlavor", "java.awt.datatransfer.DataFlavor", true),
              })
          .put(
              "isHeadless",
              new Import[] {
                new Import("isHeadless", "java.awt.GraphicsEnvironment", true),
              })
          .put(
              "SUBMISSION_INTERRUPTED",
              new Import[] {
                new Import(
                    "SUBMISSION_INTERRUPTED",
                    "javax.print.attribute.standard.JobStateReason",
                    true),
              })
          .put(
              "VK_PROPS",
              new Import[] {
                new Import("VK_PROPS", "java.awt.event.KeyEvent", true),
              })
          .put(
              "KeyAdapter",
              new Import[] {
                new Import("KeyAdapter", "java.awt.event", false),
              })
          .put(
              "SerialJavaObject",
              new Import[] {
                new Import("SerialJavaObject", "javax.sql.rowset.serial", false),
              })
          .put(
              "VALUETYPE",
              new Import[] {
                new Import("VALUETYPE", "javax.swing.text.html.HTML.Attribute", true),
              })
          .put(
              "printBoolean",
              new Import[] {
                new Import("printBoolean", "javax.xml.bind.DatatypeConverter", true),
              })
          .put(
              "GlyphPainter",
              new Import[] {
                new Import("GlyphPainter", "javax.swing.text.GlyphView", false),
              })
          .put(
              "isNative",
              new Import[] {
                new Import("isNative", "java.lang.reflect.Modifier", true),
              })
          .put(
              "ExportException",
              new Import[] {
                new Import("ExportException", "java.rmi.server", false),
              })
          .put(
              "insertBreakAction",
              new Import[] {
                new Import("insertBreakAction", "javax.swing.text.DefaultEditorKit", true),
              })
          .put(
              "TAISHO",
              new Import[] {
                new Import("TAISHO", "java.time.chrono.JapaneseEra", true),
              })
          .put(
              "TMJOIN",
              new Import[] {
                new Import("TMJOIN", "javax.transaction.xa.XAResource", true),
              })
          .put(
              "JOIN_BEVEL",
              new Import[] {
                new Import("JOIN_BEVEL", "java.awt.BasicStroke", true),
              })
          .put(
              "NamingContextExtHolder",
              new Import[] {
                new Import("NamingContextExtHolder", "org.omg.CosNaming", false),
              })
          .put(
              "parameterNullableUnknown",
              new Import[] {
                new Import("parameterNullableUnknown", "java.sql.ParameterMetaData", true),
              })
          .put(
              "createFromRenderedImage",
              new Import[] {
                new Import("createFromRenderedImage", "javax.imageio.ImageTypeSpecifier", true),
              })
          .put(
              "LifespanPolicy",
              new Import[] {
                new Import("LifespanPolicy", "org.omg.PortableServer", false),
              })
          .put(
              "ABORT",
              new Import[] {
                new Import("ABORT", "java.awt.image.ImageObserver", true),
              })
          .put(
              "InvalidPreferencesFormatException",
              new Import[] {
                new Import("InvalidPreferencesFormatException", "java.util.prefs", false),
              })
          .put(
              "W3C_LENGTH_UNITS",
              new Import[] {
                new Import("W3C_LENGTH_UNITS", "javax.swing.JEditorPane", true),
              })
          .put(
              "IllegalSelectorException",
              new Import[] {
                new Import("IllegalSelectorException", "java.nio.channels", false),
              })
          .put(
              "setLeftIndent",
              new Import[] {
                new Import("setLeftIndent", "javax.swing.text.StyleConstants", true),
              })
          .put(
              "CANADA_FRENCH",
              new Import[] {
                new Import("CANADA_FRENCH", "java.util.Locale", true),
              })
          .put(
              "rebind",
              new Import[] {
                new Import("rebind", "java.rmi.Naming", true),
              })
          .put(
              "GRADE_LOCK_WHEN_MODIFIED",
              new Import[] {
                new Import("GRADE_LOCK_WHEN_MODIFIED", "javax.sql.rowset.spi.SyncProvider", true),
              })
          .put(
              "VK_UP",
              new Import[] {
                new Import("VK_UP", "java.awt.event.KeyEvent", true),
              })
          .put(
              "LISU",
              new Import[] {
                new Import("LISU", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "LIST",
              new Import[] {
                new Import("LIST", "javax.accessibility.AccessibleRole", true),
                new Import("LIST", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "FixedHeightLayoutCache",
              new Import[] {
                new Import("FixedHeightLayoutCache", "javax.swing.tree", false),
              })
          .put(
              "AUTHENTICATOR",
              new Import[] {
                new Import("AUTHENTICATOR", "javax.management.remote.JMXConnectorServer", true),
              })
          .put(
              "charCount",
              new Import[] {
                new Import("charCount", "java.lang.Character", true),
              })
          .put(
              "StringSeqHolder",
              new Import[] {
                new Import("StringSeqHolder", "org.omg.CORBA", false),
              })
          .put(
              "ISO_B10",
              new Import[] {
                new Import("ISO_B10", "java.awt.PageAttributes.MediaType", true),
                new Import("ISO_B10", "javax.print.attribute.standard.MediaSizeName", true),
              })
          .put(
              "SCROLLBARS_NEVER",
              new Import[] {
                new Import("SCROLLBARS_NEVER", "java.awt.ScrollPane", true),
              })
          .put(
              "VK_CODE_INPUT",
              new Import[] {
                new Import("VK_CODE_INPUT", "java.awt.event.KeyEvent", true),
              })
          .put(
              "Subscript",
              new Import[] {
                new Import("Subscript", "javax.swing.text.StyleConstants", true),
              })
          .put(
              "SAXNotRecognizedException",
              new Import[] {
                new Import("SAXNotRecognizedException", "org.xml.sax", false),
              })
          .put(
              "getProgressBarBorder",
              new Import[] {
                new Import("getProgressBarBorder", "javax.swing.plaf.basic.BasicBorders", true),
              })
          .put(
              "BeanContextChildComponentProxy",
              new Import[] {
                new Import("BeanContextChildComponentProxy", "java.beans.beancontext", false),
              })
          .put(
              "InvalidPropertiesFormatException",
              new Import[] {
                new Import("InvalidPropertiesFormatException", "java.util", false),
              })
          .put(
              "DATATYPE_FLOAT",
              new Import[] {
                new Import("DATATYPE_FLOAT", "javax.imageio.metadata.IIOMetadataFormat", true),
              })
          .put(
              "getShaper",
              new Import[] {
                new Import("getShaper", "java.awt.font.NumericShaper", true),
              })
          .put(
              "PosixFilePermissions",
              new Import[] {
                new Import("PosixFilePermissions", "java.nio.file.attribute", false),
              })
          .put(
              "PreferenceChangeEvent",
              new Import[] {
                new Import("PreferenceChangeEvent", "java.util.prefs", false),
              })
          .put(
              "getFollowRedirects",
              new Import[] {
                new Import("getFollowRedirects", "java.net.HttpURLConnection", true),
              })
          .put(
              "WrappedPlainView",
              new Import[] {
                new Import("WrappedPlainView", "javax.swing.text", false),
              })
          .put(
              "GLASS_PANE_PROPERTY",
              new Import[] {
                new Import("GLASS_PANE_PROPERTY", "javax.swing.JInternalFrame", true),
              })
          .put(
              "BackingStoreException",
              new Import[] {
                new Import("BackingStoreException", "java.util.prefs", false),
              })
          .put(
              "SUBWINDOW_OF_PROPERTY",
              new Import[] {
                new Import("SUBWINDOW_OF_PROPERTY", "javax.accessibility.AccessibleRelation", true),
              })
          .put(
              "doubleStream",
              new Import[] {
                new Import("doubleStream", "java.util.stream.StreamSupport", true),
              })
          .put(
              "icMediaRelativeColorimetric",
              new Import[] {
                new Import("icMediaRelativeColorimetric", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "XmlType",
              new Import[] {
                new Import("XmlType", "javax.xml.bind.annotation", false),
              })
          .put(
              "FileStore",
              new Import[] {
                new Import("FileStore", "java.nio.file", false),
              })
          .put(
              "LIST_ITEM",
              new Import[] {
                new Import("LIST_ITEM", "javax.accessibility.AccessibleRole", true),
              })
          .put(
              "IORInterceptor",
              new Import[] {
                new Import("IORInterceptor", "org.omg.PortableInterceptor", false),
              })
          .put(
              "BufferCapabilities",
              new Import[] {
                new Import("BufferCapabilities", "java.awt", false),
              })
          .put(
              "previousDouble",
              new Import[] {
                new Import("previousDouble", "java.text.ChoiceFormat", true),
              })
          .put(
              "SCROLLBAR",
              new Import[] {
                new Import("SCROLLBAR", "java.awt.SystemColor", true),
              })
          .put(
              "PrintServiceAttribute",
              new Import[] {
                new Import("PrintServiceAttribute", "javax.print.attribute", false),
              })
          .put(
              "ParameterMetaData",
              new Import[] {
                new Import("ParameterMetaData", "java.sql", false),
              })
          .put(
              "NoSuchElementException",
              new Import[] {
                new Import("NoSuchElementException", "java.util", false),
              })
          .put(
              "MetalDesktopIconUI",
              new Import[] {
                new Import("MetalDesktopIconUI", "javax.swing.plaf.metal", false),
              })
          .put(
              "deleteNextWordAction",
              new Import[] {
                new Import("deleteNextWordAction", "javax.swing.text.DefaultEditorKit", true),
              })
          .put(
              "XAER_DUPID",
              new Import[] {
                new Import("XAER_DUPID", "javax.transaction.xa.XAException", true),
              })
          .put(
              "UnionType",
              new Import[] {
                new Import("UnionType", "javax.lang.model.type", false),
              })
          .put(
              "copyOfRange",
              new Import[] {
                new Import("copyOfRange", "java.util.Arrays", true),
              })
          .put(
              "BasicTextAreaUI",
              new Import[] {
                new Import("BasicTextAreaUI", "javax.swing.plaf.basic", false),
              })
          .put(
              "AccessibleText",
              new Import[] {
                new Import("AccessibleText", "javax.accessibility", false),
              })
          .put(
              "XPathExpressionException",
              new Import[] {
                new Import("XPathExpressionException", "javax.xml.xpath", false),
              })
          .put(
              "NamingEnumeration",
              new Import[] {
                new Import("NamingEnumeration", "javax.naming", false),
              })
          .put(
              "CONTIGUOUS_TREE_SELECTION",
              new Import[] {
                new Import(
                    "CONTIGUOUS_TREE_SELECTION", "javax.swing.tree.TreeSelectionModel", true),
              })
          .put(
              "icSigPreview0Tag",
              new Import[] {
                new Import("icSigPreview0Tag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "CLASS_ATTRIBUTE_PFX",
              new Import[] {
                new Import("CLASS_ATTRIBUTE_PFX", "java.util.jar.Pack200.Packer", true),
              })
          .put(
              "VALUE_NONE",
              new Import[] {
                new Import("VALUE_NONE", "javax.imageio.metadata.IIOMetadataFormat", true),
              })
          .put(
              "OBJECT_REMOVED",
              new Import[] {
                new Import("OBJECT_REMOVED", "javax.naming.event.NamingEvent", true),
              })
          .put(
              "newFactory",
              new Import[] {
                new Import("newFactory", "javax.sql.rowset.RowSetProvider", true),
                new Import("newFactory", "javax.xml.stream.XMLEventFactory", true),
                new Import("newFactory", "javax.xml.stream.XMLInputFactory", true),
                new Import("newFactory", "javax.xml.stream.XMLOutputFactory", true),
              })
          .put(
              "ofStrict",
              new Import[] {
                new Import("ofStrict", "java.time.ZonedDateTime", true),
              })
          .put(
              "icSigRedColorantTag",
              new Import[] {
                new Import("icSigRedColorantTag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "mapping",
              new Import[] {
                new Import("mapping", "java.util.stream.Collectors", true),
              })
          .put(
              "BLUECOMPONENT",
              new Import[] {
                new Import("BLUECOMPONENT", "java.awt.color.ICC_ProfileRGB", true),
              })
          .put(
              "ProfileDataException",
              new Import[] {
                new Import("ProfileDataException", "java.awt.color", false),
              })
          .put(
              "VSPACE",
              new Import[] {
                new Import("VSPACE", "javax.swing.text.html.HTML.Attribute", true),
              })
          .put(
              "FileIcon16",
              new Import[] {
                new Import("FileIcon16", "javax.swing.plaf.metal.MetalIconFactory", false),
              })
          .put(
              "AWT_COMPONENT",
              new Import[] {
                new Import("AWT_COMPONENT", "javax.accessibility.AccessibleRole", true),
              })
          .put(
              "THAANA",
              new Import[] {
                new Import("THAANA", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "InitialContextFactory",
              new Import[] {
                new Import("InitialContextFactory", "javax.naming.spi", false),
              })
          .put(
              "SecureDirectoryStream",
              new Import[] {
                new Import("SecureDirectoryStream", "java.nio.file", false),
              })
          .put(
              "OutOfMemoryError",
              new Import[] {
                new Import("OutOfMemoryError", "java.lang", false),
              })
          .put(
              "TAG_PREP",
              new Import[] {
                new Import("TAG_PREP", "java.awt.font.OpenType", true),
              })
          .put(
              "mapLibraryName",
              new Import[] {
                new Import("mapLibraryName", "java.lang.System", true),
              })
          .put(
              "PKCS12Attribute",
              new Import[] {
                new Import("PKCS12Attribute", "java.security", false),
              })
          .put(
              "MONARCH",
              new Import[] {
                new Import("MONARCH", "java.awt.PageAttributes.MediaType", true),
              })
          .put(
              "ServiceRegistry",
              new Import[] {
                new Import("ServiceRegistry", "javax.imageio.spi", false),
              })
          .put(
              "MAP",
              new Import[] {
                new Import("MAP", "javax.swing.text.html.HTML.Tag", true),
              })
          .put(
              "fragmentHtmlFlavor",
              new Import[] {
                new Import("fragmentHtmlFlavor", "java.awt.datatransfer.DataFlavor", true),
              })
          .put(
              "KEY_LOCATION_LEFT",
              new Import[] {
                new Import("KEY_LOCATION_LEFT", "java.awt.event.KeyEvent", true),
              })
          .put(
              "RESERVED_UIROLE",
              new Import[] {
                new Import("RESERVED_UIROLE", "javax.print.ServiceUIFactory", true),
              })
          .put(
              "MAY",
              new Import[] {
                new Import("MAY", "java.util.Calendar", true),
                new Import("MAY", "javax.xml.datatype.DatatypeConstants", true),
              })
          .put(
              "HUFFMAN_ONLY",
              new Import[] {
                new Import("HUFFMAN_ONLY", "java.util.zip.Deflater", true),
              })
          .put(
              "MAX",
              new Import[] {
                new Import("MAX", "java.time.Instant", true),
                new Import("MAX", "java.time.LocalDate", true),
                new Import("MAX", "java.time.LocalDateTime", true),
                new Import("MAX", "java.time.LocalTime", true),
                new Import("MAX", "java.time.OffsetDateTime", true),
                new Import("MAX", "java.time.OffsetTime", true),
                new Import("MAX", "java.time.ZoneOffset", true),
              })
          .put(
              "WebService",
              new Import[] {
                new Import("WebService", "javax.jws", false),
              })
          .put(
              "NO_ORIENTATION",
              new Import[] {
                new Import("NO_ORIENTATION", "java.awt.Adjustable", true),
              })
          .put(
              "MulticastChannel",
              new Import[] {
                new Import("MulticastChannel", "java.nio.channels", false),
              })
          .put(
              "BindingHolder",
              new Import[] {
                new Import("BindingHolder", "org.omg.CosNaming", false),
              })
          .put(
              "BeanContextMembershipListener",
              new Import[] {
                new Import("BeanContextMembershipListener", "java.beans.beancontext", false),
              })
          .put(
              "CHILD_POLICY_REPEAT",
              new Import[] {
                new Import("CHILD_POLICY_REPEAT", "javax.imageio.metadata.IIOMetadataFormat", true),
              })
          .put(
              "ISO_DATE",
              new Import[] {
                new Import("ISO_DATE", "java.time.format.DateTimeFormatter", true),
              })
          .put(
              "ULongSeqHolder",
              new Import[] {
                new Import("ULongSeqHolder", "org.omg.CORBA", false),
              })
          .put(
              "PAUSE",
              new Import[] {
                new Import("PAUSE", "java.awt.Event", true),
              })
          .put(
              "FORMAT_FAILURE",
              new Import[] {
                new Import("FORMAT_FAILURE", "java.util.logging.ErrorManager", true),
              })
          .put(
              "Activator",
              new Import[] {
                new Import("Activator", "java.rmi.activation", false),
              })
          .put(
              "InconsistentTypeCodeHelper",
              new Import[] {
                new Import(
                    "InconsistentTypeCodeHelper", "org.omg.DynamicAny.DynAnyFactoryPackage", false),
              })
          .put(
              "Style",
              new Import[] {
                new Import("Style", "javax.jws.soap.SOAPBinding", false),
                new Import("Style", "javax.swing.text", false),
              })
          .put(
              "ATTRIBUTE_RUN",
              new Import[] {
                new Import("ATTRIBUTE_RUN", "javax.accessibility.AccessibleExtendedText", true),
              })
          .put(
              "ROWSET_SYNC_PROVIDER_VERSION",
              new Import[] {
                new Import(
                    "ROWSET_SYNC_PROVIDER_VERSION", "javax.sql.rowset.spi.SyncFactory", true),
              })
          .put(
              "getWindowTitleBackground",
              new Import[] {
                new Import(
                    "getWindowTitleBackground", "javax.swing.plaf.metal.MetalLookAndFeel", true),
              })
          .put(
              "dk_all",
              new Import[] {
                new Import("dk_all", "org.omg.CORBA.DefinitionKind", true),
              })
          .put(
              "TimerMBean",
              new Import[] {
                new Import("TimerMBean", "javax.management.timer", false),
              })
          .put(
              "SPECIALS",
              new Import[] {
                new Import("SPECIALS", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "getDirectionality",
              new Import[] {
                new Import("getDirectionality", "java.lang.Character", true),
              })
          .put(
              "FormatMismatch",
              new Import[] {
                new Import("FormatMismatch", "org.omg.IOP.CodecPackage", false),
              })
          .put(
              "TextEvent",
              new Import[] {
                new Import("TextEvent", "java.awt.event", false),
              })
          .put(
              "JAXB_SCHEMA_LOCATION",
              new Import[] {
                new Import("JAXB_SCHEMA_LOCATION", "javax.xml.bind.Marshaller", true),
              })
          .put(
              "ImageConsumer",
              new Import[] {
                new Import("ImageConsumer", "java.awt.image", false),
              })
          .put(
              "getContinuationDirContext",
              new Import[] {
                new Import("getContinuationDirContext", "javax.naming.spi.DirectoryManager", true),
              })
          .put(
              "PENDING_HELD",
              new Import[] {
                new Import("PENDING_HELD", "javax.print.attribute.standard.JobState", true),
              })
          .put(
              "icXYZNumberX",
              new Import[] {
                new Import("icXYZNumberX", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "FontFormatException",
              new Import[] {
                new Import("FontFormatException", "java.awt", false),
              })
          .put(
              "OutputStream",
              new Import[] {
                new Import("OutputStream", "java.io", false),
                new Import("OutputStream", "org.omg.CORBA.portable", false),
                new Import("OutputStream", "org.omg.CORBA_2_3.portable", false),
              })
          .put(
              "CLOSE",
              new Import[] {
                new Import("CLOSE", "javax.sound.sampled.LineEvent.Type", true),
              })
          .put(
              "NamingContextExtHelper",
              new Import[] {
                new Import("NamingContextExtHelper", "org.omg.CosNaming", false),
              })
          .put(
              "tk_native",
              new Import[] {
                new Import("tk_native", "org.omg.CORBA.TCKind", true),
              })
          .put(
              "DefaultMetalTheme",
              new Import[] {
                new Import("DefaultMetalTheme", "javax.swing.plaf.metal", false),
              })
          .put(
              "_NamingContextImplBase",
              new Import[] {
                new Import("_NamingContextImplBase", "org.omg.CosNaming", false),
              })
          .put(
              "KANBUN",
              new Import[] {
                new Import("KANBUN", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "MONTHS",
              new Import[] {
                new Import("MONTHS", "javax.xml.datatype.DatatypeConstants", true),
              })
          .put(
              "UserPrincipalNotFoundException",
              new Import[] {
                new Import("UserPrincipalNotFoundException", "java.nio.file.attribute", false),
              })
          .put(
              "StringBufferInputStream",
              new Import[] {
                new Import("StringBufferInputStream", "java.io", false),
              })
          .put(
              "INTERNAL",
              new Import[] {
                new Import("INTERNAL", "org.omg.CORBA", false),
              })
          .put(
              "ACCESSIBLE_TABLE_MODEL_CHANGED",
              new Import[] {
                new Import(
                    "ACCESSIBLE_TABLE_MODEL_CHANGED",
                    "javax.accessibility.AccessibleContext",
                    true),
              })
          .put(
              "ICC_Profile",
              new Import[] {
                new Import("ICC_Profile", "java.awt.color", false),
              })
          .put(
              "PERSONAL_ENVELOPE",
              new Import[] {
                new Import("PERSONAL_ENVELOPE", "java.awt.PageAttributes.MediaType", true),
                new Import(
                    "PERSONAL_ENVELOPE", "javax.print.attribute.standard.MediaSizeName", true),
                new Import(
                    "PERSONAL_ENVELOPE", "javax.print.attribute.standard.MediaSize.Other", true),
              })
          .put(
              "DateTimeFormatterBuilder",
              new Import[] {
                new Import("DateTimeFormatterBuilder", "java.time.format", false),
              })
          .put(
              "StubNotFoundException",
              new Import[] {
                new Import("StubNotFoundException", "java.rmi", false),
              })
          .put(
              "MBeanServer",
              new Import[] {
                new Import("MBeanServer", "javax.management", false),
              })
          .put(
              "height",
              new Import[] {
                new Import("height", "javax.swing.Spring", true),
              })
          .put(
              "allocateDirect",
              new Import[] {
                new Import("allocateDirect", "java.nio.ByteBuffer", true),
              })
          .put(
              "readFrom",
              new Import[] {
                new Import("readFrom", "javax.xml.ws.EndpointReference", true),
              })
          .put(
              "checkedCollection",
              new Import[] {
                new Import("checkedCollection", "java.util.Collections", true),
              })
          .put(
              "MEMORY_POOL_MXBEAN_DOMAIN_TYPE",
              new Import[] {
                new Import(
                    "MEMORY_POOL_MXBEAN_DOMAIN_TYPE",
                    "java.lang.management.ManagementFactory",
                    true),
              })
          .put(
              "NODE",
              new Import[] {
                new Import("NODE", "javax.xml.xpath.XPathConstants", true),
              })
          .put(
              "paintComponent",
              new Import[] {
                new Import("paintComponent", "javax.swing.SwingUtilities", true),
              })
          .put(
              "getKeyStroke",
              new Import[] {
                new Import("getKeyStroke", "javax.swing.KeyStroke", true),
              })
          .put(
              "INNER_JOIN",
              new Import[] {
                new Import("INNER_JOIN", "javax.sql.rowset.JoinRowSet", true),
              })
          .put(
              "dk_ValueMember",
              new Import[] {
                new Import("dk_ValueMember", "org.omg.CORBA.DefinitionKind", true),
              })
          .put(
              "importedKeyInitiallyDeferred",
              new Import[] {
                new Import("importedKeyInitiallyDeferred", "java.sql.DatabaseMetaData", true),
              })
          .put(
              "Parser",
              new Import[] {
                new Import("Parser", "javax.swing.text.html.HTMLEditorKit", false),
                new Import("Parser", "javax.swing.text.html.parser", false),
                new Import("Parser", "org.xml.sax", false),
              })
          .put(
              "HOUR_OF_DAY1_FIELD",
              new Import[] {
                new Import("HOUR_OF_DAY1_FIELD", "java.text.DateFormat", true),
              })
          .put(
              "AtomicBoolean",
              new Import[] {
                new Import("AtomicBoolean", "java.util.concurrent.atomic", false),
              })
          .put(
              "ChoiceCallback",
              new Import[] {
                new Import("ChoiceCallback", "javax.security.auth.callback", false),
              })
          .put(
              "ICON_COLOR_32x32",
              new Import[] {
                new Import("ICON_COLOR_32x32", "java.beans.BeanInfo", true),
              })
          .put(
              "AffineTransform",
              new Import[] {
                new Import("AffineTransform", "java.awt.geom", false),
              })
          .put(
              "Key",
              new Import[] {
                new Import("Key", "java.awt.RenderingHints", false),
                new Import("Key", "java.security", false),
              })
          .put(
              "PasswordProtection",
              new Import[] {
                new Import("PasswordProtection", "java.security.KeyStore", false),
              })
          .put(
              "PagedResultsControl",
              new Import[] {
                new Import("PagedResultsControl", "javax.naming.ldap", false),
              })
          .put(
              "MOUSE_EVENT_MASK",
              new Import[] {
                new Import("MOUSE_EVENT_MASK", "java.awt.AWTEvent", true),
              })
          .put(
              "CutAction",
              new Import[] {
                new Import("CutAction", "javax.swing.text.DefaultEditorKit", false),
              })
          .put(
              "IPA_EXTENSIONS",
              new Import[] {
                new Import("IPA_EXTENSIONS", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "DynSequenceHelper",
              new Import[] {
                new Import("DynSequenceHelper", "org.omg.DynamicAny", false),
              })
          .put(
              "PathIterator",
              new Import[] {
                new Import("PathIterator", "java.awt.geom", false),
              })
          .put(
              "JOB_HOLD_UNTIL_SPECIFIED",
              new Import[] {
                new Import(
                    "JOB_HOLD_UNTIL_SPECIFIED",
                    "javax.print.attribute.standard.JobStateReason",
                    true),
              })
          .put(
              "PARAGRAPH_SEPARATOR",
              new Import[] {
                new Import("PARAGRAPH_SEPARATOR", "java.lang.Character", true),
              })
          .put(
              "EventHandler",
              new Import[] {
                new Import("EventHandler", "java.beans", false),
              })
          .put(
              "isPrivate",
              new Import[] {
                new Import("isPrivate", "java.lang.reflect.Modifier", true),
              })
          .put(
              "Logger",
              new Import[] {
                new Import("Logger", "java.util.logging", false),
              })
          .put(
              "Elements",
              new Import[] {
                new Import("Elements", "javax.lang.model.util", false),
              })
          .put(
              "min",
              new Import[] {
                new Import("min", "java.lang.Double", true),
                new Import("min", "java.lang.Float", true),
                new Import("min", "java.lang.Integer", true),
                new Import("min", "java.lang.Long", true),
                new Import("min", "java.lang.Math", true),
                new Import("min", "java.lang.StrictMath", true),
                new Import("min", "java.util.Collections", true),
              })
          .put(
              "PRIVATE_USE_EXTENSION",
              new Import[] {
                new Import("PRIVATE_USE_EXTENSION", "java.util.Locale", true),
              })
          .put(
              "arraycopy",
              new Import[] {
                new Import("arraycopy", "java.lang.System", true),
              })
          .put(
              "BLOCK_ELEMENTS",
              new Import[] {
                new Import("BLOCK_ELEMENTS", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "HMAC_SHA1",
              new Import[] {
                new Import("HMAC_SHA1", "javax.xml.crypto.dsig.SignatureMethod", true),
              })
          .put(
              "getBoolean",
              new Import[] {
                new Import("getBoolean", "java.lang.Boolean", true),
                new Import("getBoolean", "java.lang.reflect.Array", true),
                new Import("getBoolean", "javax.swing.UIManager", true),
              })
          .put(
              "icSigDeviceModelDescTag",
              new Import[] {
                new Import("icSigDeviceModelDescTag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "DECIMAL32",
              new Import[] {
                new Import("DECIMAL32", "java.math.MathContext", true),
              })
          .put(
              "getPreferredButtonSize",
              new Import[] {
                new Import(
                    "getPreferredButtonSize", "javax.swing.plaf.basic.BasicGraphicsUtils", true),
              })
          .put(
              "SOAPConnectionFactory",
              new Import[] {
                new Import("SOAPConnectionFactory", "javax.xml.soap", false),
              })
          .put(
              "VK_KANA",
              new Import[] {
                new Import("VK_KANA", "java.awt.event.KeyEvent", true),
              })
          .put(
              "LARGE_CAPACITY",
              new Import[] {
                new Import("LARGE_CAPACITY", "javax.print.attribute.standard.MediaTray", true),
              })
          .put(
              "getMenuSelectedForeground",
              new Import[] {
                new Import(
                    "getMenuSelectedForeground", "javax.swing.plaf.metal.MetalLookAndFeel", true),
              })
          .put(
              "Calendar",
              new Import[] {
                new Import("Calendar", "java.util", false),
              })
          .put(
              "TYPE_USHORT_GRAY",
              new Import[] {
                new Import("TYPE_USHORT_GRAY", "java.awt.image.BufferedImage", true),
              })
          .put(
              "emptySpliterator",
              new Import[] {
                new Import("emptySpliterator", "java.util.Spliterators", true),
              })
          .put(
              "UNDERLINE_LOW_DOTTED",
              new Import[] {
                new Import("UNDERLINE_LOW_DOTTED", "java.awt.font.TextAttribute", true),
              })
          .put(
              "UP_CYCLE_TRAVERSAL_KEYS",
              new Import[] {
                new Import("UP_CYCLE_TRAVERSAL_KEYS", "java.awt.KeyboardFocusManager", true),
              })
          .put(
              "DoubleSummaryStatistics",
              new Import[] {
                new Import("DoubleSummaryStatistics", "java.util", false),
              })
          .put(
              "InsertContentAction",
              new Import[] {
                new Import("InsertContentAction", "javax.swing.text.DefaultEditorKit", false),
              })
          .put(
              "Observable",
              new Import[] {
                new Import("Observable", "java.util", false),
              })
          .put(
              "icSigScreeningTag",
              new Import[] {
                new Import("icSigScreeningTag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "BEFORE_LINE_BEGINS",
              new Import[] {
                new Import("BEFORE_LINE_BEGINS", "java.awt.BorderLayout", true),
              })
          .put(
              "QUERY_STRING",
              new Import[] {
                new Import("QUERY_STRING", "javax.xml.ws.handler.MessageContext", true),
              })
          .put(
              "functionReturnsTable",
              new Import[] {
                new Import("functionReturnsTable", "java.sql.DatabaseMetaData", true),
              })
          .put(
              "SUBMIT",
              new Import[] {
                new Import("SUBMIT", "javax.swing.text.html.FormView", true),
              })
          .put(
              "JEditorPane",
              new Import[] {
                new Import("JEditorPane", "javax.swing", false),
              })
          .put(
              "XmlElement",
              new Import[] {
                new Import("XmlElement", "javax.xml.bind.annotation", false),
              })
          .put(
              "open",
              new Import[] {
                new Import("open", "java.nio.channels.AsynchronousFileChannel", true),
                new Import("open", "java.nio.channels.AsynchronousServerSocketChannel", true),
                new Import("open", "java.nio.channels.AsynchronousSocketChannel", true),
                new Import("open", "java.nio.channels.DatagramChannel", true),
                new Import("open", "java.nio.channels.FileChannel", true),
                new Import("open", "java.nio.channels.Pipe", true),
                new Import("open", "java.nio.channels.Selector", true),
                new Import("open", "java.nio.channels.ServerSocketChannel", true),
                new Import("open", "java.nio.channels.SocketChannel", true),
              })
          .put(
              "OP_ACCEPT",
              new Import[] {
                new Import("OP_ACCEPT", "java.nio.channels.SelectionKey", true),
              })
          .put(
              "XPathExpression",
              new Import[] {
                new Import("XPathExpression", "javax.xml.xpath", false),
              })
          .put(
              "ResponseHandler",
              new Import[] {
                new Import("ResponseHandler", "org.omg.CORBA.portable", false),
              })
          .put(
              "AlgorithmParametersSpi",
              new Import[] {
                new Import("AlgorithmParametersSpi", "java.security", false),
              })
          .put(
              "filterArguments",
              new Import[] {
                new Import("filterArguments", "java.lang.invoke.MethodHandles", true),
              })
          .put(
              "chronology",
              new Import[] {
                new Import("chronology", "java.time.temporal.TemporalQueries", true),
              })
          .put(
              "MouseWheelListener",
              new Import[] {
                new Import("MouseWheelListener", "java.awt.event", false),
              })
          .put(
              "Process",
              new Import[] {
                new Import("Process", "java.lang", false),
              })
          .put(
              "VK_DEAD_ABOVEDOT",
              new Import[] {
                new Import("VK_DEAD_ABOVEDOT", "java.awt.event.KeyEvent", true),
              })
          .put(
              "StreamFilter",
              new Import[] {
                new Import("StreamFilter", "javax.xml.stream", false),
              })
          .put(
              "isSpace",
              new Import[] {
                new Import("isSpace", "java.lang.Character", true),
              })
          .put(
              "SslRMIClientSocketFactory",
              new Import[] {
                new Import("SslRMIClientSocketFactory", "javax.rmi.ssl", false),
              })
          .put(
              "ThreadDeath",
              new Import[] {
                new Import("ThreadDeath", "java.lang", false),
              })
          .put(
              "ORDERED",
              new Import[] {
                new Import("ORDERED", "java.util.Spliterator", true),
              })
          .put(
              "TIMED_OUT",
              new Import[] {
                new Import("TIMED_OUT", "javax.print.attribute.standard.PrinterStateReason", true),
              })
          .put(
              "UNIT_INCREMENT",
              new Import[] {
                new Import("UNIT_INCREMENT", "java.awt.event.AdjustmentEvent", true),
              })
          .put(
              "WEEK_OF_YEAR_FIELD",
              new Import[] {
                new Import("WEEK_OF_YEAR_FIELD", "java.text.DateFormat", true),
              })
          .put(
              "BadBreakWeight",
              new Import[] {
                new Import("BadBreakWeight", "javax.swing.text.View", true),
              })
          .put(
              "dk_Array",
              new Import[] {
                new Import("dk_Array", "org.omg.CORBA.DefinitionKind", true),
              })
          .put(
              "PrivateMLet",
              new Import[] {
                new Import("PrivateMLet", "javax.management.loading", false),
              })
          .put(
              "Polygon",
              new Import[] {
                new Import("Polygon", "java.awt", false),
              })
          .put(
              "AbstractAction",
              new Import[] {
                new Import("AbstractAction", "javax.swing", false),
              })
          .put(
              "DECIMAL64",
              new Import[] {
                new Import("DECIMAL64", "java.math.MathContext", true),
              })
          .put(
              "HANGUL_SYLLABLES",
              new Import[] {
                new Import("HANGUL_SYLLABLES", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "TMFAIL",
              new Import[] {
                new Import("TMFAIL", "javax.transaction.xa.XAResource", true),
              })
          .put(
              "StandardCharsets",
              new Import[] {
                new Import("StandardCharsets", "java.nio.charset", false),
              })
          .put(
              "standardMetadataFormatName",
              new Import[] {
                new Import(
                    "standardMetadataFormatName",
                    "javax.imageio.metadata.IIOMetadataFormatImpl",
                    true),
              })
          .put(
              "FontUIResource",
              new Import[] {
                new Import("FontUIResource", "javax.swing.plaf", false),
              })
          .put(
              "VK_HALF_WIDTH",
              new Import[] {
                new Import("VK_HALF_WIDTH", "java.awt.event.KeyEvent", true),
              })
          .put(
              "printHexBinary",
              new Import[] {
                new Import("printHexBinary", "javax.xml.bind.DatatypeConverter", true),
              })
          .put(
              "MidiDevice",
              new Import[] {
                new Import("MidiDevice", "javax.sound.midi", false),
              })
          .put(
              "getSecurityManager",
              new Import[] {
                new Import("getSecurityManager", "java.lang.System", true),
              })
          .put(
              "ImageReaderWriterSpi",
              new Import[] {
                new Import("ImageReaderWriterSpi", "javax.imageio.spi", false),
              })
          .put(
              "AnnotatedType",
              new Import[] {
                new Import("AnnotatedType", "java.lang.reflect", false),
              })
          .put(
              "GrayFilter",
              new Import[] {
                new Import("GrayFilter", "javax.swing", false),
              })
          .put(
              "HTTP_MULT_CHOICE",
              new Import[] {
                new Import("HTTP_MULT_CHOICE", "java.net.HttpURLConnection", true),
              })
          .put(
              "NameCallback",
              new Import[] {
                new Import("NameCallback", "javax.security.auth.callback", false),
              })
          .put(
              "StringHolder",
              new Import[] {
                new Import("StringHolder", "org.omg.CORBA", false),
              })
          .put(
              "ProcessBuilder",
              new Import[] {
                new Import("ProcessBuilder", "java.lang", false),
              })
          .put(
              "icSigViewingCondDescTag",
              new Import[] {
                new Import("icSigViewingCondDescTag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "VK_CONVERT",
              new Import[] {
                new Import("VK_CONVERT", "java.awt.event.KeyEvent", true),
              })
          .put(
              "setByte",
              new Import[] {
                new Import("setByte", "java.lang.reflect.Array", true),
              })
          .put(
              "ERROR_MESSAGE",
              new Import[] {
                new Import("ERROR_MESSAGE", "javax.swing.JOptionPane", true),
              })
          .put(
              "PaletteCloseIcon",
              new Import[] {
                new Import("PaletteCloseIcon", "javax.swing.plaf.metal.MetalIconFactory", false),
              })
          .put(
              "binarySearch",
              new Import[] {
                new Import("binarySearch", "java.util.Arrays", true),
                new Import("binarySearch", "java.util.Collections", true),
              })
          .put(
              "getStandardFormatInstance",
              new Import[] {
                new Import(
                    "getStandardFormatInstance",
                    "javax.imageio.metadata.IIOMetadataFormatImpl",
                    true),
              })
          .put(
              "ZoneOffset",
              new Import[] {
                new Import("ZoneOffset", "java.time", false),
              })
          .put(
              "Control",
              new Import[] {
                new Import("Control", "java.util.ResourceBundle", false),
                new Import("Control", "javax.naming.ldap", false),
                new Import("Control", "javax.sound.sampled", false),
              })
          .put(
              "MetalComboBoxEditor",
              new Import[] {
                new Import("MetalComboBoxEditor", "javax.swing.plaf.metal", false),
              })
          .put(
              "isAlphabetic",
              new Import[] {
                new Import("isAlphabetic", "java.lang.Character", true),
              })
          .put(
              "SO_RCVBUF",
              new Import[] {
                new Import("SO_RCVBUF", "java.net.SocketOptions", true),
                new Import("SO_RCVBUF", "java.net.StandardSocketOptions", true),
              })
          .put(
              "ChronoLocalDateTime",
              new Import[] {
                new Import("ChronoLocalDateTime", "java.time.chrono", false),
              })
          .put(
              "Console",
              new Import[] {
                new Import("Console", "java.io", false),
              })
          .put(
              "Iterator",
              new Import[] {
                new Import("Iterator", "java.util", false),
                new Import("Iterator", "javax.swing.text.html.HTMLDocument", false),
              })
          .put(
              "PAGE_TAB_LIST",
              new Import[] {
                new Import("PAGE_TAB_LIST", "javax.accessibility.AccessibleRole", true),
              })
          .put(
              "HIERARCHY_LAST",
              new Import[] {
                new Import("HIERARCHY_LAST", "java.awt.event.HierarchyEvent", true),
              })
          .put(
              "GOTHIC",
              new Import[] {
                new Import("GOTHIC", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "TEXT_FIELD",
              new Import[] {
                new Import("TEXT_FIELD", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "importPreferences",
              new Import[] {
                new Import("importPreferences", "java.util.prefs.Preferences", true),
              })
          .put(
              "padSpaceBetweenStrings",
              new Import[] {
                new Import("padSpaceBetweenStrings", "javax.swing.plaf.metal.MetalToolTipUI", true),
              })
          .put(
              "ABOUT_UIROLE",
              new Import[] {
                new Import("ABOUT_UIROLE", "javax.print.ServiceUIFactory", true),
              })
          .put(
              "DestroyFailedException",
              new Import[] {
                new Import("DestroyFailedException", "javax.security.auth", false),
              })
          .put(
              "CharsetDecoder",
              new Import[] {
                new Import("CharsetDecoder", "java.nio.charset", false),
              })
          .put(
              "MediaSize",
              new Import[] {
                new Import("MediaSize", "javax.print.attribute.standard", false),
              })
          .put(
              "nextDown",
              new Import[] {
                new Import("nextDown", "java.lang.Math", true),
                new Import("nextDown", "java.lang.StrictMath", true),
              })
          .put(
              "SCALE_SMOOTH",
              new Import[] {
                new Import("SCALE_SMOOTH", "java.awt.Image", true),
              })
          .put(
              "COLS",
              new Import[] {
                new Import("COLS", "javax.swing.text.html.HTML.Attribute", true),
              })
          .put(
              "RMICustomMaxStreamFormat",
              new Import[] {
                new Import("RMICustomMaxStreamFormat", "org.omg.IOP", false),
              })
          .put(
              "getTargetLineInfo",
              new Import[] {
                new Import("getTargetLineInfo", "javax.sound.sampled.AudioSystem", true),
              })
          .put(
              "InvalidRoleInfoException",
              new Import[] {
                new Import("InvalidRoleInfoException", "javax.management.relation", false),
              })
          .put(
              "CONTROLLER_FOR_PROPERTY",
              new Import[] {
                new Import(
                    "CONTROLLER_FOR_PROPERTY", "javax.accessibility.AccessibleRelation", true),
              })
          .put(
              "AIFF",
              new Import[] {
                new Import("AIFF", "javax.sound.sampled.AudioFileFormat.Type", true),
              })
          .put(
              "WHEEL_UNIT_SCROLL",
              new Import[] {
                new Import("WHEEL_UNIT_SCROLL", "java.awt.event.MouseWheelEvent", true),
              })
          .put(
              "ncontext",
              new Import[] {
                new Import("ncontext", "org.omg.CosNaming.BindingType", true),
              })
          .put(
              "MenuItemBorder",
              new Import[] {
                new Import("MenuItemBorder", "javax.swing.plaf.metal.MetalBorders", false),
              })
          .put(
              "AIFC",
              new Import[] {
                new Import("AIFC", "javax.sound.sampled.AudioFileFormat.Type", true),
              })
          .put(
              "TIMEZONE_FIELD",
              new Import[] {
                new Import("TIMEZONE_FIELD", "java.text.DateFormat", true),
              })
          .put(
              "PLAYING_CARDS",
              new Import[] {
                new Import("PLAYING_CARDS", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "HIERARCHY_CHANGED",
              new Import[] {
                new Import("HIERARCHY_CHANGED", "java.awt.event.HierarchyEvent", true),
              })
          .put(
              "HIGH_SURROGATES",
              new Import[] {
                new Import("HIGH_SURROGATES", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "INPUT_STREAM",
              new Import[] {
                new Import("INPUT_STREAM", "javax.print.DocFlavor", false),
              })
          .put(
              "SERVLET_REQUEST",
              new Import[] {
                new Import("SERVLET_REQUEST", "javax.xml.ws.handler.MessageContext", true),
              })
          .put(
              "Security",
              new Import[] {
                new Import("Security", "java.security", false),
              })
          .put(
              "PARENT_WINDOW_OF",
              new Import[] {
                new Import("PARENT_WINDOW_OF", "javax.accessibility.AccessibleRelation", true),
              })
          .put(
              "setDefaultFileTypeMap",
              new Import[] {
                new Import("setDefaultFileTypeMap", "javax.activation.FileTypeMap", true),
              })
          .put(
              "getWordStart",
              new Import[] {
                new Import("getWordStart", "javax.swing.text.Utilities", true),
              })
          .put(
              "RoleStatus",
              new Import[] {
                new Import("RoleStatus", "javax.management.relation", false),
              })
          .put(
              "SQLInputImpl",
              new Import[] {
                new Import("SQLInputImpl", "javax.sql.rowset.serial", false),
              })
          .put(
              "ConfigurationException",
              new Import[] {
                new Import("ConfigurationException", "javax.naming", false),
              })
          .put(
              "AudioPermission",
              new Import[] {
                new Import("AudioPermission", "javax.sound.sampled", false),
              })
          .put(
              "NONE",
              new Import[] {
                new Import("NONE", "java.awt.GridBagConstraints", true),
                new Import("NONE", "java.awt.JobAttributes.DialogType", true),
                new Import("NONE", "javax.print.attribute.standard.Compression", true),
                new Import("NONE", "javax.print.attribute.standard.Finishings", true),
                new Import("NONE", "javax.print.attribute.standard.JobSheets", true),
                new Import("NONE", "javax.swing.JRootPane", true),
                new Import("NONE", "javax.swing.TransferHandler", true),
              })
          .put(
              "ofMinutes",
              new Import[] {
                new Import("ofMinutes", "java.time.Duration", true),
              })
          .put(
              "getWindowTitleInactiveForeground",
              new Import[] {
                new Import(
                    "getWindowTitleInactiveForeground",
                    "javax.swing.plaf.metal.MetalLookAndFeel",
                    true),
              })
          .put(
              "SWAP_COLORS_ON",
              new Import[] {
                new Import("SWAP_COLORS_ON", "java.awt.font.TextAttribute", true),
              })
          .put(
              "VK_JAPANESE_KATAKANA",
              new Import[] {
                new Import("VK_JAPANESE_KATAKANA", "java.awt.event.KeyEvent", true),
              })
          .put(
              "ARABIC",
              new Import[] {
                new Import("ARABIC", "java.awt.font.NumericShaper", true),
                new Import("ARABIC", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "TYPE_HLS",
              new Import[] {
                new Import("TYPE_HLS", "java.awt.color.ColorSpace", true),
              })
          .put(
              "getFileSystem",
              new Import[] {
                new Import("getFileSystem", "java.nio.file.FileSystems", true),
              })
          .put(
              "INTERNAL_FRAME_DEACTIVATED",
              new Import[] {
                new Import(
                    "INTERNAL_FRAME_DEACTIVATED", "javax.swing.event.InternalFrameEvent", true),
              })
          .put(
              "ServerRequestInterceptor",
              new Import[] {
                new Import("ServerRequestInterceptor", "org.omg.PortableInterceptor", false),
              })
          .put(
              "SQLNonTransientConnectionException",
              new Import[] {
                new Import("SQLNonTransientConnectionException", "java.sql", false),
              })
          .put(
              "icHdrPcs",
              new Import[] {
                new Import("icHdrPcs", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "TrustManagerFactory",
              new Import[] {
                new Import("TrustManagerFactory", "javax.net.ssl", false),
              })
          .put(
              "DateFormatSymbols",
              new Import[] {
                new Import("DateFormatSymbols", "java.text", false),
              })
          .put(
              "DO_NOTHING_ON_CLOSE",
              new Import[] {
                new Import("DO_NOTHING_ON_CLOSE", "javax.swing.WindowConstants", true),
              })
          .put(
              "PolicyOperations",
              new Import[] {
                new Import("PolicyOperations", "org.omg.CORBA", false),
              })
          .put(
              "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE",
              new Import[] {
                new Import("DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", "java.lang.Character", true),
              })
          .put(
              "PROTOCOL_PROVIDER_CLASS_LOADER",
              new Import[] {
                new Import(
                    "PROTOCOL_PROVIDER_CLASS_LOADER",
                    "javax.management.remote.JMXConnectorFactory",
                    true),
                new Import(
                    "PROTOCOL_PROVIDER_CLASS_LOADER",
                    "javax.management.remote.JMXConnectorServerFactory",
                    true),
              })
          .put(
              "MEDIA_JAM",
              new Import[] {
                new Import("MEDIA_JAM", "javax.print.attribute.standard.PrinterStateReason", true),
              })
          .put(
              "COMMIT_OR_REVERT",
              new Import[] {
                new Import("COMMIT_OR_REVERT", "javax.swing.JFormattedTextField", true),
              })
          .put(
              "getAccessibleStateSet",
              new Import[] {
                new Import("getAccessibleStateSet", "javax.swing.SwingUtilities", true),
              })
          .put(
              "parseAnySimpleType",
              new Import[] {
                new Import("parseAnySimpleType", "javax.xml.bind.DatatypeConverter", true),
              })
          .put(
              "GridBagLayout",
              new Import[] {
                new Import("GridBagLayout", "java.awt", false),
              })
          .put(
              "NOON",
              new Import[] {
                new Import("NOON", "java.time.LocalTime", true),
              })
          .put(
              "TONER_EMPTY",
              new Import[] {
                new Import(
                    "TONER_EMPTY", "javax.print.attribute.standard.PrinterStateReason", true),
              })
          .put(
              "INITIALIZE",
              new Import[] {
                new Import("INITIALIZE", "org.omg.CORBA", false),
              })
          .put(
              "FocusManager",
              new Import[] {
                new Import("FocusManager", "javax.swing", false),
              })
          .put(
              "CellRendererPane",
              new Import[] {
                new Import("CellRendererPane", "javax.swing", false),
              })
          .put(
              "FontAttribute",
              new Import[] {
                new Import("FontAttribute", "javax.swing.text.AttributeSet", false),
              })
          .put(
              "CREDENTIALS",
              new Import[] {
                new Import("CREDENTIALS", "javax.management.remote.JMXConnector", true),
                new Import("CREDENTIALS", "javax.security.sasl.Sasl", true),
              })
          .put(
              "WINDOW_OPENED",
              new Import[] {
                new Import("WINDOW_OPENED", "java.awt.event.WindowEvent", true),
              })
          .put(
              "getPlatformMXBean",
              new Import[] {
                new Import("getPlatformMXBean", "java.lang.management.ManagementFactory", true),
              })
          .put(
              "NO_COMPRESSION",
              new Import[] {
                new Import("NO_COMPRESSION", "java.util.zip.Deflater", true),
              })
          .put(
              "RELATIVE",
              new Import[] {
                new Import("RELATIVE", "java.awt.GridBagConstraints", true),
              })
          .put(
              "ResolverStyle",
              new Import[] {
                new Import("ResolverStyle", "java.time.format", false),
              })
          .put(
              "INFO_TEXT",
              new Import[] {
                new Import("INFO_TEXT", "java.awt.SystemColor", true),
              })
          .put(
              "XMLParseException",
              new Import[] {
                new Import("XMLParseException", "javax.management.modelmbean", false),
              })
          .put(
              "MEMBER_OF_PROPERTY",
              new Import[] {
                new Import("MEMBER_OF_PROPERTY", "javax.accessibility.AccessibleRelation", true),
              })
          .put(
              "SELECTED_FILES_CHANGED_PROPERTY",
              new Import[] {
                new Import("SELECTED_FILES_CHANGED_PROPERTY", "javax.swing.JFileChooser", true),
              })
          .put(
              "INACTIVE_CAPTION_BORDER",
              new Import[] {
                new Import("INACTIVE_CAPTION_BORDER", "java.awt.SystemColor", true),
              })
          .put(
              "NotEmptyHolder",
              new Import[] {
                new Import("NotEmptyHolder", "org.omg.CosNaming.NamingContextPackage", false),
              })
          .put(
              "CodecFactoryHelper",
              new Import[] {
                new Import("CodecFactoryHelper", "org.omg.IOP", false),
              })
          .put(
              "DARK",
              new Import[] {
                new Import("DARK", "javax.swing.plaf.metal.MetalIconFactory", true),
              })
          .put(
              "COPY",
              new Import[] {
                new Import("COPY", "javax.swing.TransferHandler", true),
              })
          .put(
              "TreeMap",
              new Import[] {
                new Import("TreeMap", "java.util", false),
              })
          .put(
              "COLOR_CHOOSER_DIALOG",
              new Import[] {
                new Import("COLOR_CHOOSER_DIALOG", "javax.swing.JRootPane", true),
              })
          .put(
              "TreePath",
              new Import[] {
                new Import("TreePath", "javax.swing.tree", false),
              })
          .put(
              "TAG_CFF",
              new Import[] {
                new Import("TAG_CFF", "java.awt.font.OpenType", true),
              })
          .put(
              "DefaultColorSelectionModel",
              new Import[] {
                new Import("DefaultColorSelectionModel", "javax.swing.colorchooser", false),
              })
          .put(
              "ICC_ProfileGray",
              new Import[] {
                new Import("ICC_ProfileGray", "java.awt.color", false),
              })
          .put(
              "MOUSE_DRAGGED",
              new Import[] {
                new Import("MOUSE_DRAGGED", "java.awt.event.MouseEvent", true),
              })
          .put(
              "Keymap",
              new Import[] {
                new Import("Keymap", "javax.swing.text", false),
              })
          .put(
              "BLOB",
              new Import[] {
                new Import("BLOB", "java.sql.Types", true),
              })
          .put(
              "DefaultTableColumnModel",
              new Import[] {
                new Import("DefaultTableColumnModel", "javax.swing.table", false),
              })
          .put(
              "PHONETIC_EXTENSIONS",
              new Import[] {
                new Import("PHONETIC_EXTENSIONS", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "MODEL_CHANGED_PROPERTY",
              new Import[] {
                new Import("MODEL_CHANGED_PROPERTY", "javax.swing.AbstractButton", true),
              })
          .put(
              "_UNIQUE_ID",
              new Import[] {
                new Import("_UNIQUE_ID", "org.omg.PortableServer.IdUniquenessPolicyValue", true),
              })
          .put(
              "DES_EDE_KEY_LEN",
              new Import[] {
                new Import("DES_EDE_KEY_LEN", "javax.crypto.spec.DESedeKeySpec", true),
              })
          .put(
              "SMALL_KEY",
              new Import[] {
                new Import("SMALL_KEY", "javax.swing.plaf.nimbus.NimbusStyle", true),
              })
          .put(
              "FocusEvent",
              new Import[] {
                new Import("FocusEvent", "java.awt.event", false),
              })
          .put(
              "DropTargetAutoScroller",
              new Import[] {
                new Import("DropTargetAutoScroller", "java.awt.dnd.DropTarget", false),
              })
          .put(
              "JAXWSPROVIDER_PROPERTY",
              new Import[] {
                new Import("JAXWSPROVIDER_PROPERTY", "javax.xml.ws.spi.Provider", true),
              })
          .put(
              "BINARY_STREAM_PARAM",
              new Import[] {
                new Import("BINARY_STREAM_PARAM", "javax.sql.rowset.BaseRowSet", true),
              })
          .put(
              "LEAD_HYPHENS",
              new Import[] {
                new Import("LEAD_HYPHENS", "javax.swing.text.TabStop", true),
              })
          .put(
              "SkeletonMismatchException",
              new Import[] {
                new Import("SkeletonMismatchException", "java.rmi.server", false),
              })
          .put(
              "EPOCH",
              new Import[] {
                new Import("EPOCH", "java.time.Instant", true),
              })
          .put(
              "DAY_OF_QUARTER",
              new Import[] {
                new Import("DAY_OF_QUARTER", "java.time.temporal.IsoFields", true),
              })
          .put(
              "zoneId",
              new Import[] {
                new Import("zoneId", "java.time.temporal.TemporalQueries", true),
              })
          .put(
              "isIdentifierIgnorable",
              new Import[] {
                new Import("isIdentifierIgnorable", "java.lang.Character", true),
              })
          .put(
              "ElementType",
              new Import[] {
                new Import("ElementType", "java.lang.annotation", false),
              })
          .put(
              "JMXConnectorProvider",
              new Import[] {
                new Import("JMXConnectorProvider", "javax.management.remote", false),
              })
          .put(
              "SOMEBITS",
              new Import[] {
                new Import("SOMEBITS", "java.awt.image.ImageObserver", true),
              })
          .put(
              "offset",
              new Import[] {
                new Import("offset", "java.time.Clock", true),
                new Import("offset", "java.time.temporal.TemporalQueries", true),
              })
          .put(
              "_opsClass",
              new Import[] {
                new Import("_opsClass", "org.omg.DynamicAny._DynAnyFactoryStub", true),
                new Import("_opsClass", "org.omg.DynamicAny._DynAnyStub", true),
                new Import("_opsClass", "org.omg.DynamicAny._DynArrayStub", true),
                new Import("_opsClass", "org.omg.DynamicAny._DynEnumStub", true),
                new Import("_opsClass", "org.omg.DynamicAny._DynFixedStub", true),
                new Import("_opsClass", "org.omg.DynamicAny._DynSequenceStub", true),
                new Import("_opsClass", "org.omg.DynamicAny._DynStructStub", true),
                new Import("_opsClass", "org.omg.DynamicAny._DynUnionStub", true),
                new Import("_opsClass", "org.omg.DynamicAny._DynValueStub", true),
                new Import("_opsClass", "org.omg.PortableServer._ServantActivatorStub", true),
                new Import("_opsClass", "org.omg.PortableServer._ServantLocatorStub", true),
              })
          .put(
              "BasicPasswordFieldUI",
              new Import[] {
                new Import("BasicPasswordFieldUI", "javax.swing.plaf.basic", false),
              })
          .put(
              "CharSequence",
              new Import[] {
                new Import("CharSequence", "java.lang", false),
              })
          .put(
              "EXPANDED",
              new Import[] {
                new Import("EXPANDED", "javax.accessibility.AccessibleState", true),
              })
          .put(
              "MemoryCacheImageInputStream",
              new Import[] {
                new Import("MemoryCacheImageInputStream", "javax.imageio.stream", false),
              })
          .put(
              "DATE",
              new Import[] {
                new Import("DATE", "java.sql.Types", true),
                new Import("DATE", "java.util.Calendar", true),
                new Import("DATE", "javax.management.openmbean.SimpleType", true),
                new Import("DATE", "javax.xml.datatype.DatatypeConstants", true),
              })
          .put(
              "unmodifiableList",
              new Import[] {
                new Import("unmodifiableList", "java.util.Collections", true),
              })
          .put(
              "STAPLE_DUAL_RIGHT",
              new Import[] {
                new Import("STAPLE_DUAL_RIGHT", "javax.print.attribute.standard.Finishings", true),
              })
          .put(
              "MAX_TIMEZONE_OFFSET",
              new Import[] {
                new Import("MAX_TIMEZONE_OFFSET", "javax.xml.datatype.DatatypeConstants", true),
              })
          .put(
              "STANDARD_TIME",
              new Import[] {
                new Import("STANDARD_TIME", "java.util.SimpleTimeZone", true),
              })
          .put(
              "SoundbankResource",
              new Import[] {
                new Import("SoundbankResource", "javax.sound.midi", false),
              })
          .put(
              "DATA",
              new Import[] {
                new Import("DATA", "javax.swing.text.html.HTML.Attribute", true),
              })
          .put(
              "SUCCESSFUL",
              new Import[] {
                new Import("SUCCESSFUL", "org.omg.PortableInterceptor", false),
              })
          .put(
              "PKIXCertPathValidatorResult",
              new Import[] {
                new Import("PKIXCertPathValidatorResult", "java.security.cert", false),
              })
          .put(
              "PrintRequestAttribute",
              new Import[] {
                new Import("PrintRequestAttribute", "javax.print.attribute", false),
              })
          .put(
              "POLICY_NOACTIVE",
              new Import[] {
                new Import("POLICY_NOACTIVE", "javax.security.sasl.Sasl", true),
              })
          .put(
              "MultipleComponentProfileHolder",
              new Import[] {
                new Import("MultipleComponentProfileHolder", "org.omg.IOP", false),
              })
          .put(
              "getUrlDecoder",
              new Import[] {
                new Import("getUrlDecoder", "java.util.Base64", true),
              })
          .put(
              "PASSWORD_TEXT",
              new Import[] {
                new Import("PASSWORD_TEXT", "javax.accessibility.AccessibleRole", true),
              })
          .put(
              "SynthTextFieldUI",
              new Import[] {
                new Import("SynthTextFieldUI", "javax.swing.plaf.synth", false),
              })
          .put(
              "TAGALOG",
              new Import[] {
                new Import("TAGALOG", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "Category",
              new Import[] {
                new Import("Category", "java.util.Locale", false),
              })
          .put(
              "MONOSPACED",
              new Import[] {
                new Import("MONOSPACED", "java.awt.Font", true),
              })
          .put(
              "Pack200",
              new Import[] {
                new Import("Pack200", "java.util.jar", false),
              })
          .put(
              "setFlashTime",
              new Import[] {
                new Import("setFlashTime", "javax.swing.DebugGraphics", true),
              })
          .put(
              "BasicInternalFrameUI",
              new Import[] {
                new Import("BasicInternalFrameUI", "javax.swing.plaf.basic", false),
              })
          .put(
              "RFC_1123_DATE_TIME",
              new Import[] {
                new Import("RFC_1123_DATE_TIME", "java.time.format.DateTimeFormatter", true),
              })
          .put(
              "URISyntaxException",
              new Import[] {
                new Import("URISyntaxException", "java.net", false),
              })
          .put(
              "JTextField",
              new Import[] {
                new Import("JTextField", "javax.swing", false),
              })
          .put(
              "COLSPAN",
              new Import[] {
                new Import("COLSPAN", "javax.swing.text.html.HTML.Attribute", true),
              })
          .put(
              "distanceSq",
              new Import[] {
                new Import("distanceSq", "java.awt.geom.Point2D", true),
              })
          .put(
              "DIRECTORIES_ONLY",
              new Import[] {
                new Import("DIRECTORIES_ONLY", "javax.swing.JFileChooser", true),
              })
          .put(
              "foldArguments",
              new Import[] {
                new Import("foldArguments", "java.lang.invoke.MethodHandles", true),
              })
          .put(
              "SortControl",
              new Import[] {
                new Import("SortControl", "javax.naming.ldap", false),
              })
          .put(
              "POSTURE",
              new Import[] {
                new Import("POSTURE", "java.awt.font.TextAttribute", true),
              })
          .put(
              "HEADER_ROW",
              new Import[] {
                new Import("HEADER_ROW", "javax.swing.event.TableModelEvent", true),
              })
          .put(
              "XAER_ASYNC",
              new Import[] {
                new Import("XAER_ASYNC", "javax.transaction.xa.XAException", true),
              })
          .put(
              "NOTE",
              new Import[] {
                new Import("NOTE", "java.awt.PageAttributes.MediaType", true),
              })
          .put(
              "STOPPED",
              new Import[] {
                new Import("STOPPED", "javax.print.attribute.standard.PrinterState", true),
              })
          .put(
              "LINE",
              new Import[] {
                new Import("LINE", "javax.accessibility.AccessibleExtendedText", true),
              })
          .put(
              "BootstrapMethodError",
              new Import[] {
                new Import("BootstrapMethodError", "java.lang", false),
              })
          .put(
              "LINK",
              new Import[] {
                new Import("LINK", "javax.swing.TransferHandler", true),
                new Import("LINK", "javax.swing.text.html.HTML.Attribute", true),
                new Import("LINK", "javax.swing.text.html.HTML.Tag", true),
              })
          .put(
              "ColorSelectionModel",
              new Import[] {
                new Import("ColorSelectionModel", "javax.swing.colorchooser", false),
              })
          .put(
              "icSigAToB0Tag",
              new Import[] {
                new Import("icSigAToB0Tag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "LongBuffer",
              new Import[] {
                new Import("LongBuffer", "java.nio", false),
              })
          .put(
              "SEVERE",
              new Import[] {
                new Import("SEVERE", "java.util.logging.Level", true),
              })
          .put(
              "VERTICAL_SCROLLBAR_ALWAYS",
              new Import[] {
                new Import("VERTICAL_SCROLLBAR_ALWAYS", "javax.swing.ScrollPaneConstants", true),
              })
          .put(
              "WINDOW_ICONIFY",
              new Import[] {
                new Import("WINDOW_ICONIFY", "java.awt.Event", true),
              })
          .put(
              "ObjectOutput",
              new Import[] {
                new Import("ObjectOutput", "java.io", false),
              })
          .put(
              "NamingContextPOA",
              new Import[] {
                new Import("NamingContextPOA", "org.omg.CosNaming", false),
              })
          .put(
              "ReplicateScaleFilter",
              new Import[] {
                new Import("ReplicateScaleFilter", "java.awt.image", false),
              })
          .put(
              "command",
              new Import[] {
                new Import("command", "java.lang.Compiler", true),
              })
          .put(
              "FILE_FILTER_CHANGED_PROPERTY",
              new Import[] {
                new Import("FILE_FILTER_CHANGED_PROPERTY", "javax.swing.JFileChooser", true),
              })
          .put(
              "Desktop",
              new Import[] {
                new Import("Desktop", "java.awt", false),
              })
          .put(
              "TimeLimitExceededException",
              new Import[] {
                new Import("TimeLimitExceededException", "javax.naming", false),
              })
          .put(
              "highestOneBit",
              new Import[] {
                new Import("highestOneBit", "java.lang.Integer", true),
                new Import("highestOneBit", "java.lang.Long", true),
              })
          .put(
              "RowSetMetaDataImpl",
              new Import[] {
                new Import("RowSetMetaDataImpl", "javax.sql.rowset", false),
              })
          .build();
}
