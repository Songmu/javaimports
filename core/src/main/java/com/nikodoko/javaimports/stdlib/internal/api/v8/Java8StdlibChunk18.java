// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.parser.Import;
import java.util.Map;

public class Java8StdlibChunk18 {
  static final Map<String, Import[]> CLASSES =
      new ImmutableMap.Builder<String, Import[]>()
          .put(
              "UnknownFormatFlagsException",
              new Import[] {
                new Import("UnknownFormatFlagsException", "java.util", false),
              })
          .put(
              "getFileSystemView",
              new Import[] {
                new Import("getFileSystemView", "javax.swing.filechooser.FileSystemView", true),
              })
          .put(
              "MANDAIC",
              new Import[] {
                new Import("MANDAIC", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "getFrames",
              new Import[] {
                new Import("getFrames", "java.awt.Frame", true),
              })
          .put(
              "InvalidPolicy",
              new Import[] {
                new Import("InvalidPolicy", "org.omg.PortableServer.POAPackage", false),
              })
          .put(
              "MORE_THAN_MAX_ROLE_DEGREE",
              new Import[] {
                new Import(
                    "MORE_THAN_MAX_ROLE_DEGREE", "javax.management.relation.RoleStatus", true),
              })
          .put(
              "SADDLE_STITCH",
              new Import[] {
                new Import("SADDLE_STITCH", "javax.print.attribute.standard.Finishings", true),
              })
          .put(
              "WSDL_PORT",
              new Import[] {
                new Import("WSDL_PORT", "javax.xml.ws.Endpoint", true),
                new Import("WSDL_PORT", "javax.xml.ws.handler.MessageContext", true),
              })
          .put(
              "getFlatness",
              new Import[] {
                new Import("getFlatness", "java.awt.geom.CubicCurve2D", true),
                new Import("getFlatness", "java.awt.geom.QuadCurve2D", true),
              })
          .put(
              "CJK_RADICALS_SUPPLEMENT",
              new Import[] {
                new Import("CJK_RADICALS_SUPPLEMENT", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "ContentHandler",
              new Import[] {
                new Import("ContentHandler", "java.net", false),
                new Import("ContentHandler", "org.xml.sax", false),
              })
          .put(
              "FRACTION",
              new Import[] {
                new Import("FRACTION", "java.text.NumberFormat.Field", true),
              })
          .put(
              "AccessibleTextSequence",
              new Import[] {
                new Import("AccessibleTextSequence", "javax.accessibility", false),
              })
          .put(
              "icSigPs2RenderingIntentTag",
              new Import[] {
                new Import("icSigPs2RenderingIntentTag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "InvalidNameException",
              new Import[] {
                new Import("InvalidNameException", "javax.naming", false),
              })
          .put(
              "selectionEndWordAction",
              new Import[] {
                new Import("selectionEndWordAction", "javax.swing.text.DefaultEditorKit", true),
              })
          .put(
              "MOUSE_DRAG",
              new Import[] {
                new Import("MOUSE_DRAG", "java.awt.Event", true),
              })
          .put(
              "WCharSeqHolder",
              new Import[] {
                new Import("WCharSeqHolder", "org.omg.CORBA", false),
              })
          .put(
              "FileSystemAlreadyExistsException",
              new Import[] {
                new Import("FileSystemAlreadyExistsException", "java.nio.file", false),
              })
          .put(
              "CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY",
              new Import[] {
                new Import(
                    "CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY", "javax.swing.JFileChooser", true),
              })
          .put(
              "VERTICAL_ALIGNMENT_CHANGED_PROPERTY",
              new Import[] {
                new Import(
                    "VERTICAL_ALIGNMENT_CHANGED_PROPERTY", "javax.swing.AbstractButton", true),
              })
          .put(
              "CHARACTER_SET_ENCODING",
              new Import[] {
                new Import("CHARACTER_SET_ENCODING", "javax.xml.soap.SOAPMessage", true),
              })
          .put(
              "currentThread",
              new Import[] {
                new Import("currentThread", "java.lang.Thread", true),
              })
          .put(
              "MetalSplitPaneUI",
              new Import[] {
                new Import("MetalSplitPaneUI", "javax.swing.plaf.metal", false),
              })
          .put(
              "PRIOR",
              new Import[] {
                new Import("PRIOR", "java.awt.BufferCapabilities.FlipContents", true),
              })
          .put(
              "DefaultComboBoxModel",
              new Import[] {
                new Import("DefaultComboBoxModel", "javax.swing", false),
              })
          .put(
              "TAG_TRAK",
              new Import[] {
                new Import("TAG_TRAK", "java.awt.font.OpenType", true),
              })
          .put(
              "invoker",
              new Import[] {
                new Import("invoker", "java.lang.invoke.MethodHandles", true),
              })
          .put(
              "VK_AMPERSAND",
              new Import[] {
                new Import("VK_AMPERSAND", "java.awt.event.KeyEvent", true),
              })
          .put(
              "LIGATURES_ON",
              new Import[] {
                new Import("LIGATURES_ON", "java.awt.font.TextAttribute", true),
              })
          .put(
              "UnsupportedLookAndFeelException",
              new Import[] {
                new Import("UnsupportedLookAndFeelException", "javax.swing", false),
              })
          .put(
              "TIMING_CLOCK",
              new Import[] {
                new Import("TIMING_CLOCK", "javax.sound.midi.ShortMessage", true),
              })
          .put(
              "PosixFileAttributes",
              new Import[] {
                new Import("PosixFileAttributes", "java.nio.file.attribute", false),
              })
          .put(
              "getCopyAction",
              new Import[] {
                new Import("getCopyAction", "javax.swing.TransferHandler", true),
              })
          .put(
              "ANCESTOR_REMOVED",
              new Import[] {
                new Import("ANCESTOR_REMOVED", "javax.swing.event.AncestorEvent", true),
              })
          .put(
              "icSigScreeningDescTag",
              new Import[] {
                new Import("icSigScreeningDescTag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "HTTP_PARTIAL",
              new Import[] {
                new Import("HTTP_PARTIAL", "java.net.HttpURLConnection", true),
              })
          .put(
              "MGF1ParameterSpec",
              new Import[] {
                new Import("MGF1ParameterSpec", "java.security.spec", false),
              })
          .put(
              "DEFAULT_SIZE",
              new Import[] {
                new Import("DEFAULT_SIZE", "javax.swing.GroupLayout", true),
              })
          .put(
              "HTML_CONTAINER",
              new Import[] {
                new Import("HTML_CONTAINER", "javax.accessibility.AccessibleRole", true),
              })
          .put(
              "AbstractCollection",
              new Import[] {
                new Import("AbstractCollection", "java.util", false),
              })
          .put(
              "sum",
              new Import[] {
                new Import("sum", "java.lang.Double", true),
                new Import("sum", "java.lang.Float", true),
                new Import("sum", "java.lang.Integer", true),
                new Import("sum", "java.lang.Long", true),
                new Import("sum", "javax.swing.Spring", true),
              })
          .put(
              "UNDERLINE",
              new Import[] {
                new Import("UNDERLINE", "java.awt.font.TextAttribute", true),
              })
          .put(
              "CharArrayWriter",
              new Import[] {
                new Import("CharArrayWriter", "java.io", false),
              })
          .put(
              "PipedReader",
              new Import[] {
                new Import("PipedReader", "java.io", false),
              })
          .put(
              "current",
              new Import[] {
                new Import("current", "java.util.concurrent.ThreadLocalRandom", true),
              })
          .put(
              "Temporal",
              new Import[] {
                new Import("Temporal", "java.time.temporal", false),
              })
          .put(
              "MOUSE_EXITED",
              new Import[] {
                new Import("MOUSE_EXITED", "java.awt.event.MouseEvent", true),
              })
          .put(
              "CubicCurve2D",
              new Import[] {
                new Import("CubicCurve2D", "java.awt.geom", false),
              })
          .put(
              "SYLOTI_NAGRI",
              new Import[] {
                new Import("SYLOTI_NAGRI", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "DataBufferUShort",
              new Import[] {
                new Import("DataBufferUShort", "java.awt.image", false),
              })
          .put(
              "BooleanSupplier",
              new Import[] {
                new Import("BooleanSupplier", "java.util.function", false),
              })
          .put(
              "UNLIMITED",
              new Import[] {
                new Import("UNLIMITED", "java.math.MathContext", true),
              })
          .put(
              "LONG",
              new Import[] {
                new Import("LONG", "java.text.DateFormat", true),
                new Import("LONG", "java.util.Calendar", true),
                new Import("LONG", "java.util.TimeZone", true),
                new Import("LONG", "javax.management.openmbean.SimpleType", true),
              })
          .put(
              "TypeMismatch",
              new Import[] {
                new Import("TypeMismatch", "org.omg.CORBA.DynAnyPackage", false),
                new Import("TypeMismatch", "org.omg.DynamicAny.DynAnyPackage", false),
                new Import("TypeMismatch", "org.omg.IOP.CodecPackage", false),
              })
          .put(
              "roleValueToString",
              new Import[] {
                new Import("roleValueToString", "javax.management.relation.Role", true),
              })
          .put(
              "HIRAGANA",
              new Import[] {
                new Import("HIRAGANA", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "LongBinaryOperator",
              new Import[] {
                new Import("LongBinaryOperator", "java.util.function", false),
              })
          .put(
              "VALUE_RANGE_MIN_INCLUSIVE_MASK",
              new Import[] {
                new Import(
                    "VALUE_RANGE_MIN_INCLUSIVE_MASK",
                    "javax.imageio.metadata.IIOMetadataFormat",
                    true),
              })
          .put(
              "NON_SPACING_MARK",
              new Import[] {
                new Import("NON_SPACING_MARK", "java.lang.Character", true),
              })
          .put(
              "CachedRowSet",
              new Import[] {
                new Import("CachedRowSet", "javax.sql.rowset", false),
              })
          .put(
              "VK_DOLLAR",
              new Import[] {
                new Import("VK_DOLLAR", "java.awt.event.KeyEvent", true),
              })
          .put(
              "isMiddleMouseButton",
              new Import[] {
                new Import("isMiddleMouseButton", "javax.swing.SwingUtilities", true),
              })
          .put(
              "NA_LEGAL",
              new Import[] {
                new Import("NA_LEGAL", "java.awt.PageAttributes.MediaType", true),
                new Import("NA_LEGAL", "javax.print.attribute.standard.MediaSizeName", true),
              })
          .put(
              "SQLOutput",
              new Import[] {
                new Import("SQLOutput", "java.sql", false),
              })
          .put(
              "emptyListIterator",
              new Import[] {
                new Import("emptyListIterator", "java.util.Collections", true),
              })
          .put(
              "COMPONENT",
              new Import[] {
                new Import("COMPONENT", "java.awt.font.GlyphMetrics", true),
              })
          .put(
              "ReadOnlyFileSystemException",
              new Import[] {
                new Import("ReadOnlyFileSystemException", "java.nio.file", false),
              })
          .put(
              "_dk_Sequence",
              new Import[] {
                new Import("_dk_Sequence", "org.omg.CORBA.DefinitionKind", true),
              })
          .put(
              "PortableRemoteObject",
              new Import[] {
                new Import("PortableRemoteObject", "javax.rmi", false),
              })
          .put(
              "NO_CONTEXT",
              new Import[] {
                new Import("NO_CONTEXT", "org.ietf.jgss.GSSException", true),
              })
          .put(
              "RuleBasedCollator",
              new Import[] {
                new Import("RuleBasedCollator", "java.text", false),
              })
          .put(
              "LOWERCASE_LETTER",
              new Import[] {
                new Import("LOWERCASE_LETTER", "java.lang.Character", true),
              })
          .put(
              "ClientRequestInterceptorOperations",
              new Import[] {
                new Import(
                    "ClientRequestInterceptorOperations", "org.omg.PortableInterceptor", false),
              })
          .put(
              "PRINTER_STOPPED",
              new Import[] {
                new Import(
                    "PRINTER_STOPPED", "javax.print.attribute.standard.JobStateReason", true),
              })
          .put(
              "HTTP_PRECON_FAILED",
              new Import[] {
                new Import("HTTP_PRECON_FAILED", "java.net.HttpURLConnection", true),
              })
          .put(
              "frequency",
              new Import[] {
                new Import("frequency", "java.util.Collections", true),
              })
          .put(
              "APPLY_REVERB",
              new Import[] {
                new Import("APPLY_REVERB", "javax.sound.sampled.BooleanControl.Type", true),
              })
          .put(
              "HyperlinkListener",
              new Import[] {
                new Import("HyperlinkListener", "javax.swing.event", false),
              })
          .put(
              "PortableRemoteObjectDelegate",
              new Import[] {
                new Import("PortableRemoteObjectDelegate", "javax.rmi.CORBA", false),
              })
          .put(
              "currentGroupID",
              new Import[] {
                new Import("currentGroupID", "java.rmi.activation.ActivationGroup", true),
              })
          .put(
              "VALUE_FRACTIONALMETRICS_OFF",
              new Import[] {
                new Import("VALUE_FRACTIONALMETRICS_OFF", "java.awt.RenderingHints", true),
              })
          .put(
              "RenderableImageProducer",
              new Import[] {
                new Import("RenderableImageProducer", "java.awt.image.renderable", false),
              })
          .put(
              "BasicHTML",
              new Import[] {
                new Import("BasicHTML", "javax.swing.plaf.basic", false),
              })
          .put(
              "generate",
              new Import[] {
                new Import("generate", "java.util.stream.DoubleStream", true),
                new Import("generate", "java.util.stream.IntStream", true),
                new Import("generate", "java.util.stream.LongStream", true),
                new Import("generate", "java.util.stream.Stream", true),
              })
          .put(
              "Authenticator",
              new Import[] {
                new Import("Authenticator", "java.net", false),
              })
          .put(
              "UnknownAnnotationValueException",
              new Import[] {
                new Import("UnknownAnnotationValueException", "javax.lang.model.element", false),
              })
          .put(
              "RuntimeOperationsException",
              new Import[] {
                new Import("RuntimeOperationsException", "javax.management", false),
              })
          .put(
              "getFileChooserHomeFolderIcon",
              new Import[] {
                new Import(
                    "getFileChooserHomeFolderIcon",
                    "javax.swing.plaf.metal.MetalIconFactory",
                    true),
              })
          .put(
              "setFlashCount",
              new Import[] {
                new Import("setFlashCount", "javax.swing.DebugGraphics", true),
              })
          .put(
              "ISO_A4_WHITE",
              new Import[] {
                new Import("ISO_A4_WHITE", "javax.print.attribute.standard.MediaName", true),
              })
          .put(
              "RowSorter",
              new Import[] {
                new Import("RowSorter", "javax.swing", false),
              })
          .put(
              "PROPERTY",
              new Import[] {
                new Import("PROPERTY", "org.w3c.dom.bootstrap.DOMImplementationRegistry", true),
              })
          .put(
              "getAccessibleIndexInParent",
              new Import[] {
                new Import("getAccessibleIndexInParent", "javax.swing.SwingUtilities", true),
              })
          .put(
              "DnDConstants",
              new Import[] {
                new Import("DnDConstants", "java.awt.dnd", false),
              })
          .put(
              "RUN_DIRECTION_RTL",
              new Import[] {
                new Import("RUN_DIRECTION_RTL", "java.awt.font.TextAttribute", true),
              })
          .put(
              "LEAD_EQUALS",
              new Import[] {
                new Import("LEAD_EQUALS", "javax.swing.text.TabStop", true),
              })
          .put(
              "UNASSIGNED",
              new Import[] {
                new Import("UNASSIGNED", "java.lang.Character", true),
              })
          .put(
              "MARGIN",
              new Import[] {
                new Import("MARGIN", "javax.swing.text.html.CSS.Attribute", true),
              })
          .put(
              "SourceLocator",
              new Import[] {
                new Import("SourceLocator", "javax.xml.transform", false),
              })
          .put(
              "ActivationGroupDesc",
              new Import[] {
                new Import("ActivationGroupDesc", "java.rmi.activation", false),
              })
          .put(
              "SELECTION",
              new Import[] {
                new Import("SELECTION", "java.awt.JobAttributes.DefaultSelectionType", true),
              })
          .put(
              "ReflectPermission",
              new Import[] {
                new Import("ReflectPermission", "java.lang.reflect", false),
              })
          .put(
              "NA_9X12_ENVELOPE",
              new Import[] {
                new Import("NA_9X12_ENVELOPE", "java.awt.PageAttributes.MediaType", true),
                new Import(
                    "NA_9X12_ENVELOPE", "javax.print.attribute.standard.MediaSizeName", true),
              })
          .put(
              "DocFlavor",
              new Import[] {
                new Import("DocFlavor", "javax.print", false),
              })
          .put(
              "JobOriginatingUserName",
              new Import[] {
                new Import("JobOriginatingUserName", "javax.print.attribute.standard", false),
              })
          .put(
              "Certificate",
              new Import[] {
                new Import("Certificate", "java.security", false),
                new Import("Certificate", "java.security.cert", false),
                new Import("Certificate", "javax.security.cert", false),
              })
          .put(
              "MulticastSocket",
              new Import[] {
                new Import("MulticastSocket", "java.net", false),
              })
          .put(
              "JMXConnectorFactory",
              new Import[] {
                new Import("JMXConnectorFactory", "javax.management.remote", false),
              })
          .put(
              "getStaticAttributeKey",
              new Import[] {
                new Import("getStaticAttributeKey", "javax.swing.text.StyleContext", true),
              })
          .put(
              "TAG_MMFX",
              new Import[] {
                new Import("TAG_MMFX", "java.awt.font.OpenType", true),
              })
          .put(
              "Driver",
              new Import[] {
                new Import("Driver", "java.sql", false),
              })
          .put(
              "DynUnion",
              new Import[] {
                new Import("DynUnion", "org.omg.CORBA", false),
                new Import("DynUnion", "org.omg.DynamicAny", false),
              })
          .put(
              "cbrt",
              new Import[] {
                new Import("cbrt", "java.lang.Math", true),
                new Import("cbrt", "java.lang.StrictMath", true),
              })
          .put(
              "BASE",
              new Import[] {
                new Import("BASE", "javax.swing.text.html.HTML.Tag", true),
              })
          .put(
              "ROW_HEADER",
              new Import[] {
                new Import("ROW_HEADER", "javax.accessibility.AccessibleRole", true),
                new Import("ROW_HEADER", "javax.swing.ScrollPaneConstants", true),
              })
          .put(
              "SimpleDoc",
              new Import[] {
                new Import("SimpleDoc", "javax.print", false),
              })
          .put(
              "KEY_LAST",
              new Import[] {
                new Import("KEY_LAST", "java.awt.event.KeyEvent", true),
              })
          .put(
              "VetoableChangeSupport",
              new Import[] {
                new Import("VetoableChangeSupport", "java.beans", false),
              })
          .put(
              "appendTo",
              new Import[] {
                new Import("appendTo", "java.lang.ProcessBuilder.Redirect", true),
              })
          .put(
              "EXECUTIVE",
              new Import[] {
                new Import("EXECUTIVE", "java.awt.PageAttributes.MediaType", true),
                new Import("EXECUTIVE", "javax.print.attribute.standard.MediaSizeName", true),
                new Import("EXECUTIVE", "javax.print.attribute.standard.MediaSize.Other", true),
              })
          .put(
              "ALL_COLUMNS",
              new Import[] {
                new Import("ALL_COLUMNS", "javax.swing.event.TableModelEvent", true),
              })
          .put(
              "NumericShaper",
              new Import[] {
                new Import("NumericShaper", "java.awt.font", false),
              })
          .put(
              "getLogStream",
              new Import[] {
                new Import("getLogStream", "java.sql.DriverManager", true),
              })
          .put(
              "IORHelper",
              new Import[] {
                new Import("IORHelper", "org.omg.IOP", false),
              })
          .put(
              "ACCESSIBLE_VISIBLE_DATA_PROPERTY",
              new Import[] {
                new Import(
                    "ACCESSIBLE_VISIBLE_DATA_PROPERTY",
                    "javax.accessibility.AccessibleContext",
                    true),
              })
          .put(
              "CHINA",
              new Import[] {
                new Import("CHINA", "java.util.Locale", true),
              })
          .put(
              "RCDATA",
              new Import[] {
                new Import("RCDATA", "javax.swing.text.html.parser.DTDConstants", true),
              })
          .put(
              "MenuItem",
              new Import[] {
                new Import("MenuItem", "java.awt", false),
              })
          .put(
              "VM_ABSTRACT",
              new Import[] {
                new Import("VM_ABSTRACT", "org.omg.CORBA", false),
              })
          .put(
              "IMAGE_RESTORED",
              new Import[] {
                new Import("IMAGE_RESTORED", "java.awt.image.VolatileImage", true),
              })
          .put(
              "XML_NS_URI",
              new Import[] {
                new Import("XML_NS_URI", "javax.xml.XMLConstants", true),
              })
          .put(
              "PASSWORD_FIELD",
              new Import[] {
                new Import("PASSWORD_FIELD", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "FOLIO",
              new Import[] {
                new Import("FOLIO", "java.awt.PageAttributes.MediaType", true),
                new Import("FOLIO", "javax.print.attribute.standard.MediaSizeName", true),
                new Import("FOLIO", "javax.print.attribute.standard.MediaSize.Other", true),
              })
          .put(
              "RSA_SHA1",
              new Import[] {
                new Import("RSA_SHA1", "javax.xml.crypto.dsig.SignatureMethod", true),
              })
          .put(
              "TIMESTAMP_WITH_TIMEZONE",
              new Import[] {
                new Import("TIMESTAMP_WITH_TIMEZONE", "java.sql.Types", true),
              })
          .put(
              "getLength",
              new Import[] {
                new Import("getLength", "java.lang.reflect.Array", true),
              })
          .put(
              "WINDOW_STATE_EVENT_MASK",
              new Import[] {
                new Import("WINDOW_STATE_EVENT_MASK", "java.awt.AWTEvent", true),
              })
          .put(
              "allHtmlFlavor",
              new Import[] {
                new Import("allHtmlFlavor", "java.awt.datatransfer.DataFlavor", true),
              })
          .put(
              "SrcOut",
              new Import[] {
                new Import("SrcOut", "java.awt.AlphaComposite", true),
              })
          .put(
              "createChildren",
              new Import[] {
                new Import("createChildren", "javax.swing.JTree.DynamicUtilTreeNode", true),
              })
          .put(
              "Robot",
              new Import[] {
                new Import("Robot", "java.awt", false),
              })
          .put(
              "XMLNS",
              new Import[] {
                new Import("XMLNS", "javax.xml.crypto.dsig.XMLSignature", true),
                new Import("XMLNS", "org.xml.sax.helpers.NamespaceSupport", true),
              })
          .put(
              "UnknownEncodingHelper",
              new Import[] {
                new Import("UnknownEncodingHelper", "org.omg.IOP.CodecFactoryPackage", false),
              })
          .put(
              "MimetypesFileTypeMap",
              new Import[] {
                new Import("MimetypesFileTypeMap", "javax.activation", false),
              })
          .put(
              "ModelMBean",
              new Import[] {
                new Import("ModelMBean", "javax.management.modelmbean", false),
              })
          .put(
              "LIST_STYLE",
              new Import[] {
                new Import("LIST_STYLE", "javax.swing.text.html.CSS.Attribute", true),
              })
          .put(
              "getRegistry",
              new Import[] {
                new Import("getRegistry", "java.rmi.registry.LocateRegistry", true),
              })
          .put(
              "SocketHandler",
              new Import[] {
                new Import("SocketHandler", "java.util.logging", false),
              })
          .put(
              "ALLOWED_CLASSNAMES_LIST",
              new Import[] {
                new Import("ALLOWED_CLASSNAMES_LIST", "javax.management.openmbean.OpenType", true),
              })
          .put(
              "UNSUPPORTED_POLICY_VALUE",
              new Import[] {
                new Import("UNSUPPORTED_POLICY_VALUE", "org.omg.CORBA", false),
              })
          .put(
              "SECURITY_PROTOCOL",
              new Import[] {
                new Import("SECURITY_PROTOCOL", "javax.naming.Context", true),
              })
          .put(
              "BasicBorders",
              new Import[] {
                new Import("BasicBorders", "javax.swing.plaf.basic", false),
              })
          .put(
              "XA_RBDEADLOCK",
              new Import[] {
                new Import("XA_RBDEADLOCK", "javax.transaction.xa.XAException", true),
              })
          .put(
              "ActivationSystem",
              new Import[] {
                new Import("ActivationSystem", "java.rmi.activation", false),
              })
          .put(
              "CertStoreParameters",
              new Import[] {
                new Import("CertStoreParameters", "java.security.cert", false),
              })
          .put(
              "HTTP_PAYMENT_REQUIRED",
              new Import[] {
                new Import("HTTP_PAYMENT_REQUIRED", "java.net.HttpURLConnection", true),
              })
          .put(
              "dk_Constant",
              new Import[] {
                new Import("dk_Constant", "org.omg.CORBA.DefinitionKind", true),
              })
          .put(
              "IORInterceptorOperations",
              new Import[] {
                new Import("IORInterceptorOperations", "org.omg.PortableInterceptor", false),
              })
          .put(
              "TOOL_TIP_TEXT_KEY",
              new Import[] {
                new Import("TOOL_TIP_TEXT_KEY", "javax.swing.JComponent", true),
              })
          .put(
              "AccessibleExtendedText",
              new Import[] {
                new Import("AccessibleExtendedText", "javax.accessibility", false),
              })
          .put(
              "icSigSpace2CLR",
              new Import[] {
                new Import("icSigSpace2CLR", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "icSigRedMatrixColumnTag",
              new Import[] {
                new Import("icSigRedMatrixColumnTag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "parseQName",
              new Import[] {
                new Import("parseQName", "javax.xml.bind.DatatypeConverter", true),
              })
          .put(
              "BORDER_LEFT_WIDTH",
              new Import[] {
                new Import("BORDER_LEFT_WIDTH", "javax.swing.text.html.CSS.Attribute", true),
              })
          .put(
              "VersionSpecHelper",
              new Import[] {
                new Import("VersionSpecHelper", "org.omg.CORBA", false),
              })
          .put(
              "DISABLED_SELECTED_ICON_CHANGED_PROPERTY",
              new Import[] {
                new Import(
                    "DISABLED_SELECTED_ICON_CHANGED_PROPERTY", "javax.swing.AbstractButton", true),
              })
          .put(
              "UNICODE_STREAM_PARAM",
              new Import[] {
                new Import("UNICODE_STREAM_PARAM", "javax.sql.rowset.BaseRowSet", true),
              })
          .put(
              "WORD",
              new Import[] {
                new Import("WORD", "javax.accessibility.AccessibleText", true),
              })
          .put(
              "AFTER_LINE_ENDS",
              new Import[] {
                new Import("AFTER_LINE_ENDS", "java.awt.BorderLayout", true),
              })
          .put(
              "LinkOption",
              new Import[] {
                new Import("LinkOption", "java.nio.file", false),
              })
          .put(
              "BoldAction",
              new Import[] {
                new Import("BoldAction", "javax.swing.text.StyledEditorKit", false),
              })
          .put(
              "CONTROL_SHADOW",
              new Import[] {
                new Import("CONTROL_SHADOW", "java.awt.SystemColor", true),
              })
          .put(
              "icHdrAttributes",
              new Import[] {
                new Import("icHdrAttributes", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "NOBUTTON",
              new Import[] {
                new Import("NOBUTTON", "java.awt.event.MouseEvent", true),
              })
          .put(
              "DelegationPermission",
              new Import[] {
                new Import("DelegationPermission", "javax.security.auth.kerberos", false),
              })
          .put(
              "UPPER_LEADING_CORNER",
              new Import[] {
                new Import("UPPER_LEADING_CORNER", "javax.swing.ScrollPaneConstants", true),
              })
          .put(
              "W3CEndpointReferenceBuilder",
              new Import[] {
                new Import("W3CEndpointReferenceBuilder", "javax.xml.ws.wsaddressing", false),
              })
          .put(
              "CUNEIFORM",
              new Import[] {
                new Import("CUNEIFORM", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "FULLWIDTH_LATIN",
              new Import[] {
                new Import("FULLWIDTH_LATIN", "java.awt.im.InputSubset", true),
              })
          .put(
              "createLineBorder",
              new Import[] {
                new Import("createLineBorder", "javax.swing.BorderFactory", true),
              })
          .put(
              "PROVIDER_URL",
              new Import[] {
                new Import("PROVIDER_URL", "javax.naming.Context", true),
              })
          .put(
              "KAKU_20",
              new Import[] {
                new Import("KAKU_20", "javax.print.attribute.standard.MediaSize.JIS", true),
              })
          .put(
              "Package",
              new Import[] {
                new Import("Package", "java.lang", false),
              })
          .put(
              "SNI_HOST_NAME",
              new Import[] {
                new Import("SNI_HOST_NAME", "javax.net.ssl.StandardConstants", true),
              })
          .put(
              "SINGLE_DOCUMENT_NEW_SHEET",
              new Import[] {
                new Import(
                    "SINGLE_DOCUMENT_NEW_SHEET",
                    "javax.print.attribute.standard.MultipleDocumentHandling",
                    true),
              })
          .put(
              "_PARAM_OUT",
              new Import[] {
                new Import("_PARAM_OUT", "org.omg.CORBA.ParameterMode", true),
              })
          .put(
              "ConnectionEventListener",
              new Import[] {
                new Import("ConnectionEventListener", "javax.sql", false),
              })
          .put(
              "WEIGHT_ULTRABOLD",
              new Import[] {
                new Import("WEIGHT_ULTRABOLD", "java.awt.font.TextAttribute", true),
              })
          .put(
              "Base64",
              new Import[] {
                new Import("Base64", "java.util", false),
              })
          .put(
              "TAG_MMSD",
              new Import[] {
                new Import("TAG_MMSD", "java.awt.font.OpenType", true),
              })
          .put(
              "range",
              new Import[] {
                new Import("range", "java.util.EnumSet", true),
                new Import("range", "java.util.stream.IntStream", true),
                new Import("range", "java.util.stream.LongStream", true),
              })
          .put(
              "IllegalBlockSizeException",
              new Import[] {
                new Import("IllegalBlockSizeException", "javax.crypto", false),
              })
          .put(
              "TreeSelectionListener",
              new Import[] {
                new Import("TreeSelectionListener", "javax.swing.event", false),
              })
          .put(
              "_dk_Typedef",
              new Import[] {
                new Import("_dk_Typedef", "org.omg.CORBA.DefinitionKind", true),
              })
          .put(
              "ModelMBeanInfo",
              new Import[] {
                new Import("ModelMBeanInfo", "javax.management.modelmbean", false),
              })
          .put(
              "AttributeException",
              new Import[] {
                new Import("AttributeException", "javax.print", false),
              })
          .put(
              "YI_SYLLABLES",
              new Import[] {
                new Import("YI_SYLLABLES", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "getBidiLevel",
              new Import[] {
                new Import("getBidiLevel", "javax.swing.text.StyleConstants", true),
              })
          .put(
              "OUTBOUND_MESSAGE_ATTACHMENTS",
              new Import[] {
                new Import(
                    "OUTBOUND_MESSAGE_ATTACHMENTS", "javax.xml.ws.handler.MessageContext", true),
              })
          .put(
              "ITALIAN",
              new Import[] {
                new Import("ITALIAN", "java.util.Locale", true),
              })
          .put(
              "getWindowAncestor",
              new Import[] {
                new Import("getWindowAncestor", "javax.swing.SwingUtilities", true),
              })
          .put(
              "NotFoundReason",
              new Import[] {
                new Import("NotFoundReason", "org.omg.CosNaming.NamingContextPackage", false),
              })
          .put(
              "TOOL_BAR_DRAG_WINDOW",
              new Import[] {
                new Import("TOOL_BAR_DRAG_WINDOW", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "_not_object",
              new Import[] {
                new Import(
                    "_not_object", "org.omg.CosNaming.NamingContextPackage.NotFoundReason", true),
              })
          .put(
              "SUNDANESE_SUPPLEMENT",
              new Import[] {
                new Import("SUNDANESE_SUPPLEMENT", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "MIN_EXPONENT",
              new Import[] {
                new Import("MIN_EXPONENT", "java.lang.Double", true),
                new Import("MIN_EXPONENT", "java.lang.Float", true),
              })
          .put(
              "getPropertyChangeListeners",
              new Import[] {
                new Import("getPropertyChangeListeners", "javax.swing.UIManager", true),
              })
          .put(
              "DragGestureListener",
              new Import[] {
                new Import("DragGestureListener", "java.awt.dnd", false),
              })
          .put(
              "LAST_LINE_START",
              new Import[] {
                new Import("LAST_LINE_START", "java.awt.GridBagConstraints", true),
              })
          .put(
              "TABBED_PANE_CONTENT",
              new Import[] {
                new Import("TABBED_PANE_CONTENT", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "filter",
              new Import[] {
                new Import("filter", "java.util.Locale", true),
              })
          .put(
              "RoleInfoNotFoundException",
              new Import[] {
                new Import("RoleInfoNotFoundException", "javax.management.relation", false),
              })
          .put(
              "SINGLEFRAME",
              new Import[] {
                new Import("SINGLEFRAME", "java.awt.image.ImageConsumer", true),
              })
          .put(
              "JOB_COMPLETED_WITH_WARNINGS",
              new Import[] {
                new Import(
                    "JOB_COMPLETED_WITH_WARNINGS",
                    "javax.print.attribute.standard.JobStateReason",
                    true),
              })
          .put(
              "registerEditor",
              new Import[] {
                new Import("registerEditor", "java.beans.PropertyEditorManager", true),
              })
          .put(
              "DocumentView",
              new Import[] {
                new Import("DocumentView", "org.w3c.dom.views", false),
              })
          .put(
              "STOPPED_PARTLY",
              new Import[] {
                new Import(
                    "STOPPED_PARTLY", "javax.print.attribute.standard.PrinterStateReason", true),
              })
          .put(
              "getAvailableCalendarTypes",
              new Import[] {
                new Import("getAvailableCalendarTypes", "java.util.Calendar", true),
              })
          .put(
              "SUPPLEMENTAL_ARROWS_A",
              new Import[] {
                new Import("SUPPLEMENTAL_ARROWS_A", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "MODE_EXPLICIT",
              new Import[] {
                new Import("MODE_EXPLICIT", "javax.imageio.ImageWriteParam", true),
              })
          .put(
              "UnknownEntityException",
              new Import[] {
                new Import("UnknownEntityException", "javax.lang.model", false),
              })
          .put(
              "_BindingIteratorStub",
              new Import[] {
                new Import("_BindingIteratorStub", "org.omg.CosNaming", false),
              })
          .put(
              "CJK_COMPATIBILITY_IDEOGRAPHS",
              new Import[] {
                new Import(
                    "CJK_COMPATIBILITY_IDEOGRAPHS", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "SENTENCE",
              new Import[] {
                new Import("SENTENCE", "javax.accessibility.AccessibleText", true),
              })
          .put(
              "ManageReferralControl",
              new Import[] {
                new Import("ManageReferralControl", "javax.naming.ldap", false),
              })
          .put(
              "HTML",
              new Import[] {
                new Import("HTML", "javax.swing.text.html", false),
                new Import("HTML", "javax.swing.text.html.HTML.Tag", true),
              })
          .put(
              "SUPPLEMENTAL_ARROWS_B",
              new Import[] {
                new Import("SUPPLEMENTAL_ARROWS_B", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "TargetDataLine",
              new Import[] {
                new Import("TargetDataLine", "javax.sound.sampled", false),
              })
          .put(
              "SPECIFICATION_VERSION",
              new Import[] {
                new Import("SPECIFICATION_VERSION", "java.util.jar.Attributes.Name", true),
              })
          .put(
              "checkedNavigableMap",
              new Import[] {
                new Import("checkedNavigableMap", "java.util.Collections", true),
              })
          .put(
              "SysexMessage",
              new Import[] {
                new Import("SysexMessage", "javax.sound.midi", false),
              })
          .put(
              "VK_CONTEXT_MENU",
              new Import[] {
                new Import("VK_CONTEXT_MENU", "java.awt.event.KeyEvent", true),
              })
          .put(
              "getDefaultAlgorithm",
              new Import[] {
                new Import("getDefaultAlgorithm", "javax.net.ssl.KeyManagerFactory", true),
                new Import("getDefaultAlgorithm", "javax.net.ssl.TrustManagerFactory", true),
              })
          .put(
              "BORDER_LEFT_COLOR",
              new Import[] {
                new Import("BORDER_LEFT_COLOR", "javax.swing.text.html.CSS.Attribute", true),
              })
          .put(
              "Member",
              new Import[] {
                new Import("Member", "java.lang.reflect", false),
              })
          .put(
              "_dk_ValueMember",
              new Import[] {
                new Import("_dk_ValueMember", "org.omg.CORBA.DefinitionKind", true),
              })
          .put(
              "DocumentName",
              new Import[] {
                new Import("DocumentName", "javax.print.attribute.standard", false),
              })
          .put(
              "tan",
              new Import[] {
                new Import("tan", "java.lang.Math", true),
                new Import("tan", "java.lang.StrictMath", true),
              })
          .put(
              "DISABLED_ICON_CHANGED_PROPERTY",
              new Import[] {
                new Import("DISABLED_ICON_CHANGED_PROPERTY", "javax.swing.AbstractButton", true),
              })
          .put(
              "NULL",
              new Import[] {
                new Import("NULL", "java.sql.Types", true),
              })
          .put(
              "setLoginTimeout",
              new Import[] {
                new Import("setLoginTimeout", "java.sql.DriverManager", true),
              })
          .put(
              "SEPARATOR",
              new Import[] {
                new Import("SEPARATOR", "javax.accessibility.AccessibleRole", true),
                new Import("SEPARATOR", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "ServantNotActiveHelper",
              new Import[] {
                new Import("ServantNotActiveHelper", "org.omg.PortableServer.POAPackage", false),
              })
          .put(
              "IORInfo",
              new Import[] {
                new Import("IORInfo", "org.omg.PortableInterceptor", false),
              })
          .put(
              "showInternalOptionDialog",
              new Import[] {
                new Import("showInternalOptionDialog", "javax.swing.JOptionPane", true),
              })
          .put(
              "PI_DISABLE_OUTPUT_ESCAPING",
              new Import[] {
                new Import("PI_DISABLE_OUTPUT_ESCAPING", "javax.xml.transform.Result", true),
              })
          .put(
              "ACTION_COPY",
              new Import[] {
                new Import("ACTION_COPY", "java.awt.dnd.DnDConstants", true),
              })
          .put(
              "getPrimaryControlInfo",
              new Import[] {
                new Import(
                    "getPrimaryControlInfo", "javax.swing.plaf.metal.MetalLookAndFeel", true),
              })
          .put(
              "getAlgorithmProperty",
              new Import[] {
                new Import("getAlgorithmProperty", "java.security.Security", true),
              })
          .put(
              "registerEditorKitForContentType",
              new Import[] {
                new Import("registerEditorKitForContentType", "javax.swing.JEditorPane", true),
              })
          .put(
              "JAXBIntrospector",
              new Import[] {
                new Import("JAXBIntrospector", "javax.xml.bind", false),
              })
          .put(
              "MENU_BAR",
              new Import[] {
                new Import("MENU_BAR", "javax.accessibility.AccessibleRole", true),
                new Import("MENU_BAR", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "ValueRange",
              new Import[] {
                new Import("ValueRange", "java.time.temporal", false),
              })
          .put(
              "TOBOTTOM_TOLEFT",
              new Import[] {
                new Import(
                    "TOBOTTOM_TOLEFT",
                    "javax.print.attribute.standard.PresentationDirection",
                    true),
              })
          .put(
              "InputMethodContext",
              new Import[] {
                new Import("InputMethodContext", "java.awt.im.spi", false),
              })
          .put(
              "_Remote_Stub",
              new Import[] {
                new Import("_Remote_Stub", "org.omg.stub.java.rmi", false),
              })
          .put(
              "CompletionStatusHelper",
              new Import[] {
                new Import("CompletionStatusHelper", "org.omg.CORBA", false),
              })
          .put(
              "parseDate",
              new Import[] {
                new Import("parseDate", "javax.xml.bind.DatatypeConverter", true),
              })
          .put(
              "WINDOW_ACTIVATED",
              new Import[] {
                new Import("WINDOW_ACTIVATED", "java.awt.event.WindowEvent", true),
              })
          .put(
              "VM_TRUNCATABLE",
              new Import[] {
                new Import("VM_TRUNCATABLE", "org.omg.CORBA", false),
              })
          .put(
              "DRAG_LAYER",
              new Import[] {
                new Import("DRAG_LAYER", "javax.swing.JLayeredPane", true),
              })
          .put(
              "MBeanException",
              new Import[] {
                new Import("MBeanException", "javax.management", false),
              })
          .put(
              "WIND_NON_ZERO",
              new Import[] {
                new Import("WIND_NON_ZERO", "java.awt.geom.Path2D", true),
                new Import("WIND_NON_ZERO", "java.awt.geom.PathIterator", true),
              })
          .put(
              "ALLOW_UNASSIGNED",
              new Import[] {
                new Import("ALLOW_UNASSIGNED", "java.net.IDN", true),
              })
          .put(
              "Chromaticity",
              new Import[] {
                new Import("Chromaticity", "javax.print.attribute.standard", false),
              })
          .put(
              "UnsolicitedNotificationListener",
              new Import[] {
                new Import("UnsolicitedNotificationListener", "javax.naming.ldap", false),
              })
          .put(
              "verifyCategoryForValue",
              new Import[] {
                new Import(
                    "verifyCategoryForValue", "javax.print.attribute.AttributeSetUtilities", true),
              })
          .put(
              "getInternalFrameCloseIcon",
              new Import[] {
                new Import(
                    "getInternalFrameCloseIcon", "javax.swing.plaf.metal.MetalIconFactory", true),
              })
          .put(
              "JInternalFrame",
              new Import[] {
                new Import("JInternalFrame", "javax.swing", false),
              })
          .put(
              "ACCEPTING_JOBS",
              new Import[] {
                new Import(
                    "ACCEPTING_JOBS",
                    "javax.print.attribute.standard.PrinterIsAcceptingJobs",
                    true),
              })
          .put(
              "ofTotalSeconds",
              new Import[] {
                new Import("ofTotalSeconds", "java.time.ZoneOffset", true),
              })
          .put(
              "AbstractFormatterFactory",
              new Import[] {
                new Import("AbstractFormatterFactory", "javax.swing.JFormattedTextField", false),
              })
          .put(
              "ElementChange",
              new Import[] {
                new Import("ElementChange", "javax.swing.event.DocumentEvent", false),
              })
          .put(
              "FormView",
              new Import[] {
                new Import("FormView", "javax.swing.text.html", false),
              })
          .put(
              "Detail",
              new Import[] {
                new Import("Detail", "javax.xml.soap", false),
              })
          .put(
              "icICCAbsoluteColorimetric",
              new Import[] {
                new Import("icICCAbsoluteColorimetric", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "setDatagramSocketImplFactory",
              new Import[] {
                new Import("setDatagramSocketImplFactory", "java.net.DatagramSocket", true),
              })
          .put(
              "FlowStrategy",
              new Import[] {
                new Import("FlowStrategy", "javax.swing.text.FlowView", false),
              })
          .put(
              "ImmutableDescriptor",
              new Import[] {
                new Import("ImmutableDescriptor", "javax.management", false),
              })
          .put(
              "FileWriter",
              new Import[] {
                new Import("FileWriter", "java.io", false),
              })
          .put(
              "MutableCallSite",
              new Import[] {
                new Import("MutableCallSite", "java.lang.invoke", false),
              })
          .put(
              "ANY",
              new Import[] {
                new Import("ANY", "javax.swing.text.html.parser.DTDConstants", true),
              })
          .put(
              "SUPERSCRIPT_SUPER",
              new Import[] {
                new Import("SUPERSCRIPT_SUPER", "java.awt.font.TextAttribute", true),
              })
          .put(
              "NO_MORE_EVENTS",
              new Import[] {
                new Import("NO_MORE_EVENTS", "javax.print.event.PrintJobEvent", true),
              })
          .put(
              "PropertyChangeListenerProxy",
              new Import[] {
                new Import("PropertyChangeListenerProxy", "java.beans", false),
              })
          .put(
              "XmlTransient",
              new Import[] {
                new Import("XmlTransient", "javax.xml.bind.annotation", false),
              })
          .put(
              "selectionBeginAction",
              new Import[] {
                new Import("selectionBeginAction", "javax.swing.text.DefaultEditorKit", true),
              })
          .put(
              "ANCIENT_GREEK_NUMBERS",
              new Import[] {
                new Import("ANCIENT_GREEK_NUMBERS", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "Engineering",
              new Import[] {
                new Import("Engineering", "javax.print.attribute.standard.MediaSize", false),
              })
          .put(
              "DynAnyFactoryHelper",
              new Import[] {
                new Import("DynAnyFactoryHelper", "org.omg.DynamicAny", false),
              })
          .put(
              "VEDIC_EXTENSIONS",
              new Import[] {
                new Import("VEDIC_EXTENSIONS", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "classModifiers",
              new Import[] {
                new Import("classModifiers", "java.lang.reflect.Modifier", true),
              })
          .put(
              "newAudioClip",
              new Import[] {
                new Import("newAudioClip", "java.applet.Applet", true),
              })
          .put(
              "CONTROL_LT_HIGHLIGHT",
              new Import[] {
                new Import("CONTROL_LT_HIGHLIGHT", "java.awt.SystemColor", true),
              })
          .put(
              "TEXT_NODE",
              new Import[] {
                new Import("TEXT_NODE", "org.w3c.dom.Node", true),
              })
          .put(
              "KAKU_A4",
              new Import[] {
                new Import("KAKU_A4", "javax.print.attribute.standard.MediaSize.JIS", true),
              })
          .put(
              "ObjLongConsumer",
              new Import[] {
                new Import("ObjLongConsumer", "java.util.function", false),
              })
          .put(
              "ResourceBundleControlProvider",
              new Import[] {
                new Import("ResourceBundleControlProvider", "java.util.spi", false),
              })
          .put(
              "ACTION_NONE",
              new Import[] {
                new Import("ACTION_NONE", "java.awt.dnd.DnDConstants", true),
              })
          .put(
              "_tk_longdouble",
              new Import[] {
                new Import("_tk_longdouble", "org.omg.CORBA.TCKind", true),
              })
          .put(
              "POLICY_NOPLAINTEXT",
              new Import[] {
                new Import("POLICY_NOPLAINTEXT", "javax.security.sasl.Sasl", true),
              })
          .put(
              "XMLReader",
              new Import[] {
                new Import("XMLReader", "org.xml.sax", false),
              })
          .put(
              "B10",
              new Import[] {
                new Import("B10", "java.awt.PageAttributes.MediaType", true),
                new Import("B10", "javax.print.attribute.standard.MediaSize.ISO", true),
                new Import("B10", "javax.print.attribute.standard.MediaSize.JIS", true),
              })
          .put(
              "getControlInfo",
              new Import[] {
                new Import("getControlInfo", "javax.swing.plaf.metal.MetalLookAndFeel", true),
              })
          .put(
              "DATE_FIELD",
              new Import[] {
                new Import("DATE_FIELD", "java.text.DateFormat", true),
              })
          .put(
              "endLineAction",
              new Import[] {
                new Import("endLineAction", "javax.swing.text.DefaultEditorKit", true),
              })
          .put(
              "InputStreamReader",
              new Import[] {
                new Import("InputStreamReader", "java.io", false),
              })
          .put(
              "ConcurrentSkipListSet",
              new Import[] {
                new Import("ConcurrentSkipListSet", "java.util.concurrent", false),
              })
          .put(
              "NoType",
              new Import[] {
                new Import("NoType", "javax.lang.model.type", false),
              })
          .put(
              "getTabbedTextWidth",
              new Import[] {
                new Import("getTabbedTextWidth", "javax.swing.text.Utilities", true),
              })
          .put(
              "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING",
              new Import[] {
                new Import("DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", "java.lang.Character", true),
              })
          .put(
              "setForeground",
              new Import[] {
                new Import("setForeground", "javax.swing.text.StyleConstants", true),
              })
          .put(
              "ENCODING_CDR_ENCAPS",
              new Import[] {
                new Import("ENCODING_CDR_ENCAPS", "org.omg.IOP", false),
              })
          .put(
              "_dk_Struct",
              new Import[] {
                new Import("_dk_Struct", "org.omg.CORBA.DefinitionKind", true),
              })
          .put(
              "JobHoldUntil",
              new Import[] {
                new Import("JobHoldUntil", "javax.print.attribute.standard", false),
              })
          .put(
              "TRACK",
              new Import[] {
                new Import("TRACK", "java.awt.event.AdjustmentEvent", true),
              })
          .put(
              "ABORTED_BY_SYSTEM",
              new Import[] {
                new Import(
                    "ABORTED_BY_SYSTEM", "javax.print.attribute.standard.JobStateReason", true),
              })
          .put(
              "Exception",
              new Import[] {
                new Import("Exception", "java.lang", false),
              })
          .put(
              "BigDecimal",
              new Import[] {
                new Import("BigDecimal", "java.math", false),
              })
          .put(
              "userNodeForPackage",
              new Import[] {
                new Import("userNodeForPackage", "java.util.prefs.Preferences", true),
              })
          .put(
              "SERIF",
              new Import[] {
                new Import("SERIF", "java.awt.Font", true),
              })
          .put(
              "MAX_SCROLL",
              new Import[] {
                new Import("MAX_SCROLL", "javax.swing.plaf.basic.BasicSliderUI", true),
              })
          .put(
              "EXPANDABLE",
              new Import[] {
                new Import("EXPANDABLE", "javax.accessibility.AccessibleState", true),
              })
          .put(
              "Callback",
              new Import[] {
                new Import("Callback", "javax.security.auth.callback", false),
              })
          .put(
              "ShortMessage",
              new Import[] {
                new Import("ShortMessage", "javax.sound.midi", false),
              })
          .put(
              "SrcAtop",
              new Import[] {
                new Import("SrcAtop", "java.awt.AlphaComposite", true),
              })
          .put(
              "MAX_KEY_LENGTH",
              new Import[] {
                new Import("MAX_KEY_LENGTH", "java.util.prefs.Preferences", true),
              })
          .put(
              "PrintJobAdapter",
              new Import[] {
                new Import("PrintJobAdapter", "javax.print.event", false),
              })
          .put(
              "ROOT_PANE_PROPERTY",
              new Import[] {
                new Import("ROOT_PANE_PROPERTY", "javax.swing.JInternalFrame", true),
              })
          .put(
              "CLEAR",
              new Import[] {
                new Import("CLEAR", "java.awt.AlphaComposite", true),
                new Import("CLEAR", "javax.swing.text.html.CSS.Attribute", true),
                new Import("CLEAR", "javax.swing.text.html.HTML.Attribute", true),
              })
          .put(
              "NULL_ATTRIBUTE_VALUE",
              new Import[] {
                new Import("NULL_ATTRIBUTE_VALUE", "javax.swing.text.html.HTML", true),
              })
          .build();
}
