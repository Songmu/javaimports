// Code generated by GenerateStdlib.java. DO NOT EDIT.
package com.nikodoko.javaimports.stdlib.internal.api.v8;

import com.google.common.collect.ImmutableMap;
import com.nikodoko.javaimports.parser.Import;
import java.util.Map;

public class Java8StdlibChunk27 {
  static final Map<String, Import[]> CLASSES =
      new ImmutableMap.Builder<String, Import[]>()
          .put(
              "CharSeqHelper",
              new Import[] {
                new Import("CharSeqHelper", "org.omg.CORBA", false),
              })
          .put(
              "icSigMeasurementTag",
              new Import[] {
                new Import("icSigMeasurementTag", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "ReadableByteChannel",
              new Import[] {
                new Import("ReadableByteChannel", "java.nio.channels", false),
              })
          .put(
              "IIOMetadataController",
              new Import[] {
                new Import("IIOMetadataController", "javax.imageio.metadata", false),
              })
          .put(
              "LIST_STYLE_IMAGE",
              new Import[] {
                new Import("LIST_STYLE_IMAGE", "javax.swing.text.html.CSS.Attribute", true),
              })
          .put(
              "InetSocketAddress",
              new Import[] {
                new Import("InetSocketAddress", "java.net", false),
              })
          .put(
              "fromMethodDescriptorString",
              new Import[] {
                new Import("fromMethodDescriptorString", "java.lang.invoke.MethodType", true),
              })
          .put(
              "IllegalFormatConversionException",
              new Import[] {
                new Import("IllegalFormatConversionException", "java.util", false),
              })
          .put(
              "TAI_LE",
              new Import[] {
                new Import("TAI_LE", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "quote",
              new Import[] {
                new Import("quote", "java.util.regex.Pattern", true),
                new Import("quote", "javax.management.ObjectName", true),
              })
          .put(
              "readAny",
              new Import[] {
                new Import("readAny", "javax.rmi.CORBA.Util", true),
              })
          .put(
              "TreeSet",
              new Import[] {
                new Import("TreeSet", "java.util", false),
              })
          .put(
              "XML_NS_PREFIX",
              new Import[] {
                new Import("XML_NS_PREFIX", "javax.xml.XMLConstants", true),
              })
          .put(
              "SOAPException",
              new Import[] {
                new Import("SOAPException", "javax.xml.soap", false),
              })
          .put(
              "LongToIntFunction",
              new Import[] {
                new Import("LongToIntFunction", "java.util.function", false),
              })
          .put(
              "EDGE_NO_OP",
              new Import[] {
                new Import("EDGE_NO_OP", "java.awt.image.ConvolveOp", true),
              })
          .put(
              "classattr",
              new Import[] {
                new Import("classattr", "javax.management.Query", true),
              })
          .put(
              "KeyRep",
              new Import[] {
                new Import("KeyRep", "java.security", false),
              })
          .put(
              "getISOLanguages",
              new Import[] {
                new Import("getISOLanguages", "java.util.Locale", true),
              })
          .put(
              "MBeanRegistration",
              new Import[] {
                new Import("MBeanRegistration", "javax.management", false),
              })
          .put(
              "MIDI_SYNC",
              new Import[] {
                new Import("MIDI_SYNC", "javax.sound.midi.Sequencer.SyncMode", true),
              })
          .put(
              "A10",
              new Import[] {
                new Import("A10", "java.awt.PageAttributes.MediaType", true),
                new Import("A10", "javax.print.attribute.standard.MediaSize.ISO", true),
              })
          .put(
              "TABBED_PANE",
              new Import[] {
                new Import("TABBED_PANE", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "MOVING_TO_PAUSED",
              new Import[] {
                new Import(
                    "MOVING_TO_PAUSED", "javax.print.attribute.standard.PrinterStateReason", true),
              })
          .put(
              "stringFlavor",
              new Import[] {
                new Import("stringFlavor", "java.awt.datatransfer.DataFlavor", true),
              })
          .put(
              "NA_LETTER",
              new Import[] {
                new Import("NA_LETTER", "java.awt.PageAttributes.MediaType", true),
                new Import("NA_LETTER", "javax.print.attribute.standard.MediaSizeName", true),
              })
          .put(
              "logicalAnd",
              new Import[] {
                new Import("logicalAnd", "java.lang.Boolean", true),
              })
          .put(
              "TYPE_BYTE",
              new Import[] {
                new Import("TYPE_BYTE", "java.awt.image.DataBuffer", true),
              })
          .put(
              "DOMINO_TILES",
              new Import[] {
                new Import("DOMINO_TILES", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "copyObjects",
              new Import[] {
                new Import("copyObjects", "javax.rmi.CORBA.Util", true),
              })
          .put(
              "emptyLongSpliterator",
              new Import[] {
                new Import("emptyLongSpliterator", "java.util.Spliterators", true),
              })
          .put(
              "AlgorithmConstraints",
              new Import[] {
                new Import("AlgorithmConstraints", "java.security", false),
              })
          .put(
              "CODE_ATTRIBUTE_PFX",
              new Import[] {
                new Import("CODE_ATTRIBUTE_PFX", "java.util.jar.Pack200.Packer", true),
              })
          .put(
              "WildcardType",
              new Import[] {
                new Import("WildcardType", "java.lang.reflect", false),
                new Import("WildcardType", "javax.lang.model.type", false),
              })
          .put(
              "ServerRequestInfo",
              new Import[] {
                new Import("ServerRequestInfo", "org.omg.PortableInterceptor", false),
              })
          .put(
              "JobMessageFromOperator",
              new Import[] {
                new Import("JobMessageFromOperator", "javax.print.attribute.standard", false),
              })
          .put(
              "TemporalAmount",
              new Import[] {
                new Import("TemporalAmount", "java.time.temporal", false),
              })
          .put(
              "ElementFilter",
              new Import[] {
                new Import("ElementFilter", "javax.lang.model.util", false),
              })
          .put(
              "printUnsignedInt",
              new Import[] {
                new Import("printUnsignedInt", "javax.xml.bind.DatatypeConverter", true),
              })
          .put(
              "JMXConnectorServerMBean",
              new Import[] {
                new Import("JMXConnectorServerMBean", "javax.management.remote", false),
              })
          .put(
              "_dk_Native",
              new Import[] {
                new Import("_dk_Native", "org.omg.CORBA.DefinitionKind", true),
              })
          .put(
              "ACCESS_EXTERNAL_DTD",
              new Import[] {
                new Import("ACCESS_EXTERNAL_DTD", "javax.xml.XMLConstants", true),
              })
          .put(
              "SHARADA",
              new Import[] {
                new Import("SHARADA", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "DosFileAttributes",
              new Import[] {
                new Import("DosFileAttributes", "java.nio.file.attribute", false),
              })
          .put(
              "dk_Repository",
              new Import[] {
                new Import("dk_Repository", "org.omg.CORBA.DefinitionKind", true),
              })
          .put(
              "VALUE_TEXT_ANTIALIAS_DEFAULT",
              new Import[] {
                new Import("VALUE_TEXT_ANTIALIAS_DEFAULT", "java.awt.RenderingHints", true),
              })
          .put(
              "OUTPUT_AREA_ALMOST_FULL",
              new Import[] {
                new Import(
                    "OUTPUT_AREA_ALMOST_FULL",
                    "javax.print.attribute.standard.PrinterStateReason",
                    true),
              })
          .put(
              "RightIndent",
              new Import[] {
                new Import("RightIndent", "javax.swing.text.StyleConstants", true),
              })
          .put(
              "STROKE",
              new Import[] {
                new Import("STROKE", "java.awt.font.ShapeGraphicAttribute", true),
              })
          .put(
              "ParameterizedType",
              new Import[] {
                new Import("ParameterizedType", "java.lang.reflect", false),
              })
          .put(
              "importedKeyNotDeferrable",
              new Import[] {
                new Import("importedKeyNotDeferrable", "java.sql.DatabaseMetaData", true),
              })
          .put(
              "SAMP",
              new Import[] {
                new Import("SAMP", "javax.swing.text.html.HTML.Tag", true),
              })
          .put(
              "URLEncoder",
              new Import[] {
                new Import("URLEncoder", "java.net", false),
              })
          .put(
              "PrinterStateReason",
              new Import[] {
                new Import("PrinterStateReason", "javax.print.attribute.standard", false),
              })
          .put(
              "SOAPHeader",
              new Import[] {
                new Import("SOAPHeader", "javax.xml.soap", false),
              })
          .put(
              "toHexString",
              new Import[] {
                new Import("toHexString", "java.lang.Double", true),
                new Import("toHexString", "java.lang.Float", true),
                new Import("toHexString", "java.lang.Integer", true),
                new Import("toHexString", "java.lang.Long", true),
              })
          .put(
              "icHdrSize",
              new Import[] {
                new Import("icHdrSize", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "MinguoChronology",
              new Import[] {
                new Import("MinguoChronology", "java.time.chrono", false),
              })
          .put(
              "getClassLoadingMXBean",
              new Import[] {
                new Import("getClassLoadingMXBean", "java.lang.management.ManagementFactory", true),
              })
          .put(
              "NumberOfDocuments",
              new Import[] {
                new Import("NumberOfDocuments", "javax.print.attribute.standard", false),
              })
          .put(
              "MenuComponent",
              new Import[] {
                new Import("MenuComponent", "java.awt", false),
              })
          .put(
              "UPDATABLE_VIEW_SYNC",
              new Import[] {
                new Import("UPDATABLE_VIEW_SYNC", "javax.sql.rowset.spi.SyncProvider", true),
              })
          .put(
              "EtchedBorder",
              new Import[] {
                new Import("EtchedBorder", "javax.swing.border", false),
              })
          .put(
              "abs",
              new Import[] {
                new Import("abs", "java.lang.Math", true),
                new Import("abs", "java.lang.StrictMath", true),
              })
          .put(
              "AsynchronousSocketChannel",
              new Import[] {
                new Import("AsynchronousSocketChannel", "java.nio.channels", false),
              })
          .put(
              "HandlerBase",
              new Import[] {
                new Import("HandlerBase", "org.xml.sax", false),
              })
          .put(
              "Parameter",
              new Import[] {
                new Import("Parameter", "java.lang.reflect", false),
                new Import("Parameter", "org.omg.Dynamic", false),
              })
          .put(
              "SyncProvider",
              new Import[] {
                new Import("SyncProvider", "javax.sql.rowset.spi", false),
              })
          .put(
              "groupingByConcurrent",
              new Import[] {
                new Import("groupingByConcurrent", "java.util.stream.Collectors", true),
              })
          .put(
              "STAPLE_DUAL_BOTTOM",
              new Import[] {
                new Import("STAPLE_DUAL_BOTTOM", "javax.print.attribute.standard.Finishings", true),
              })
          .put(
              "writeAny",
              new Import[] {
                new Import("writeAny", "javax.rmi.CORBA.Util", true),
              })
          .put(
              "RCSID",
              new Import[] {
                new Import("RCSID", "javax.swing.undo.StateEditable", true),
              })
          .put(
              "register",
              new Import[] {
                new Import("register", "java.rmi.activation.Activatable", true),
              })
          .put(
              "XPathException",
              new Import[] {
                new Import("XPathException", "javax.xml.xpath", false),
              })
          .put(
              "AnyHolder",
              new Import[] {
                new Import("AnyHolder", "org.omg.CORBA", false),
              })
          .put(
              "IntrospectionException",
              new Import[] {
                new Import("IntrospectionException", "java.beans", false),
                new Import("IntrospectionException", "javax.management", false),
              })
          .put(
              "GuardedObject",
              new Import[] {
                new Import("GuardedObject", "java.security", false),
              })
          .put(
              "UnmarshallerHandler",
              new Import[] {
                new Import("UnmarshallerHandler", "javax.xml.bind", false),
              })
          .put(
              "SignatureException",
              new Import[] {
                new Import("SignatureException", "java.security", false),
              })
          .put(
              "getFirstLineIndent",
              new Import[] {
                new Import("getFirstLineIndent", "javax.swing.text.StyleConstants", true),
              })
          .put(
              "getAWTKeyStroke",
              new Import[] {
                new Import("getAWTKeyStroke", "java.awt.AWTKeyStroke", true),
              })
          .put(
              "DragGestureRecognizer",
              new Import[] {
                new Import("DragGestureRecognizer", "java.awt.dnd", false),
              })
          .put(
              "removeProvider",
              new Import[] {
                new Import("removeProvider", "java.security.Security", true),
              })
          .put(
              "red",
              new Import[] {
                new Import("red", "java.awt.Color", true),
              })
          .put(
              "getOrientation",
              new Import[] {
                new Import("getOrientation", "java.awt.ComponentOrientation", true),
              })
          .put(
              "IllegalFormatPrecisionException",
              new Import[] {
                new Import("IllegalFormatPrecisionException", "java.util", false),
              })
          .put(
              "TypeMirror",
              new Import[] {
                new Import("TypeMirror", "javax.lang.model.type", false),
              })
          .put(
              "INITIATE_AND_ACCEPT",
              new Import[] {
                new Import("INITIATE_AND_ACCEPT", "org.ietf.jgss.GSSCredential", true),
              })
          .put(
              "LIST_DESELECT",
              new Import[] {
                new Import("LIST_DESELECT", "java.awt.Event", true),
              })
          .put(
              "SerialRef",
              new Import[] {
                new Import("SerialRef", "javax.sql.rowset.serial", false),
              })
          .put(
              "DEFAULT_CSS",
              new Import[] {
                new Import("DEFAULT_CSS", "javax.swing.text.html.HTMLEditorKit", true),
              })
          .put(
              "VK_ESCAPE",
              new Import[] {
                new Import("VK_ESCAPE", "java.awt.event.KeyEvent", true),
              })
          .put(
              "add",
              new Import[] {
                new Import("add", "java.awt.AWTEventMulticaster", true),
              })
          .put(
              "InvalidAlgorithmParameterException",
              new Import[] {
                new Import("InvalidAlgorithmParameterException", "java.security", false),
              })
          .put(
              "MBeanOperationInfo",
              new Import[] {
                new Import("MBeanOperationInfo", "javax.management", false),
              })
          .put(
              "HashPrintJobAttributeSet",
              new Import[] {
                new Import("HashPrintJobAttributeSet", "javax.print.attribute", false),
              })
          .put(
              "LIGHT",
              new Import[] {
                new Import("LIGHT", "javax.swing.plaf.metal.MetalIconFactory", true),
              })
          .put(
              "BAD_QOP",
              new Import[] {
                new Import("BAD_QOP", "org.ietf.jgss.GSSException", true),
              })
          .put(
              "HTTP_UNAVAILABLE",
              new Import[] {
                new Import("HTTP_UNAVAILABLE", "java.net.HttpURLConnection", true),
              })
          .put(
              "insertProviderAt",
              new Import[] {
                new Import("insertProviderAt", "java.security.Security", true),
              })
          .put(
              "Encoding",
              new Import[] {
                new Import("Encoding", "javax.sound.sampled.AudioFormat", false),
                new Import("Encoding", "org.omg.IOP", false),
              })
          .put(
              "BAD_QOS",
              new Import[] {
                new Import("BAD_QOS", "org.omg.CORBA", false),
              })
          .put(
              "AnnotatedParameterizedType",
              new Import[] {
                new Import("AnnotatedParameterizedType", "java.lang.reflect", false),
              })
          .put(
              "MAXLENGTH",
              new Import[] {
                new Import("MAXLENGTH", "javax.swing.text.html.HTML.Attribute", true),
              })
          .put(
              "tk_octet",
              new Import[] {
                new Import("tk_octet", "org.omg.CORBA.TCKind", true),
              })
          .put(
              "VK_KATAKANA",
              new Import[] {
                new Import("VK_KATAKANA", "java.awt.event.KeyEvent", true),
              })
          .put(
              "JCheckBoxMenuItem",
              new Import[] {
                new Import("JCheckBoxMenuItem", "javax.swing", false),
              })
          .put(
              "CookieStore",
              new Import[] {
                new Import("CookieStore", "java.net", false),
              })
          .put(
              "ModificationItem",
              new Import[] {
                new Import("ModificationItem", "javax.naming.directory", false),
              })
          .put(
              "CharSeqHolder",
              new Import[] {
                new Import("CharSeqHolder", "org.omg.CORBA", false),
              })
          .put(
              "PropertyEditor",
              new Import[] {
                new Import("PropertyEditor", "java.beans", false),
              })
          .put(
              "MAGENTA",
              new Import[] {
                new Import("MAGENTA", "java.awt.Color", true),
              })
          .put(
              "StreamTokenizer",
              new Import[] {
                new Import("StreamTokenizer", "java.io", false),
              })
          .put(
              "StructMemberHelper",
              new Import[] {
                new Import("StructMemberHelper", "org.omg.CORBA", false),
              })
          .put(
              "GENERIC_FAILURE",
              new Import[] {
                new Import("GENERIC_FAILURE", "java.util.logging.ErrorManager", true),
              })
          .put(
              "CaretEvent",
              new Import[] {
                new Import("CaretEvent", "javax.swing.event", false),
              })
          .put(
              "WIND_EVEN_ODD",
              new Import[] {
                new Import("WIND_EVEN_ODD", "java.awt.geom.Path2D", true),
                new Import("WIND_EVEN_ODD", "java.awt.geom.PathIterator", true),
              })
          .put(
              "BOLD_ACTION",
              new Import[] {
                new Import("BOLD_ACTION", "javax.swing.text.html.HTMLEditorKit", true),
              })
          .put(
              "ValidationException",
              new Import[] {
                new Import("ValidationException", "javax.xml.bind", false),
              })
          .put(
              "OL_CHIKI",
              new Import[] {
                new Import("OL_CHIKI", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "ROOT",
              new Import[] {
                new Import("ROOT", "java.util.Locale", true),
              })
          .put(
              "SUBWINDOW_OF",
              new Import[] {
                new Import("SUBWINDOW_OF", "javax.accessibility.AccessibleRelation", true),
              })
          .put(
              "LYDIAN",
              new Import[] {
                new Import("LYDIAN", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "ModelAttribute",
              new Import[] {
                new Import("ModelAttribute", "javax.swing.text.StyleConstants", true),
              })
          .put(
              "runFinalizersOnExit",
              new Import[] {
                new Import("runFinalizersOnExit", "java.lang.Runtime", true),
                new Import("runFinalizersOnExit", "java.lang.System", true),
              })
          .put(
              "SUBTRACT",
              new Import[] {
                new Import("SUBTRACT", "javax.xml.crypto.dsig.spec.XPathType.Filter", true),
              })
          .put(
              "NUMBER_FORMS",
              new Import[] {
                new Import("NUMBER_FORMS", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "MBeanConstructorInfo",
              new Import[] {
                new Import("MBeanConstructorInfo", "javax.management", false),
              })
          .put(
              "TextMeasurer",
              new Import[] {
                new Import("TextMeasurer", "java.awt.font", false),
              })
          .put(
              "BandedSampleModel",
              new Import[] {
                new Import("BandedSampleModel", "java.awt.image", false),
              })
          .put(
              "getGarbageCollectorMXBeans",
              new Import[] {
                new Import(
                    "getGarbageCollectorMXBeans", "java.lang.management.ManagementFactory", true),
              })
          .put(
              "IORInterceptor_3_0Operations",
              new Import[] {
                new Import("IORInterceptor_3_0Operations", "org.omg.PortableInterceptor", false),
              })
          .put(
              "XMLCryptoContext",
              new Import[] {
                new Import("XMLCryptoContext", "javax.xml.crypto", false),
              })
          .put(
              "enumerate",
              new Import[] {
                new Import("enumerate", "java.lang.Thread", true),
              })
          .put(
              "OBJECT_CHANGED",
              new Import[] {
                new Import("OBJECT_CHANGED", "javax.naming.event.NamingEvent", true),
              })
          .put(
              "VALUE_ALPHA_INTERPOLATION_SPEED",
              new Import[] {
                new Import("VALUE_ALPHA_INTERPOLATION_SPEED", "java.awt.RenderingHints", true),
              })
          .put(
              "intersect",
              new Import[] {
                new Import("intersect", "java.awt.geom.Rectangle2D", true),
              })
          .put(
              "toIntExact",
              new Import[] {
                new Import("toIntExact", "java.lang.Math", true),
                new Import("toIntExact", "java.lang.StrictMath", true),
              })
          .put(
              "typePredChar",
              new Import[] {
                new Import("typePredChar", "java.sql.DatabaseMetaData", true),
              })
          .put(
              "getKeymap",
              new Import[] {
                new Import("getKeymap", "javax.swing.text.JTextComponent", true),
              })
          .put(
              "Holder",
              new Import[] {
                new Import("Holder", "javax.xml.ws", false),
              })
          .put(
              "XMLObject",
              new Import[] {
                new Import("XMLObject", "javax.xml.crypto.dsig", false),
              })
          .put(
              "LayoutManager2",
              new Import[] {
                new Import("LayoutManager2", "java.awt", false),
              })
          .put(
              "newBuilder",
              new Import[] {
                new Import("newBuilder", "java.nio.file.attribute.AclEntry", true),
              })
          .put(
              "JPopupMenu",
              new Import[] {
                new Import("JPopupMenu", "javax.swing", false),
              })
          .put(
              "tableIndexClustered",
              new Import[] {
                new Import("tableIndexClustered", "java.sql.DatabaseMetaData", true),
              })
          .put(
              "NOT_SUPPORTED",
              new Import[] {
                new Import("NOT_SUPPORTED", "javax.print.attribute.standard.ColorSupported", true),
              })
          .put(
              "ICC_ColorSpace",
              new Import[] {
                new Import("ICC_ColorSpace", "java.awt.color", false),
              })
          .put(
              "controlDkShadow",
              new Import[] {
                new Import("controlDkShadow", "java.awt.SystemColor", true),
              })
          .put(
              "getTextBorder",
              new Import[] {
                new Import("getTextBorder", "javax.swing.plaf.metal.MetalBorders", true),
              })
          .put(
              "HANGUL_JAMO_EXTENDED_A",
              new Import[] {
                new Import("HANGUL_JAMO_EXTENDED_A", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "JobKOctetsProcessed",
              new Import[] {
                new Import("JobKOctetsProcessed", "javax.print.attribute.standard", false),
              })
          .put(
              "ConnectionEvent",
              new Import[] {
                new Import("ConnectionEvent", "javax.sql", false),
              })
          .put(
              "ContainerListener",
              new Import[] {
                new Import("ContainerListener", "java.awt.event", false),
              })
          .put(
              "SynthScrollPaneUI",
              new Import[] {
                new Import("SynthScrollPaneUI", "javax.swing.plaf.synth", false),
              })
          .put(
              "BoxPainter",
              new Import[] {
                new Import("BoxPainter", "javax.swing.text.html.StyleSheet", false),
              })
          .put(
              "NameAttribute",
              new Import[] {
                new Import("NameAttribute", "javax.swing.text.AttributeSet", true),
                new Import("NameAttribute", "javax.swing.text.StyleConstants", true),
              })
          .put(
              "HANGUL_JAMO_EXTENDED_B",
              new Import[] {
                new Import("HANGUL_JAMO_EXTENDED_B", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "STRONG",
              new Import[] {
                new Import("STRONG", "javax.swing.text.html.HTML.Tag", true),
              })
          .put(
              "StdACChrominance",
              new Import[] {
                new Import("StdACChrominance", "javax.imageio.plugins.jpeg.JPEGHuffmanTable", true),
              })
          .put(
              "SourceChannel",
              new Import[] {
                new Import("SourceChannel", "java.nio.channels.Pipe", false),
              })
          .put(
              "ACTIVE_CAPTION",
              new Import[] {
                new Import("ACTIVE_CAPTION", "java.awt.SystemColor", true),
              })
          .put(
              "BACK_SPACE",
              new Import[] {
                new Import("BACK_SPACE", "java.awt.Event", true),
              })
          .put(
              "TITLE_PROPERTY",
              new Import[] {
                new Import("TITLE_PROPERTY", "javax.swing.JInternalFrame", true),
              })
          .put(
              "ACTIVE_SENSING",
              new Import[] {
                new Import("ACTIVE_SENSING", "javax.sound.midi.ShortMessage", true),
              })
          .put(
              "convertPointToScreen",
              new Import[] {
                new Import("convertPointToScreen", "javax.swing.SwingUtilities", true),
              })
          .put(
              "IP_MULTICAST_LOOP",
              new Import[] {
                new Import("IP_MULTICAST_LOOP", "java.net.SocketOptions", true),
                new Import("IP_MULTICAST_LOOP", "java.net.StandardSocketOptions", true),
              })
          .put(
              "IIOReadUpdateListener",
              new Import[] {
                new Import("IIOReadUpdateListener", "javax.imageio.event", false),
              })
          .put(
              "INTERFACE",
              new Import[] {
                new Import("INTERFACE", "java.lang.reflect.Modifier", true),
              })
          .put(
              "ZonedDateTime",
              new Import[] {
                new Import("ZonedDateTime", "java.time", false),
              })
          .put(
              "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT",
              new Import[] {
                new Import("DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", "java.lang.Character", true),
              })
          .put(
              "INTERNAL_FRAME_FIRST",
              new Import[] {
                new Import("INTERNAL_FRAME_FIRST", "javax.swing.event.InternalFrameEvent", true),
              })
          .put(
              "UnexpectedException",
              new Import[] {
                new Import("UnexpectedException", "java.rmi", false),
              })
          .put(
              "GatheringByteChannel",
              new Import[] {
                new Import("GatheringByteChannel", "java.nio.channels", false),
              })
          .put(
              "setDefaultUncaughtExceptionHandler",
              new Import[] {
                new Import("setDefaultUncaughtExceptionHandler", "java.lang.Thread", true),
              })
          .put(
              "lookupMultiDocPrintServices",
              new Import[] {
                new Import("lookupMultiDocPrintServices", "javax.print.PrintServiceLookup", true),
              })
          .put(
              "FOCUS_LAST",
              new Import[] {
                new Import("FOCUS_LAST", "java.awt.event.FocusEvent", true),
              })
          .put(
              "SOAPBinding",
              new Import[] {
                new Import("SOAPBinding", "javax.jws.soap", false),
                new Import("SOAPBinding", "javax.xml.ws.soap", false),
              })
          .put(
              "getUserTextFont",
              new Import[] {
                new Import("getUserTextFont", "javax.swing.plaf.metal.MetalLookAndFeel", true),
              })
          .put(
              "ACCESS_EXTERNAL_STYLESHEET",
              new Import[] {
                new Import("ACCESS_EXTERNAL_STYLESHEET", "javax.xml.XMLConstants", true),
              })
          .put(
              "HostnameVerifier",
              new Import[] {
                new Import("HostnameVerifier", "javax.net.ssl", false),
              })
          .put(
              "highSurrogate",
              new Import[] {
                new Import("highSurrogate", "java.lang.Character", true),
              })
          .put(
              "DIRECTIONALITY_WHITESPACE",
              new Import[] {
                new Import("DIRECTIONALITY_WHITESPACE", "java.lang.Character", true),
              })
          .put(
              "exit",
              new Import[] {
                new Import("exit", "java.lang.System", true),
              })
          .put(
              "SNIMatcher",
              new Import[] {
                new Import("SNIMatcher", "javax.net.ssl", false),
              })
          .put(
              "system",
              new Import[] {
                new Import("system", "java.time.Clock", true),
              })
          .put(
              "inactiveCaptionBorder",
              new Import[] {
                new Import("inactiveCaptionBorder", "java.awt.SystemColor", true),
              })
          .put(
              "EMOTICONS",
              new Import[] {
                new Import("EMOTICONS", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "LoginException",
              new Import[] {
                new Import("LoginException", "javax.security.auth.login", false),
              })
          .put(
              "mapSystemException",
              new Import[] {
                new Import("mapSystemException", "javax.rmi.CORBA.Util", true),
              })
          .put(
              "DriverAction",
              new Import[] {
                new Import("DriverAction", "java.sql", false),
              })
          .put(
              "BiPredicate",
              new Import[] {
                new Import("BiPredicate", "java.util.function", false),
              })
          .put(
              "getReaderMIMETypes",
              new Import[] {
                new Import("getReaderMIMETypes", "javax.imageio.ImageIO", true),
              })
          .put(
              "FileAttribute",
              new Import[] {
                new Import("FileAttribute", "java.nio.file.attribute", false),
              })
          .put(
              "DeclaredType",
              new Import[] {
                new Import("DeclaredType", "javax.lang.model.type", false),
              })
          .put(
              "CycleMethod",
              new Import[] {
                new Import("CycleMethod", "java.awt.MultipleGradientPaint", false),
              })
          .put(
              "FocusAdapter",
              new Import[] {
                new Import("FocusAdapter", "java.awt.event", false),
              })
          .put(
              "VK_DOWN",
              new Import[] {
                new Import("VK_DOWN", "java.awt.event.KeyEvent", true),
              })
          .put(
              "UNDERLINE_LOW_ONE_PIXEL",
              new Import[] {
                new Import("UNDERLINE_LOW_ONE_PIXEL", "java.awt.font.TextAttribute", true),
              })
          .put(
              "ContentElementName",
              new Import[] {
                new Import("ContentElementName", "javax.swing.text.AbstractDocument", true),
              })
          .put(
              "ColorChooserComponentFactory",
              new Import[] {
                new Import("ColorChooserComponentFactory", "javax.swing.colorchooser", false),
              })
          .put(
              "TAG_DSIG",
              new Import[] {
                new Import("TAG_DSIG", "java.awt.font.OpenType", true),
              })
          .put(
              "VK_EQUALS",
              new Import[] {
                new Import("VK_EQUALS", "java.awt.event.KeyEvent", true),
              })
          .put(
              "getOperatingSystemMXBean",
              new Import[] {
                new Import(
                    "getOperatingSystemMXBean", "java.lang.management.ManagementFactory", true),
              })
          .put(
              "SpinnerDateModel",
              new Import[] {
                new Import("SpinnerDateModel", "javax.swing", false),
              })
          .put(
              "NamingContext",
              new Import[] {
                new Import("NamingContext", "org.omg.CosNaming", false),
              })
          .put(
              "NVARCHAR",
              new Import[] {
                new Import("NVARCHAR", "java.sql.Types", true),
              })
          .put(
              "WSDL_OPERATION",
              new Import[] {
                new Import("WSDL_OPERATION", "javax.xml.ws.handler.MessageContext", true),
              })
          .put(
              "PINK",
              new Import[] {
                new Import("PINK", "java.awt.Color", true),
              })
          .put(
              "CUNEIFORM_NUMBERS_AND_PUNCTUATION",
              new Import[] {
                new Import(
                    "CUNEIFORM_NUMBERS_AND_PUNCTUATION", "java.lang.Character.UnicodeBlock", true),
              })
          .put(
              "MetalInternalFrameTitlePane",
              new Import[] {
                new Import("MetalInternalFrameTitlePane", "javax.swing.plaf.metal", false),
              })
          .put(
              "TAG_ALTERNATE_IIOP_ADDRESS",
              new Import[] {
                new Import("TAG_ALTERNATE_IIOP_ADDRESS", "org.omg.IOP", false),
              })
          .put(
              "UPDATE",
              new Import[] {
                new Import("UPDATE", "java.awt.event.PaintEvent", true),
                new Import("UPDATE", "javax.accessibility.AccessibleTableModelChange", true),
                new Import("UPDATE", "javax.swing.event.TableModelEvent", true),
              })
          .put(
              "SAVE",
              new Import[] {
                new Import("SAVE", "java.awt.FileDialog", true),
              })
          .put(
              "OfPrimitive",
              new Import[] {
                new Import("OfPrimitive", "java.util.Spliterator", false),
              })
          .put(
              "icSigSpace8CLR",
              new Import[] {
                new Import("icSigSpace8CLR", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "calculateTiledPositions",
              new Import[] {
                new Import("calculateTiledPositions", "javax.swing.SizeRequirements", true),
              })
          .put(
              "_SINGLE_THREAD_MODEL",
              new Import[] {
                new Import(
                    "_SINGLE_THREAD_MODEL", "org.omg.PortableServer.ThreadPolicyValue", true),
              })
          .put(
              "FilterInputStream",
              new Import[] {
                new Import("FilterInputStream", "java.io", false),
              })
          .put(
              "forName",
              new Import[] {
                new Import("forName", "java.lang.Class", true),
                new Import("forName", "java.lang.Character.UnicodeBlock", true),
                new Import("forName", "java.lang.Character.UnicodeScript", true),
                new Import("forName", "java.nio.charset.Charset", true),
              })
          .put(
              "synchronizedSet",
              new Import[] {
                new Import("synchronizedSet", "java.util.Collections", true),
              })
          .put(
              "MessageFactory",
              new Import[] {
                new Import("MessageFactory", "javax.xml.soap", false),
              })
          .put(
              "XmlJavaTypeAdapter",
              new Import[] {
                new Import("XmlJavaTypeAdapter", "javax.xml.bind.annotation.adapters", false),
              })
          .put(
              "Text",
              new Import[] {
                new Import("Text", "javax.xml.soap", false),
                new Import("Text", "org.w3c.dom", false),
              })
          .put(
              "Attributes2",
              new Import[] {
                new Import("Attributes2", "org.xml.sax.ext", false),
              })
          .put(
              "SELECT",
              new Import[] {
                new Import("SELECT", "javax.swing.text.html.HTML.Tag", true),
              })
          .put(
              "IllegalAccessException",
              new Import[] {
                new Import("IllegalAccessException", "java.lang", false),
              })
          .put(
              "Lock",
              new Import[] {
                new Import("Lock", "java.util.concurrent.locks", false),
              })
          .put(
              "icSigSpaceCCLR",
              new Import[] {
                new Import("icSigSpaceCCLR", "java.awt.color.ICC_Profile", true),
              })
          .put(
              "unmodifiableSortedMap",
              new Import[] {
                new Import("unmodifiableSortedMap", "java.util.Collections", true),
              })
          .put(
              "ResolveAttribute",
              new Import[] {
                new Import("ResolveAttribute", "javax.swing.text.AttributeSet", true),
                new Import("ResolveAttribute", "javax.swing.text.StyleConstants", true),
              })
          .put(
              "getSequence",
              new Import[] {
                new Import("getSequence", "javax.sound.midi.MidiSystem", true),
              })
          .put(
              "NORMAL",
              new Import[] {
                new Import("NORMAL", "java.awt.Frame", true),
                new Import("NORMAL", "java.awt.PageAttributes.PrintQualityType", true),
                new Import("NORMAL", "javax.print.attribute.standard.PrintQuality", true),
              })
          .put(
              "XPathFilter2ParameterSpec",
              new Import[] {
                new Import("XPathFilter2ParameterSpec", "javax.xml.crypto.dsig.spec", false),
              })
          .put(
              "BasicInternalFrameTitlePane",
              new Import[] {
                new Import("BasicInternalFrameTitlePane", "javax.swing.plaf.basic", false),
              })
          .put(
              "FilterWriter",
              new Import[] {
                new Import("FilterWriter", "java.io", false),
              })
          .put(
              "TEXT_PLAIN_UTF_8",
              new Import[] {
                new Import("TEXT_PLAIN_UTF_8", "javax.print.DocFlavor.BYTE_ARRAY", true),
                new Import("TEXT_PLAIN_UTF_8", "javax.print.DocFlavor.INPUT_STREAM", true),
                new Import("TEXT_PLAIN_UTF_8", "javax.print.DocFlavor.URL", true),
              })
          .put(
              "Compression",
              new Import[] {
                new Import("Compression", "javax.print.attribute.standard", false),
              })
          .put(
              "ARRAY",
              new Import[] {
                new Import("ARRAY", "java.sql.Types", true),
              })
          .put(
              "getTimeZone",
              new Import[] {
                new Import("getTimeZone", "java.util.TimeZone", true),
              })
          .put(
              "AUTHORITATIVE",
              new Import[] {
                new Import("AUTHORITATIVE", "javax.naming.Context", true),
              })
          .put(
              "ACCESSIBLE_TABLE_ROW_HEADER_CHANGED",
              new Import[] {
                new Import(
                    "ACCESSIBLE_TABLE_ROW_HEADER_CHANGED",
                    "javax.accessibility.AccessibleContext",
                    true),
              })
          .put(
              "RELATION_MBEAN_UPDATE",
              new Import[] {
                new Import(
                    "RELATION_MBEAN_UPDATE",
                    "javax.management.relation.RelationNotification",
                    true),
              })
          .put(
              "RemoteRef",
              new Import[] {
                new Import("RemoteRef", "java.rmi.server", false),
              })
          .put(
              "InternalFrameUI",
              new Import[] {
                new Import("InternalFrameUI", "javax.swing.plaf", false),
              })
          .put(
              "TCKind",
              new Import[] {
                new Import("TCKind", "org.omg.CORBA", false),
              })
          .put(
              "PIPE",
              new Import[] {
                new Import("PIPE", "java.lang.ProcessBuilder.Redirect", true),
              })
          .put(
              "DynamicImplementation",
              new Import[] {
                new Import("DynamicImplementation", "org.omg.CORBA", false),
                new Import("DynamicImplementation", "org.omg.PortableServer", false),
              })
          .put(
              "ParagraphElementName",
              new Import[] {
                new Import("ParagraphElementName", "javax.swing.text.AbstractDocument", true),
              })
          .put(
              "RoleUnresolvedList",
              new Import[] {
                new Import("RoleUnresolvedList", "javax.management.relation", false),
              })
          .put(
              "BasicComboBoxRenderer",
              new Import[] {
                new Import("BasicComboBoxRenderer", "javax.swing.plaf.basic", false),
              })
          .put(
              "COMBO_BOX",
              new Import[] {
                new Import("COMBO_BOX", "javax.accessibility.AccessibleRole", true),
                new Import("COMBO_BOX", "javax.swing.plaf.synth.Region", true),
              })
          .put(
              "LifespanPolicyOperations",
              new Import[] {
                new Import("LifespanPolicyOperations", "org.omg.PortableServer", false),
              })
          .put(
              "ID_UNIQUENESS_POLICY_ID",
              new Import[] {
                new Import("ID_UNIQUENESS_POLICY_ID", "org.omg.PortableServer", false),
              })
          .put(
              "CHAR_REPLACEMENT",
              new Import[] {
                new Import("CHAR_REPLACEMENT", "java.awt.font.TextAttribute", true),
              })
          .put(
              "permuteArguments",
              new Import[] {
                new Import("permuteArguments", "java.lang.invoke.MethodHandles", true),
              })
          .put(
              "getVersions",
              new Import[] {
                new Import("getVersions", "java.time.zone.ZoneRulesProvider", true),
              })
          .put(
              "EXTENSION_NAME",
              new Import[] {
                new Import("EXTENSION_NAME", "java.util.jar.Attributes.Name", true),
              })
          .put(
              "OLD_TOKEN",
              new Import[] {
                new Import("OLD_TOKEN", "org.ietf.jgss.GSSException", true),
              })
          .put(
              "ScrollPaneLayout",
              new Import[] {
                new Import("ScrollPaneLayout", "javax.swing", false),
              })
          .put(
              "ROUND_UP",
              new Import[] {
                new Import("ROUND_UP", "java.math.BigDecimal", true),
              })
          .put(
              "BeanContextServiceProviderBeanInfo",
              new Import[] {
                new Import("BeanContextServiceProviderBeanInfo", "java.beans.beancontext", false),
              })
          .put(
              "TEXT_EVENT_MASK",
              new Import[] {
                new Import("TEXT_EVENT_MASK", "java.awt.AWTEvent", true),
              })
          .put(
              "AUTO_RESIZE_NEXT_COLUMN",
              new Import[] {
                new Import("AUTO_RESIZE_NEXT_COLUMN", "javax.swing.JTable", true),
              })
          .put(
              "POLICY_NODICTIONARY",
              new Import[] {
                new Import("POLICY_NODICTIONARY", "javax.security.sasl.Sasl", true),
              })
          .put(
              "Option",
              new Import[] {
                new Import("Option", "java.security.cert.PKIXRevocationChecker", false),
                new Import("Option", "javax.swing.text.html", false),
              })
          .put(
              "setSocketFactory",
              new Import[] {
                new Import("setSocketFactory", "java.net.ServerSocket", true),
                new Import("setSocketFactory", "java.rmi.server.RMISocketFactory", true),
              })
          .put(
              "PermissionCollection",
              new Import[] {
                new Import("PermissionCollection", "java.security", false),
              })
          .put(
              "CharsetProvider",
              new Import[] {
                new Import("CharsetProvider", "java.nio.charset.spi", false),
              })
          .put(
              "LANDSCAPE",
              new Import[] {
                new Import("LANDSCAPE", "java.awt.PageAttributes.OrientationRequestedType", true),
                new Import("LANDSCAPE", "java.awt.print.PageFormat", true),
                new Import(
                    "LANDSCAPE", "javax.print.attribute.standard.OrientationRequested", true),
              })
          .put(
              "VK_ROMAN_CHARACTERS",
              new Import[] {
                new Import("VK_ROMAN_CHARACTERS", "java.awt.event.KeyEvent", true),
              })
          .put(
              "JIS_B10",
              new Import[] {
                new Import("JIS_B10", "java.awt.PageAttributes.MediaType", true),
                new Import("JIS_B10", "javax.print.attribute.standard.MediaSizeName", true),
              })
          .put(
              "DOCUMENT_POSITION_CONTAINS",
              new Import[] {
                new Import("DOCUMENT_POSITION_CONTAINS", "org.w3c.dom.Node", true),
              })
          .put(
              "createPacked",
              new Import[] {
                new Import("createPacked", "javax.imageio.ImageTypeSpecifier", true),
              })
          .put(
              "SecondaryLoop",
              new Import[] {
                new Import("SecondaryLoop", "java.awt", false),
              })
          .put(
              "ModelMBeanAttributeInfo",
              new Import[] {
                new Import("ModelMBeanAttributeInfo", "javax.management.modelmbean", false),
              })
          .put(
              "Monitor",
              new Import[] {
                new Import("Monitor", "javax.management.monitor", false),
              })
          .put(
              "DERIVATION_EXTENSION",
              new Import[] {
                new Import("DERIVATION_EXTENSION", "org.w3c.dom.TypeInfo", true),
              })
          .put(
              "KEY_ALPHA_INTERPOLATION",
              new Import[] {
                new Import("KEY_ALPHA_INTERPOLATION", "java.awt.RenderingHints", true),
              })
          .put(
              "and",
              new Import[] {
                new Import("and", "javax.management.Query", true),
              })
          .put(
              "RIGHT_ALIGNMENT",
              new Import[] {
                new Import("RIGHT_ALIGNMENT", "java.awt.Component", true),
              })
          .put(
              "InternalFrameFocusTraversalPolicy",
              new Import[] {
                new Import("InternalFrameFocusTraversalPolicy", "javax.swing", false),
              })
          .put(
              "Modifier",
              new Import[] {
                new Import("Modifier", "java.lang.reflect", false),
                new Import("Modifier", "java.nio.file.WatchEvent", false),
                new Import("Modifier", "javax.lang.model.element", false),
              })
          .put(
              "DefaultHighlightPainter",
              new Import[] {
                new Import("DefaultHighlightPainter", "javax.swing.text.DefaultHighlighter", false),
              })
          .put(
              "ROLLOVER",
              new Import[] {
                new Import("ROLLOVER", "javax.swing.DefaultButtonModel", true),
              })
          .put(
              "CancelablePrintJob",
              new Import[] {
                new Import("CancelablePrintJob", "javax.print", false),
              })
          .put(
              "setAccessible",
              new Import[] {
                new Import("setAccessible", "java.lang.reflect.AccessibleObject", true),
              })
          .put(
              "isFocusManagerEnabled",
              new Import[] {
                new Import("isFocusManagerEnabled", "javax.swing.FocusManager", true),
              })
          .put(
              "Transferable",
              new Import[] {
                new Import("Transferable", "java.awt.datatransfer", false),
              })
          .put(
              "UNKNOWN_NUMBER_OF_PAGES",
              new Import[] {
                new Import("UNKNOWN_NUMBER_OF_PAGES", "java.awt.print.Pageable", true),
              })
          .put(
              "PrivilegedExceptionAction",
              new Import[] {
                new Import("PrivilegedExceptionAction", "java.security", false),
              })
          .put(
              "findEditor",
              new Import[] {
                new Import("findEditor", "java.beans.PropertyEditorManager", true),
              })
          .put(
              "QOP",
              new Import[] {
                new Import("QOP", "javax.security.sasl.Sasl", true),
              })
          .put(
              "WrongTransactionHelper",
              new Import[] {
                new Import("WrongTransactionHelper", "org.omg.CORBA", false),
              })
          .put(
              "ScriptEngineFactory",
              new Import[] {
                new Import("ScriptEngineFactory", "javax.script", false),
              })
          .put(
              "AdjustmentListener",
              new Import[] {
                new Import("AdjustmentListener", "java.awt.event", false),
              })
          .put(
              "DTDConstants",
              new Import[] {
                new Import("DTDConstants", "javax.swing.text.html.parser", false),
              })
          .put(
              "RMIConnectionImpl",
              new Import[] {
                new Import("RMIConnectionImpl", "javax.management.remote.rmi", false),
              })
          .put(
              "MBeanServerFactory",
              new Import[] {
                new Import("MBeanServerFactory", "javax.management", false),
              })
          .put(
              "ROWS",
              new Import[] {
                new Import("ROWS", "javax.swing.text.html.HTML.Attribute", true),
              })
          .build();
}
